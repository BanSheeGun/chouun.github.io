<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Fate / Unlimited Darkness]]></title>
  <subtitle><![CDATA[命运 / 无尽长夜]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://fateud.com//"/>
  <updated>2015-09-03T12:46:18.195Z</updated>
  <id>http://fateud.com//</id>
  
  <author>
    <name><![CDATA[ChouUn]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[紀念世界反法西斯戰爭勝利70週年閱兵式]]></title>
    <link href="http://fateud.com/2015/09/03/note-antifascism/"/>
    <id>http://fateud.com/2015/09/03/note-antifascism/</id>
    <published>2015-09-03T04:27:40.000Z</published>
    <updated>2015-09-03T12:46:18.195Z</updated>
    <content type="html"><![CDATA[<div style="text-align:center;"><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-antifascism/sen-cin-paoq-tzeu.png"><br>無論毀譽參半<br>曾談笑風生的他 終究露出了疲態<br>詼諧搞怪的蛤蛤<br></div>

<p>警告：以上圖文與正文無關<br><a id="more"></a></p>
<h2 id="談下標題">談下標題</h2><p>細心的讀者會發現，標題似乎少了「暨」之前的一些字。<br>此處不多加點評，只因我個人覺得離勝利還遠得很，禮儀、文化、抑或更多。</p>
<h2 id="閱兵禮炮">閱兵禮炮</h2><p>還是講正事。<br>今朝我在投影儀前觀看了閱兵，70響禮炮轟鳴之時，主播解釋這是爲了紀念70週年，拉開大會的序幕。<br>70週年70響，80週年80響，我是多麼希望有成千上萬響的那一天，即便此身已化作一剖黃土。<br>弔古傷今，我不禁潸然淚下，默默趴在桌上抽噎。此刻憑誰都不曉得我心中的風起雲涌。</p>
<h2 id="木村成彥">木村成彥</h2><p>這幾日約莫是我的大姨父，特別容易受傷，軀體或者精神。下面又有一則撩撥我心絃的短文。</p>
<blockquote><p>（木村成彥）一說起養母，他想到了自己十幾歲時，養母在零下40攝氏度背他去醫院看病：<br>他想起了養母40歲就掉光了的牙齒，「我小時候身體弱，她沒有奶，聽說高粱汁可以養活，她用嘴嚼煮熟的高粱米，趁熱放到白布上擠出汁水，牙在那時被燙壞了。」<br>「她一直說：『小子，等你工作了就給我鑲牙。』可我工作就趕上了『ven keq』，一年的錢都不夠鑲牙，她終於沒等到我給她鑲牙的那一天……我對不起她。」木村成彥泣不成聲。</p>
</blockquote>
<p>這是段樸實無華的口語，卻勾起我潛藏深處的感動，眼眶險些綻出了淚。<br>子欲養而親不待，身爲子女的過失莫過於此。<br>一度試圖欺騙自己，科技發達、壽元綿長，盡孝之日尚多。<br>安知命運的擺佈，令愛你的與你愛的、宛如流沙，輕易從指縫溜走。</p>
<h2 id="讀書筆記">讀書筆記</h2><blockquote><p>三嬸是個好媽媽，我感慨地想。不知道鄭南音自己知道不知道，世界上有個人這麼在意她的想法和感覺——哪怕是不理解也要盡力維護，這是多大的福氣。</p>
<footer><strong>笛安</strong><cite>《西決》</cite></footer></blockquote>
<p>無論觜上是否承認，我深切的瞭解我娘對我的寬容。<br>不過我並不希望如此，甚至用粗暴的方式拒絕。<br>因爲這會讓我有種負罪感，而我選擇成爲懦弱的逃避者。</p>
]]></content>
    <summary type="html">
    <![CDATA[<div style="text-align:center;"><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-antifascism/sen-cin-paoq-tzeu.png"><br>無論毀譽參半<br>曾談笑風生的他 終究露出了疲態<br>詼諧搞怪的蛤蛤<br></div>

<p>警告：以上圖文與正文無關<br>]]>
    
    </summary>
    
      <category term="反法西斯" scheme="http://fateud.com/tags/%E5%8F%8D%E6%B3%95%E8%A5%BF%E6%96%AF/"/>
    
      <category term="木村成彥" scheme="http://fateud.com/tags/%E6%9C%A8%E6%9D%91%E6%88%90%E5%BD%A5/"/>
    
      <category term="西決" scheme="http://fateud.com/tags/%E8%A5%BF%E6%B1%BA/"/>
    
      <category term="閱兵" scheme="http://fateud.com/tags/%E9%96%B1%E5%85%B5/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不存在上帝，因而人類沒有救贖]]></title>
    <link href="http://fateud.com/2015/08/23/note-turtle/"/>
    <id>http://fateud.com/2015/08/23/note-turtle/</id>
    <published>2015-08-23T05:44:14.000Z</published>
    <updated>2015-09-03T12:47:08.140Z</updated>
    <content type="html"><![CDATA[<h3 id="題記">題記</h3><blockquote><p>|8.23| 不存在上帝，因而人类没有救赎</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1" target="_blank" rel="external">user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1</a></cite></footer></blockquote>
<a id="more"></a>
<h3 id="引子">引子</h3><p>追了這禮拜的<a href="http://www.bilibili.com/video/av2773147/" target="_blank" rel="external">「暴走大事件」</a>，直至海龜八分鐘，險些潸然淚下。<br>無法想象它鼻中貫穿着人類的惡，竟能戰戰兢兢得捱過那麼多辰光。<br>當拍攝者們爲它施救之時，我如芒在背，卻強忍下滑動進度條的衝動。<br>這是人類賦予自己的罪，我沒有選擇的權力，只能將苦澀默默飲盡。</p>
<h3 id="彈幕">彈幕</h3><p>不過仔細看了彈幕的內容，感覺曾經充滿愛的B站，也漸漸踏上A站的老路。</p>
<p>彈幕中羣衆主要分成兩派：</p>
<ul>
<li>對人類的行爲進行懺悔，作出不亂扔垃圾的許諾</li>
<li>對上述人羣的諾言質疑，認爲一覺醒來便忘個一乾二淨</li>
</ul>
<p>在此我不武斷地評判他們的對錯，僅對海龜的遭遇報以深切的同情與深刻的懺悔；<br>因爲除卻以上兩者，還有一種利用彈幕互相撕逼的噴子，一般稱呼他們爲網絡暴民。<br>於此，我能真切得感受到，網絡上人與人之間正在發酵的、沒來由的仇視。<br>戈爾·維達在《熱愛飛翔》中所說：<em>我們已經失去了很多人性的因素。</em></p>
<h3 id="思索">思索</h3><p>網絡上的大衆會認爲他們站在一種天然的正義的地位，並以此試圖控制輿論——這在他們平時的生活中是無法想象的。<br>他們可以給素昧平生的人製作痛苦，卻不用承擔相應的後果，滿足了自己原始的作惡的本能。<br>他們並沒有被輕易地賦予了這項權利，卻因爲網絡缺乏有效的監管，達到了同樣的目的。<br>他們所過之處散播的，是狂歡與衝動，是暴力與毀滅，是對理性與尊嚴赤裸裸的踐踏。<br>他們自以爲擁有獨立判斷、並追求某種獨特的價值觀，但是往往成爲鬥爭的犧牲品。<br>他們往往相信自己是理性的，甚至催生出了相應的自信。<br>他們一如<a href="https://en.wikipedia.org/wiki/Gustave_Le_Bon" target="_blank" rel="external">勒龐</a><a href="https://en.wikipedia.org/wiki/The_Crowd:_A_Study_of_the_Popular_Mind" target="_blank" rel="external">《烏合之衆》</a>所說：<em>羣體行爲可能是突然的和極端的；智力過程可能是初步的和機械的。</em><br>他們的麇集日漸擴增，他們的思想如瘟疫一般蔓延，即便是理性的人也會像牲畜一般行動。<br>他們不需要「磚家」、「叫獸」，因爲無所不知的他們便是真理。<br>他們也不需要統計學知識，一鳞半爪足以幫助他們作出正確判斷。<br>他們在現實中過着最齷齪的生活；<br>他們在網絡中當着最促狹的觀衆。<br>他們沒有過去，更不需要未來。</p>
<h3 id="後記">後記</h3><p>一如李海鵬所說，我們在寒夜中彼此仇恨，問題的根源卻遠在天邊。<br>不想刻意去批判一些物事，因爲我素來不擅長講道理，只會用些許粗暴的方式表達。<br>故此，直至這種境地，只是想很悲哀的、卻理所當然的反問自己一句：</p>
<div style="text-align:center;font-style:italic">將爲這片土地作出的努力，難道就是爲了服務這樣的一羣人？</div>

<h3 id="無關">無關</h3><p>這幾天開始軍訓，只好抽出零碎的時間來完成，將斷裂的思路，一一接續在博文之中。<br>順帶一提，某院軍訓的本質是磨滅個性的瞎折騰，我從中收穫的是無聲的反抗、而非一味的服從。<br>在教官和校方的雙重脅迫下，各種所謂的愚蠢的規定是無法改變的；我等「成功」成爲了當代的犬儒主義者。</p>
<div style="text-align:center;font-style:italic">我們正當人生中最美好的辰光，卻不能肆意地過最適合自己的生活。</div>


<p>順便附上徵文，命題莫名其妙，寫的自然也莫名其妙。</p>
<blockquote><p>我的軍訓、我的中國夢</p>
<p>第一次看到這個標題的時候，其實我是拒絕的，因爲總有些奇怪的命題讓我無從入手。我的軍訓，就是我的軍訓，至於爲什麼會跟中國夢扯上關係，我不甚明了，也漠不關心。當然這不妨礙我完成作文，因爲作文是種模式，就好似要撒一個官方的謊言，必須有時間人物地點，尤其關鍵的是必須有一個向上的主題。反正作爲中國式的文人，要求擁有無中生有的天賦；無論合理抑或不合理的要求，我已身經百戰了。</p>
<p>我先理性的認識了一下，我的軍訓，最主要是完成《兵役法》所規定的義務。這是最直接的來源，也是諸多大學生噩夢的開端。我不能說軍訓是不好的，軍訓好歹是有用的。你若強行要問軍訓好在哪裏，我不能武斷地回答你，因爲這樣容易對不起良心。</p>
<p>要說提高組織性紀律性吧，避不開暴曬、站軍姿、練步法之類的陳詞濫調。談及正步，個人經歷而言，學的正步不出一週便會忘光，以至於我初中高中大學學了三次，仍然沒有避免淪爲了回憶。正步自然不可能幫你找到女友，甚至不排除女友覺得你走路姿勢怪異決意分手的可能，更沒跟那些狗皮膏藥一樣，有包治百病的功效。所以事後我也沒覺得我將會多些服從上級的意識，甚至叛逆中二病會更加厲害。因爲你不能強迫我幹一些莫名其妙的事情，這會顯得我是個腦殘，必須聽別人的話才能達到某種目的。所以教官和學員之間，肯定有一個是傻子；而且作爲正常人，我不會去認爲自己是個傻子。這樣一圈兜下來，我也沒發現所謂的綜合素質有了長足的增長，僅有的變化就是更黑了點。</p>
<p>要說鍛鍊學生吃苦耐勞吧，更顯得蒼白無力，因爲強制性的吃苦未必能夠耐勞。哪怕軍訓了，平時上課該玩手機的繼續玩，該睡覺的也跟我一樣繼續睡，完全不受時空環境轉移，只要我高興就好。上課吹空調，下課打遊戲，平時不掛科，績點過的去，老師不必爲你操心笑還來不及，哪裏會跳出來讓你吃點苦頭。</p>
<p>至於我的中國夢，是無關乎黨啊、政府啊、軍隊啊之類的。因爲中國夢，理應是所有國人所共有的，不受搞七捻三的外界因素干擾。例如我想要華夏富強抵禦外虜，也不見得非得投筆從戎扛槍打靶；坐在電腦前，搞搞信息戰，豈不美哉？這樣看來，網絡恐怕也是一個沒有硝煙的戰場吧，淡化了軍訓的意義。</p>
<p>如Beyond所傾訴的：</p>
<div style="text-align:center;font-style:italic">無助與冰凍的眼睛/<br>流淚看天際帶悲憤/<br>是控訴戰爭到最後/<br>傷痛是兒童</div>

<p>所以我的中國夢，就是我能安安心心的睡在中國做夢。</p>
<div style="text-align:right">於乙未年甲申月丙子日</div><footer><strong>ChouUn</strong><cite>我的軍訓、我的中國夢</cite></footer></blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="題記">題記</h3><blockquote><p>|8.23| 不存在上帝，因而人类没有救赎</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1">user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1</a></cite></footer></blockquote>]]>
    
    </summary>
    
      <category term="人性" scheme="http://fateud.com/tags/%E4%BA%BA%E6%80%A7/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[餘姚珠璣]]></title>
    <link href="http://fateud.com/2015/08/03/note-pearl/"/>
    <id>http://fateud.com/2015/08/03/note-pearl/</id>
    <published>2015-08-03T04:03:41.000Z</published>
    <updated>2015-08-30T05:49:33.780Z</updated>
    <content type="html"><![CDATA[<p>筆者方言是吳語太湖片臨紹小片餘姚話，包括餘姚（不含東部河姆渡等鎮）、慈溪（不含東部觀海衛等鎮）。<br>ps. 挖坑待填，有建議請回復<br><a id="more"></a></p>
<h2 id="拼音">拼音</h2><h3 id="聲母">聲母</h3><table><tr><th>全清</th><th>次清</th><th>全濁</th><th>次濁</th></tr><tr><th>p /p/ 幫</th><th>ph /pʰ/ 滂</th><th>b /bʱ/ 並</th><th>m /m/ 明微</th></tr><tr><th></th><th>f /f/ 非敷</th><th>v /vʱ/ 奉</th><th></th></tr><tr><th>t /t/ 端</th><th>th /tʰ/ 透</th><th>d /dʱ/ 定</th><th>n /n/ (泥孃日洪音)</th></tr><tr><th>k /k/ 見</th><th>kh /kʰ/ 溪</th><th>g /gʱ/ 羣</th><th>ng /ŋ/ (疑洪音)</th></tr><tr><th>ts /ʦ/ 莊章知</th><th>tsh /ʦʰ/ 初昌徹</th><th>dz /ʣʱ/ 崇常澄從</th><th></th></tr><tr><th></th><th>s /s/ 生書</th><th>z /zʱ/ 俟船</th><th></th></tr><tr><th>c /ʨ/ 精</th><th>ch /ʨʰ/ 清</th><th>j /ʥʱ/ 羣(從三)</th><th>gn /ɲ//ȵ/ (泥孃日疑細音)</th></tr><tr><th></th><th>sh /ɕ/ 心</th><th>zh /ʑʱ/ 邪</th><th></th></tr><tr><th>q /ʔ/ 影</th><th>h /h/ 曉</th><th>gh /ɦ/ 匣</th><th>y /j/ 云以</th></tr><tr><th>l /l/ 來</th><th></th><th></th><th></th></tr></table>

<h3 id="韻母">韻母</h3><table><tr><th>開口呼</th><th>齊齒呼</th><th>合口呼</th><th>撮口呼</th></tr><tr><th>單字韻</th></tr><tr><th>r /r/ 兒(文)</th><th>n /n/ 唔</th><th>ng /ŋ/ 五吳兒</th><th>m /m/ 呣</th></tr><tr><th>陰聲韻</th></tr><tr><th></th><th>i /i/ 微廢齊</th><th>u /ɯ/ 汝烏夫</th><th>y /y/ 余虞雨 u </th></tr><tr><th></th><th>i /ɿ/ 此水之</th><th>u /ʮ/ 諸粗鬚</th><th></th></tr><tr><th>a /a/ 泰鞋買</th><th>ia /ia/ 茄姐夜</th><th>ua /ua/ 壞乖快</th><th></th></tr><tr><th>o /o/ 麻佳差</th><th>io /io/ 家(文)</th><th>uo /uo/ 瓜話瓦</th><th></th></tr><tr><th>e /e/ 岁灰愛</th><th>ie /ie/ 也(文)</th><th>ue /ue/ 危爲會</th><th></th></tr><tr><th>au /ɔ/ 豪交兆</th><th>iau /iɔ/ 肴宵蕭</th><th></th><th></th></tr><tr><th>eu /ɤ/ 浮豆貿</th><th>ieu /iɤ/ 尤幽流</th><th></th><th></th></tr><tr><th>ou /u/ 歌果戈</th><th></th><th></th><th></th></tr><tr><th>陽聲韻</th></tr><tr><th>aen /ɛn/ 山刪咸</th><th>iaen /iɛn/ 嚴眼廿</th><th>uaen /uɛn/ 桓彎關</th><th></th></tr><tr><th>en /en/ 寒覃鹽</th><th>ien /ien/ 仙先添</th><th></th><th></th></tr><tr><th>oen /œn/ 滿盤團</th><th></th><th>uoen /uœn/ 碗管亂</th><th>ioen /ioen/ 元卷涓</th></tr><tr><th>eon /ən/ 臻曾深</th><th>in /ɪn/ 欣影靜</th><th>un /uən/ 倫魂文</th><th>yn /yɪn/ 君(文)</th></tr><tr><th>ang /ɑŋ/ 庚耕生</th><th>iang /iɑŋ/ 陽良牆</th><th>uang /uɑŋ/ 橫梗晃</th><th></th></tr><tr><th>ong /ɔŋ/ 江巷唐</th><th>iong /iɔŋ/ 降(文)</th><th>uong /uɔŋ/ 光王黃</th><th></th></tr><tr><th>ung /oŋ/ 東冬鐘</th><th></th><th></th><th>iung /ioŋ/ 君窮熊</th></tr><tr><th>入声韵</th></tr><tr><th>ah /aʔ/ 瞎麥陌</th><th>iah /iaʔ/ 药若嚼</th><th>uah /uaʔ/ 滑霍刮</th><th></th></tr><tr><th>eoh /əh/ 德色沒</th><th></th><th></th><th></th></tr><tr><th>eh /ɪʔ/ 撥術革</th><th>ieh /iɪʔ/ 一席雪</th><th>ueh /uɪʔ/ 核活闊</th><th></th></tr><tr><th>oh /oʔ/ 屋八各</th><th></th><th></th><th>ioh /ioʔ/ 菊月</th></tr><tr><th>oeh /œʔ/ 脱奪</th><th></th><th></th><th>ioeh /iœʔ/ 厥閱月(文)</th></tr></table>

<h2 id="單字">單字</h2><ul>
<li>姊</li>
<li>尾</li>
<li>味</li>
<li>微</li>
</ul>
<h2 id="詞彙">詞彙</h2><h3 id="飲食">飲食</h3><ul>
<li>豆腐潤<br>豆腐潤 deu vu zeon /dɤ vɯ zən/</li>
<li>楊梅</li>
<li>翼梢</li>
<li>舌頭</li>
<li>帶魚</li>
</ul>
<h3 id="文化">文化</h3><ul>
<li>灘簧</li>
<li>姚劇</li>
<li>搭天橋</li>
</ul>
<h3 id="稱謂">稱謂</h3><ul>
<li>我儂渠啦</li>
<li>呣媽爸爸爹孃</li>
<li>老倌</li>
<li>先生</li>
<li>後生(家)</li>
</ul>
<h3 id="罹語">罹語</h3><ul>
<li>衆生</li>
<li>離爹乖孃</li>
<li>不出產</li>
<li>卵脬</li>
</ul>
<h3 id="其他">其他</h3><ul>
<li>按板</li>
<li>石骨鐵硬</li>
<li>一式一樣</li>
<li>花樣百出/奇出百樣</li>
<li>犯關</li>
<li>葉爿</li>
<li>天家</li>
</ul>
<h2 id="語法">語法</h2><ul>
<li>哉/了哉</li>
<li>未/了未</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>筆者方言是吳語太湖片臨紹小片餘姚話，包括餘姚（不含東部河姆渡等鎮）、慈溪（不含東部觀海衛等鎮）。<br>ps. 挖坑待填，有建議請回復<br>]]>
    
    </summary>
    
      <category term="音韻學" scheme="http://fateud.com/tags/%E9%9F%B3%E9%9F%BB%E5%AD%B8/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://fateud.com/2015/06/22/note-hexo/"/>
    <id>http://fateud.com/2015/06/22/note-hexo/</id>
    <published>2015-06-22T06:14:23.000Z</published>
    <updated>2015-08-24T15:01:39.569Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. </p>
</blockquote>
<p>以上一行字，表明我转投了<a href="http://hexo.io/" target="_blank" rel="external"><strong>Hexo</strong></a>的怀抱。</p>
<a id="more"></a>
<p>最初用的<a href="http://blog.csdn.net/y63308042" target="_blank" rel="external"><em>csdn</em></a>，感觉自由度过低（不能任意DIY），很是不爽；<br>后来用<a href="http://idlepilot.com/" target="_blank" rel="external"><strong>飞行员</strong></a>的衡天主机搭了个<a href="http://cn.wordpress.org/" target="_blank" rel="external"><em>WordPress</em></a>，然而维护太繁琐。<br>累觉不爱的我听从<a href="http://loli.be/" target="_blank" rel="external"><strong>Smoogle</strong></a>用了<a href="http://hexo.io/" target="_blank" rel="external"><em>Hexo</em></a>，现在想来静态blog也是极好。<br>用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>写博文，这才符合我这种屌丝码农的身份嘛……</p>
<h2 id="绪论">绪论</h2><h3 id="Hexo是啥箇物事">Hexo是啥箇物事</h3><blockquote>
<p>Hexo是一个快速、简洁且高效的博客框架。<br>Hexo使用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<h3 id="Hexo由边个开发">Hexo由边个开发</h3><blockquote>
<p>Hexo用<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>开发，作者是台湾大学生<a href="http://twitter.com/tommy351" target="_blank" rel="external">tommy351</a>。</p>
</blockquote>
<h3 id="出现问题谁背锅">出现问题谁背锅</h3><blockquote>
<p>如果您在使用过程中遇到问题，请查看<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a>，或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>、<a href="https://groups.google.com/group/hexo" target="_blank" rel="external">Google Group</a>上正面刚作者。</p>
</blockquote>
<h2 id="搭建">搭建</h2><h3 id="安装Node-js">安装Node.js</h3><p>到<a href="http://nodejs.org/" target="_blank" rel="external">Node.js官网</a>下载<strong>相应平台</strong>的<a href="http://nodejs.org/download/" target="_blank" rel="external">最新版本</a>，安装之。</p>
<h3 id="安装Git">安装Git</h3><blockquote>
<ul>
<li>Windows：下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>.</li>
<li>Mac：使用<a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">Homebrew</a>、<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a>或下载<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a>。</li>
<li>Linux (Ubuntu, Debian)：<code>$ sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>$ sudo yum install git-core</code></li>
</ul>
</blockquote>
<h3 id="安装Hexo">安装Hexo</h3><p>笔者以Windows为例</p>
<ol>
<li>打开Git Bash，执行<code>$ npm install -g hexo</code></li>
<li>用<code>$ cd</code>跟<code>$ ls</code>命令，进入一个文件夹作为Hexo的本地存储区域</li>
<li>执行<code>$ hexo init</code></li>
<li>执行<code>$ npm install</code></li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/cd&ls.png">
<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#10;&#9500;&#9472;&#9472; _config.yml&#10;&#9500;&#9472;&#9472; package.json&#10;&#9500;&#9472;&#9472; scaffolds&#10;&#9500;&#9472;&#9472; scripts&#10;&#9500;&#9472;&#9472; source&#10;&#9474;   &#9500;&#9472;&#9472; _drafts&#10;&#9474;   &#9492;&#9472;&#9472; _posts&#10;&#9492;&#9472;&#9472; themes</span><br></pre></td></tr></table></figure>
<p>其实到这里已经差不多了，剩下的只是如何去编辑、查看、发布。</p>
<h2 id="起飞">起飞</h2><h3 id="部署前戏">部署前戏</h3><ol>
<li>修改<code>\_config.yml</code>的deploy部分，注意你在此处用的repository必须名为<code>your_user_name.github.io</code>（忽略大小写）</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:&#10;  type: git&#10;  repository: https://github.com/ChouUn/chouun.github.io.git&#10;  branch: master</span><br></pre></td></tr></table></figure>
<ol>
<li>执行<code>$ npm install hexo-deployer-git --save</code>安装部署插件</li>
<li>执行<code>$ hexo d -g</code>进行部署</li>
<li>打开<code>http://your_user_name.github.io</code>察看效果</li>
</ol>
<p>ps. 新版本的hexo已经不再支持github，被新的git取代了。<br>pss. 过程中可能要求你调用这两个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"chouunsoft@gmail.com"</span></span><br><span class="line">$ git config --global user.name <span class="string">"ChouUn"</span></span><br></pre></td></tr></table></figure>
<p>psss. 为了避免命名空间冲突，每个用户对应唯一一个github.io，请对自己负责不要乱取名字</p>
<h3 id="常用命令">常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 完整命令</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span>    <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span>  <span class="comment">#新建页面</span></span><br><span class="line">$ hexo generate             <span class="comment">#生成页面</span></span><br><span class="line">$ hexo server               <span class="comment">#运行服务</span></span><br><span class="line">$ hexo deploy               <span class="comment">#部署博客</span></span><br><span class="line">$ hexo clean                <span class="comment">#清除缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 复合命令</span></span><br><span class="line">$ hexo server --generate    <span class="comment">#生成并运行</span></span><br><span class="line">$ hexo deploy --generate    <span class="comment">#生成并部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 缩写命令</span></span><br><span class="line">$ hexo n                    <span class="comment"># hexo new</span></span><br><span class="line">$ hexo g                    <span class="comment"># hexo generate</span></span><br><span class="line">$ hexo s                    <span class="comment"># hexo server</span></span><br><span class="line">$ hexo d                    <span class="comment"># hexo deploy</span></span><br><span class="line">$ hexo s -g                 <span class="comment"># hexo server -generate</span></span><br><span class="line">$ hexo d -g                 <span class="comment"># hexo deploy -generate</span></span><br></pre></td></tr></table></figure>
<p>一般使用<code>$ hexo n</code>新建文章，然后<code>$ hexo s -g</code>实时察看效果，最后<code>$ hexo d -g</code>部署到github上。<br>ps. <code>$ hexo server -s</code>可以运行静态服务，以确认生成是否成功，如果有异步，<code>$ hexo clean</code>以后再<code>$ hexo d -g</code>一次。</p>
<h3 id="标签插件">标签插件</h3><blockquote><p>They’re ported from Octopress and can help you insert specific contents in posts quickly.</p>
<footer><strong>Tag Plugins | Hexo</strong><cite><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">hexo.io/docs/tag-plugins.html</a></cite></footer></blockquote>
<p>译：这些功能是沿袭Octopress，以便你快速插入特殊内容。</p>
<ol>
<li><p>对书籍的引用</p>
<blockquote><p>露と落ち、露と消えにし、我が身かな、浪速のことも、夢のまた夢。</p>
<footer><strong>Toyotomi Hideyoshi</strong><cite>辞世の句</cite></footer></blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Toyotomi Hideyoshi, &#36766;&#19990;&#12398;&#21477; %&#125;&#10;&#38706;&#12392;&#33853;&#12385;&#12289;&#38706;&#12392;&#28040;&#12360;&#12395;&#12375;&#12289;&#25105;&#12364;&#36523;&#12363;&#12394;&#12289;&#28010;&#36895;&#12398;&#12371;&#12392;&#12418;&#12289;&#22818;&#12398;&#12414;&#12383;&#22818;&#12290; &#10;&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对网文的引用</p>
<blockquote><p>[範例]【WB】減少洩漏、提高效率、數據系統<br>雖然我的系統很舊了，不過看最近在研究這東西的人還不少</p>
<footer><strong>Weberkkk</strong><cite><a href="http://forums.wasabistudio.ca/viewtopic.php?t=23408" target="_blank" rel="external">forums.wasabistudio.ca/viewtopic.php?t=23408</a></cite></footer></blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Weberkkk http://forums.wasabistudio.ca/viewtopic.php?t=23408 %&#125;&#10;[&#31684;&#20363;]&#12304;WB&#12305;&#28187;&#23569;&#27945;&#28431;&#12289;&#25552;&#39640;&#25928;&#29575;&#12289;&#25976;&#25818;&#31995;&#32113;&#10;&#38614;&#28982;&#25105;&#30340;&#31995;&#32113;&#24456;&#33290;&#20102;&#65292;&#19981;&#36942;&#30475;&#26368;&#36817;&#22312;&#30740;&#31350;&#36889;&#26481;&#35199;&#30340;&#20154;&#36996;&#19981;&#23569;&#10;&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码块</p>
<figure class="highlight cpp"><figcaption><span>helloworld</span><a href="/code/helloworld.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"!!!Hello World!!!"</span> &lt;&lt; endl; <span class="comment">// prints !!!Hello World!!!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% include_code helloworld lang:cpp helloworld.cpp %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="绑定域名">绑定域名</h3><blockquote><p>如果有自己的域名，在<code>\Hexo\source</code>内创建一个文件名为<code>CNAME</code>（没有后缀）的文件，在里面加入自己的域名，如：<code>xuzhenyang.com</code>，部署后就能在浏览器里进入自己的域名看到自己的博客啦~</p>
<footer><strong>Hello Hexo | 飞行员手册</strong><cite><a href="http://idlepilot.com/2015/04/06/Hello%20Hexo/" target="_blank" rel="external">idlepilot.com/2015/04/06/Hello%20Hexo</a></cite></footer></blockquote>
<p>CNAME文件，起到的只是一个跳转作用。此处利用chrome右键<code>审核元素 -&gt; Network</code>，勾上保留日志<code>Preserve log</code>，打开自己的blog，你会发现一个Method为GET、Status为301的文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remote Address:103.245.222.133:80&#10;Request URL:http://chouun.github.io/&#10;Request Method:GET&#10;Status Code:301 Moved Permanently (from cache)&#10;&#10;Date:Fri, 07 Aug 2015 07:59:18 GMT&#10;Location:http://fateud.com/&#10;Server:GitHub.com</span><br></pre></td></tr></table></figure>
<p>显然你需要一个自己的域名，不然填什么都是为别人做嫁衣。我的<code>fateud.com</code>是从狗爹(<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>)上入的。</p>
<ol>
<li><code>control + R</code>输入<code>cmd</code>回车，输入<code>ping your_user_name.github.io</code>回车，得知自己ip是<em>103.245.222.133</em></li>
<li>登录<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>，添加你的域名，并添加两个A记录，名为<code>@</code>和<code>www</code>，记录值为ip，保存</li>
<li>登录<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>，点击My Account，选择你的域名，在<code>SETTINGS</code>里，管理<code>Nameservers</code>，选择<code>Custom</code>，添加记录<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code></li>
<li>修改CNAME，为你的域名，不需要<code>www</code>等开头，如<a href="https://github.com/ChouUn/chouun.github.io/blob/master/CNAME" target="_blank" rel="external"></a></li>
<li>坐等解析更新，不用心急，可以ping你的域名，判断是否成功。</li>
<li>有些人可能注意到了<code>mxbiz1.qq.com</code>之类的，网站邮件收发，我采用了腾讯的<a href="http://exmail.qq.com/" target="_blank" rel="external">企业邮箱</a></li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/dnspod.png">
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/ping.png">
<h3 id="七牛图床">七牛图床</h3><p>图片容易拖慢博客的速度，加上github在国内访问时好时坏，同时为了方便博客的迁移，所以用上了七牛图床。七牛支持防盗链、日志，且自带处理功能，以完成水印、缩放、裁剪，甚至支持用户的深度定制。<br>每月免费额度：存储空间10GB、下载流量10GB、10万次PUT请求、100万次GET请求。不得不说是相当优厚的条件，还可以通过<a href="https://portal.qiniu.com/signup?code=3l9w67jqysksy" target="_blank" rel="external">七牛邀请</a>来获取额外额度。顺便提及一下「key-value 存储系统」。</p>
<blockquote><p>Q：七牛云存储支持目录或文件夹概念么？<br>A：七牛云存储的服务端是一个 key-value 系统，而非树形结构，因此也没有“目录”或者“文件夹”的概念。<br>其中，value 是用户上传到七牛云存储的文件，key 是一个用户自定义的字符串，用于在服务端标识这个 value 这个文件。一个 key 对应一个 value，因此，在每个空间（Bucket）中，key 必须是唯一的。<br>key 中可以包含斜杠“/”，让你感觉起来像目录结构，比如 “a/b/c/d.txt” 这个 key，在服务端只对应一个文件，但它看起来像 a 目录下的 b 目录下的 c 目录下的文件 d.txt。实际上，服务端是不存在 a、b、c 三个目录的，也没法创建目录。</p>
<footer><strong>Qiniu</strong><cite><a href="http://kb.qiniu.com/key-value-system" target="_blank" rel="external">kb.qiniu.com/key-value-system</a></cite></footer></blockquote>
<ol>
<li>执行<code>$ npm install hexo-qiniu-sync --save</code>安装七牛插件</li>
<li>对七牛进行设置，详见<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external">gyk001/hexo-qiniu-sync</a>；ak和sk参见<a href="https://portal.qiniu.com/setting/key" target="_blank" rel="external">密钥 - 账号设置 - 七牛云存储</a>，要注意空间不能是<code>private</code>的，被坑了很久</li>
<li>运行<code>$ hexo qiniu s</code>进行第一次同步，<code>/hexo</code>下会出现一个与<code>local_dir</code>属性同名的文件夹，里面的分类你懂的</li>
<li>在文章中使用<code><img title="图片标题" alt="图片说明" class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/exam.png"></code>标签插入图片<br>ps. 第二步中的<code>urlPrefix</code>因人而异，比如我是<code>http://7xjw62.com5.z0.glb.clouddn.com/</code>，所以你们别被坑了<br>pss. 因为对<code>$ hexo deploy</code>的支持尚有问题，我们需要手动进行上传..</li>
</ol>
<h3 id="更多信息">更多信息</h3><p><a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a><br><a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a><br><a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a><br><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">Tag Plugins</a></p>
<h2 id="编辑">编辑</h2><h3 id="安装Sublime">安装Sublime</h3><p>个人喜欢用稳定的<a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime 2</a>，下载了官方原版（无限试用期）。</p>
<h3 id="安装Package_Control">安装Package Control</h3><p>按下<code>Control + BackQuote</code>调出Console，键入一下代码并回车。所谓BackQuote就是<code>~</code>键中的反引号。</p>
<ul>
<li>sublime 2</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)</span><br></pre></td></tr></table></figure>
<ul>
<li>sublime 3</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</span><br></pre></td></tr></table></figure>
<p>若是安装成功，重启后能在<code>Preferences -&gt; Package Settings</code>中找到<code>Package Control</code>。</p>
<h3 id="安装Markdown_&amp;_Monokai">安装Markdown &amp; Monokai</h3><ol>
<li>按下<code>Control + Shift + P</code>，键入<code>Package Control: install Package</code>回车，键入<code>Markdown Extended</code>回车，即可安装该Package。</li>
<li>同样操作，安装<code>Monokai Extended</code>。</li>
</ol>
<h3 id="配置Sublime">配置Sublime</h3><ol>
<li><p>打开<code>Preferences -&gt; Settings - User</code>，在一对<code>{}</code>内的开头添加以下语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;color_scheme&#34;: &#34;Packages/Monokai Extended/Monokai Extended Bright.tmTheme&#34;,&#10;&#34;theme&#34;: &#34;Soda Dark.sublime-theme&#34;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>勾上<code>View -&gt; Syntax -&gt; Markdown Extended</code></p>
</li>
<li>重启之，随便开个<code>.md</code>文件看看高亮效果，下图仅供参考。</li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/sublime.png">
<h3 id="Markdown语法">Markdown语法</h3><p>因为篇幅有限，对于md的语法部分，原谅我不予赘述。</p>
<ol>
<li>简体中文: <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></li>
<li>繁体中文: <a href="http://markdown.tw/" target="_blank" rel="external">http://markdown.tw/</a></li>
<li>英文原版: <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">http://daringfireball.net/projects/markdown/syntax</a></li>
<li>密集排版: <a href="http://www.applecho.com/markdown-guide/" target="_blank" rel="external">http://www.applecho.com/markdown-guide/</a></li>
<li>飞行员版: <a href="http://idlepilot.com/2015/07/12/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/" target="_blank" rel="external">http://idlepilot.com/2015/07/12/Markdown常用语法/</a></li>
</ol>
<h2 id="主题">主题</h2><blockquote>
<p><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Jacman</a>是为<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman始于<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">Pacman</a>修改而来。</p>
</blockquote>
<h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure>
<p><strong>Jacman 需要 Hexo 2.7 及以上版本</strong> </p>
<h3 id="启用">启用</h3><p>修改博客根目录下的配置文件<code>_config.yml</code>，把<code>theme</code>的值修改为 <code>jacman</code>.</p>
<h3 id="配置">配置</h3><p>修改<code>/themes/jacman/_config.yml</code>中的配置。通过<a href="https://github.com/wuchong/jacman/wiki/%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97" target="_blank" rel="external">配置指南wiki</a>了解更多</p>
<h3 id="公式">公式</h3><p>$\frac{\partial u}{\partial t} = h^2 \left(<br>\frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}<br>\right)$<br>以上公式由以下代码生成，调用了$Mathjax$的接口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\frac&#123;\partial u&#125;&#123;\partial t&#125; &#10;= h^2 \left( &#10;\frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +&#10;\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +&#10;\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;&#10;\right)$</span><br></pre></td></tr></table></figure>
<p>此功能需要在配置里修改如下项<code>mathjax: true</code>，抑或在每个文章中手动添加。<br>用一对<code>$$</code>会单独占用一行，用一对<code>$</code>会作为内容的顺延。</p>
<h3 id="评论">评论</h3><p>该主题自带disqus和duoshuo支持，把shortname填上去即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### Comment&#10;duoshuo_shortname: fateud ## e.g. wuchong   your duoshuo short name.&#10;disqus_shortname: chouun  ## e.g. wuchong   your disqus short name.</span><br></pre></td></tr></table></figure>
<h3 id="支持">支持</h3><p>更多功能与信息请查阅：<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Jacman官网</a></p>
<h2 id="参考">参考</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">文档 | Hexo</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客 | 不如</a><br><a href="http://idlepilot.com/2015/04/06/Hello%20Hexo/" target="_blank" rel="external">Hello Hexo | 飞行员手册</a><br><a href="http://daringfireball.net/projects/markdown/syntax/" target="_blank" rel="external">Daring Fireball: Markdown Syntax Documentation</a><br><a href="http://code-tech.diandian.com/post/2012-11-10/40041958361" target="_blank" rel="external">配置Sublime Text使用Markdown，语法高亮,生成HTML_技术党</a><br><a href="http://lucifr.com/2011/08/31/sublime-text-2-tricks-and-tips/" target="_blank" rel="external">Sublime Text 2 入门及技巧 | Lucifr</a><br><a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external">MarkdownEditing：Sublime Text 2 的 Markdown 利器 | Lucifr</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Welcome to <a href="http://hexo.io/">Hexo</a>! Check <a href="http://hexo.io/docs/">documentation</a> for more info. </p>
</blockquote>
<p>以上一行字，表明我转投了<a href="http://hexo.io/"><strong>Hexo</strong></a>的怀抱。</p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://fateud.com/tags/blog/"/>
    
      <category term="github" scheme="http://fateud.com/tags/github/"/>
    
      <category term="hexo" scheme="http://fateud.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://fateud.com/tags/markdown/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[亡语]]></title>
    <link href="http://fateud.com/2015/04/13/note-leave/"/>
    <id>http://fateud.com/2015/04/13/note-leave/</id>
    <published>2015-04-13T07:36:26.000Z</published>
    <updated>2015-08-28T13:50:50.915Z</updated>
    <content type="html"><![CDATA[<p>就在此时，忽然收到我妈的消息，阿太也走了。</p>
<a id="more"></a>
<h3 id="2015-04-13">2015.04.13</h3><p>我回到寝室，很出乎自己意料，哭得比以往都要伤心。<br>毕竟我爹走的时候，我并没有流露出弱态。<br>终究还是太突然的缘故吧。<br>阿太以往身子骨健硕，使我没有过多的防备。<br>突如其来的噩耗，轻易的击穿了我的底线。<br>对阿太的关注，还是太少了。<br>逝者已矣。</p>
<h3 id="2015-07-08">2015.07.08</h3><p>今晨，半醒半睡中，梦到了我爹。<br>没有感到些许惊讶。<br>他的左眼眶是空的，似是被人刮去。<br>我问他我妈呢。<br>他只是流了几滴泪，说句，“她死了”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>就在此时，忽然收到我妈的消息，阿太也走了。</p>]]>
    
    </summary>
    
      <category term="伤离别" scheme="http://fateud.com/tags/%E4%BC%A4%E7%A6%BB%E5%88%AB/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[残龙的数学笔记]]></title>
    <link href="http://fateud.com/2015/03/28/note-math/"/>
    <id>http://fateud.com/2015/03/28/note-math/</id>
    <published>2015-03-28T10:41:59.000Z</published>
    <updated>2015-08-24T15:01:49.211Z</updated>
    <content type="html"><![CDATA[<p>老实说了吧，这篇东西是个大坑，反正我根本没准备填。<br>你们如果有靠谱的资料，可以贴在下面供我参考，谢谢。</p>
<a id="more"></a>
<h2 id="概念">概念</h2><h3 id="最大公约数(Greatest_Common_Divisor)">最大公约数(Greatest Common Divisor)</h3><p>某几个整数共有约数中最大的一个。</p>
<h2 id="算法">算法</h2><h3 id="欧几里得算法(Euclidean_Algorithm)">欧几里得算法(Euclidean Algorithm)</h3><p>欧几里德算法：$\begin{eqnarray} gcd(a,b) = \begin{cases}<br>a,                 &amp; b = 0 \cr<br>gcd(b, a \bmod b), &amp; otherwise<br>\end{cases} \end{eqnarray}$</p>
<blockquote>
<p>证明:<br>令$r = gcd(a,b)$<br>则$r \mid a, r \mid b$<br>故$r \mid (a - b)$<br>引$r \mid (a - kb) \Rightarrow r \mid (a - \lfloor \frac{a}{b} \rfloor b) \Rightarrow r \mid (a \bmod b)$<br>故$gcd(a,b) \equiv gcd(b, a \bmod b)$</p>
</blockquote>
<h3 id="扩展欧几里得算法(Extended_Euclidean_Algorithm)">扩展欧几里得算法(Extended Euclidean Algorithm)</h3><h3 id="莫比乌斯函数(Möbius_Function)">莫比乌斯函数(Möbius Function)</h3><p>一般用$mu(n)$或者$\mu(n)$表示，是个积性函数(multiplicative function)<br>$\begin{eqnarray} \mu(n) = \begin{cases}<br>x = 1,      &amp; n = 1 \cr<br>x = (-1)^k, &amp; \text{if } n \text{ is the product of } k \text{ different primes} \cr<br>x = 0,         &amp; otherwise<br>\end{cases} \end{eqnarray}$</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>老实说了吧，这篇东西是个大坑，反正我根本没准备填。<br>你们如果有靠谱的资料，可以贴在下面供我参考，谢谢。</p>]]>
    
    </summary>
    
      <category term="數論" scheme="http://fateud.com/tags/%E6%95%B8%E8%AB%96/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[代码模板（长期更新）]]></title>
    <link href="http://fateud.com/2015/01/29/code-template/"/>
    <id>http://fateud.com/2015/01/29/code-template/</id>
    <published>2015-01-28T17:04:17.000Z</published>
    <updated>2015-08-21T17:21:11.871Z</updated>
    <content type="html"><![CDATA[<p>不管你信不信, 反正这个页面是炸了.<br>如果不及时补上, 会产生一片虚空, 继而演变成黑洞.<br>然后像抽水马桶一样, 把整个博客吸进去!</p>
<a id="more"></a>
<h2 id="使用方法">使用方法</h2><p>$Github$上有<a href="https://github.com/ChouUn/CodeTemplate/tree/master/Template_Release" target="_blank" rel="external">Release</a>和<a href="https://github.com/ChouUn/CodeTemplate/tree/master/Template_Debug" target="_blank" rel="external">Debug</a>两种版本。作为头文件使用的，建议下载Release版本。</p>
<p>平时写代码的时候，可以通过<code>#include &lt;...&gt;</code>的方式，来调用这些功能。提交的时候，把这些文件的所有内容全选，然后替换掉include语句即可。因为我使用了<code>ifndef</code>进行检测，不会出现<code>multi-define</code>之类的蠢事，可以安心食用。</p>
<ul>
<li>Dev-Cpp x64<br>可以放入<code>Dev-Cpp\MinGW64\lib\gcc\x86_64-w64-mingw32\4.8.1\include\c++</code></li>
<li>MinGW<br>丢进<code>MinGW\mingw32\lib\gcc\mingw32\4.8.1\include\c++</code>里</li>
<li>Eclipse 用户<ol>
<li>新建一个<code>C++ Project</code></li>
<li>在其中新建一个<code>Source Folder</code></li>
<li>工程上右键<code>Properties -&gt; C/C++ General -&gt; Paths and Symbols</code>, </li>
<li>点击<code>Includes 选项卡</code>，在<code>GNU C++</code>中点<code>Add</code></li>
<li><code>Directory</code>填<code>/工程名/文件夹名</code></li>
<li>勾上<code>Is a workspace path</code>，按OK即可</li>
</ol>
</li>
<li>其他用户<br>你可以直接copy进去，其实完全没影响。</li>
</ul>
<p>ps. 不同版本的文件夹会有些许差异<br>pss. 建议以后写程序一直用这个工程, 方便你管理源码.</p>
<h2 id="更新日志">更新日志</h2><p>20150815: 你以为我真的会写？<br>20150427: 更新了csl_std.h<br>20150428: 更新了csl_math.h<br>20150503: 更新了bigint.h, fenwick.h<br>20150503: 今后代码将直接与GitHub同步</p>
<h2 id="通用文件头">通用文件头</h2><h3 id="纸农の标准库">纸农の标准库</h3><figure class="highlight cpp"><figcaption><span>csl_std_intro.cpp</span><a href="/code//CodeTemplate/Template_Release/csl_std_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150808L</span><br><span class="line"> *</span><br><span class="line"> *  直接把csl_std.h的内容作为.cpp文件生成的模板</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_std.h</span><a href="/code//CodeTemplate/Template_Release/csl_std.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : ChouUn's Standard Library 纸农の标准库</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_STD_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_STD_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_STD_H_VERSION 20150814L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _USE_MATH_DEFINES</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;  pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>           ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>  ull;</span><br><span class="line"><span class="preprocessor">#ifdef _WIN32</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> i64         "%I64d"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> i64         "%lld"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* _WIN32 */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rep(i,a,n)  for (int i=a;i&lt;n;++i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rrep(i,a,n) for (int i=n-1;i&gt;=a;--i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_STD_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="数学计算">数学计算</h3><figure class="highlight cpp"><figcaption><span>csl_math_intro.cpp</span><a href="/code//CodeTemplate/Template_Release/csl_math_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150820L</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  gcd(_Tp a, _Tp b) : _Tp</span><br><span class="line"> *    返回 a 和 b 的最大公约数</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  gcd(_Tp a, _Tp b, _Tp&amp; x, _Tp&amp; y) : _Tp</span><br><span class="line"> *    返回 a 和 b 的最大公约数, 且满足 ax + by = 1</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Key&gt;</span><br><span class="line"> *  pow(_Tp c, _Tp n, _Key k) : _Tp</span><br><span class="line"> *    返回 c * (n ^ k)</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Key&gt;</span><br><span class="line"> *  pow(_Tp c, _Tp n, _Key k, _Tp m) : _Tp</span><br><span class="line"> *    返回 c * (n ^ k) % m</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  inv(_Tp x, _Tp m) : _Tp</span><br><span class="line"> *    返回 x 对于模数 m 的逆元, m 是质数</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_math.h</span><a href="/code//CodeTemplate/Template_Release/csl_math.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Mathematical Computation 数学计算</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_MATH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_MATH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_MATH_H_VERSION 20150820L</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp a, _Tp b)</span></span><br><span class="line">  </span>{ <span class="keyword">while</span> (b) { _Tp t=a%b; a=b; b=t; } <span class="keyword">return</span> a; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp a, _Tp b, _Tp&amp; x, _Tp&amp; y)</span></span><br><span class="line">  </span>{ <span class="keyword">if</span> (b) { _Tp r=gcd(b,a%b,y,x); <span class="keyword">return</span> y=y-a/b*x,r; } <span class="keyword">return</span> x=<span class="number">1</span>,y=<span class="number">0</span>,a; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Key&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">pow</span><span class="params">(_Tp c, _Tp n, _Key k)</span></span><br><span class="line">  </span>{ <span class="keyword">for</span> (; k; n=n*n,k&gt;&gt;=<span class="number">1</span>) <span class="keyword">if</span> (k&amp;<span class="number">1</span>) c=c*n; <span class="keyword">return</span> c; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Key&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">pow</span><span class="params">(_Tp c, _Tp n, _Key k, _Tp m)</span></span><br><span class="line">  </span>{ <span class="keyword">for</span> (; k; n=n*n%m,k&gt;&gt;=<span class="number">1</span>) <span class="keyword">if</span> (k&amp;<span class="number">1</span>) c=c*n%m; <span class="keyword">return</span> c%m; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">inv</span><span class="params">(_Tp x, _Tp m)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> csl::<span class="built_in">pow</span>(_Tp(<span class="number">1</span>),x,m-<span class="number">2</span>,m); }</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_MATH_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="算法">算法</h3><figure class="highlight cpp"><figcaption><span>csl_algo_intro.cpp</span><a href="/code//CodeTemplate/Template_Release/csl_algo_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150821L</span><br><span class="line"> *</span><br><span class="line"> *  euler::phi : std::vector&lt;int&gt;</span><br><span class="line"> *    获取欧拉函数</span><br><span class="line"> *</span><br><span class="line"> *  euler::div : std::vector&lt;int&gt;</span><br><span class="line"> *    获取最小因子</span><br><span class="line"> *</span><br><span class="line"> *  euler::prm : std::vector&lt;int&gt;</span><br><span class="line"> *    获得素数序列</span><br><span class="line"> *</span><br><span class="line"> *  euler::build(int __n) : void</span><br><span class="line"> *    欧拉筛法, [0,__n)</span><br><span class="line"> *    初始化欧拉函数/最小因子/素数序列</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_algo.h</span><a href="/code//CodeTemplate/Template_Release/csl_algo.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Algorithm 算法</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_ALGO_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_ALGO_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_ALGO_H_VERSION 20150821L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">namespace</span> euler {</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; phi, div, prm;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> __n)</span> </span>{</span><br><span class="line">      phi.resize(__n), div.resize(__n), prm.clear(), phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; __n; i++) {</span><br><span class="line">        <span class="keyword">if</span> (!div[i]) { phi[i] = i-<span class="number">1</span>; div[i] = i; prm.push_back(i); }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="keyword">int</span>)prm.size(); j++) {</span><br><span class="line">          <span class="keyword">if</span> (i * prm[j] &gt;= __n) <span class="keyword">break</span>;</span><br><span class="line">          div[i * prm[j]] = prm[j];</span><br><span class="line">          <span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>) { phi[i * prm[j]] = phi[i] * prm[j]; <span class="keyword">break</span>; }</span><br><span class="line">          <span class="keyword">else</span> phi[i * prm[j]] = phi[i] * (prm[j] - <span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="comment">// namespace euler</span></span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_ALGO_H_ */</span></span><br></pre></td></tr></table></figure>
<h2 id="存储结构">存储结构</h2><h3 id="前向链表">前向链表</h3><p>挖坑重写</p>
<h2 id="统计结构">统计结构</h2><h3 id="树状数组">树状数组</h3><figure class="highlight cpp"><figcaption><span>fenwick_intro.cpp</span><a href="/code//CodeTemplate/Template_Release/fenwick_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150821L</span><br><span class="line"> *</span><br><span class="line"> *  struct fenwick_tree</span><br><span class="line"> *</span><br><span class="line"> *  模板参数：</span><br><span class="line"> *  fenwick_tree &lt;_Tp&gt;</span><br><span class="line"> *    _Tp : 限定元素类型</span><br><span class="line"> *</span><br><span class="line"> *  成员变量：</span><br><span class="line"> *  m_data : std::vector&lt;_Tp&gt;</span><br><span class="line"> *    存储空间</span><br><span class="line"> *</span><br><span class="line"> *  职能：</span><br><span class="line"> *  build(_Tp* p_data, size_t p_size) : void</span><br><span class="line"> *    以p_data为源数据地址, p_size为元素数量, 建立树状数组</span><br><span class="line"> *</span><br><span class="line"> *  build(size_t p_size) : void</span><br><span class="line"> *    以p_size为元素数量, 建立空树状数组</span><br><span class="line"> *</span><br><span class="line"> *  元素访问：</span><br><span class="line"> *  query(int __x) const : _Tp</span><br><span class="line"> *    获得前__x个元素之和</span><br><span class="line"> *</span><br><span class="line"> *  修改符：</span><br><span class="line"> *  update(int __x, _Tp __v) : void</span><br><span class="line"> *    第__x个元素的值增加__v</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>fenwick.h</span><a href="/code//CodeTemplate/Template_Release/fenwick.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Fenwick Tree 树状数组</span></span><br><span class="line"><span class="comment">// AKA : Binary Indexed Tree 二分索引树</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef FENWICK_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FENWICK_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FENWICK_H_VERSION 20150814L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#ifndef lowbit</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="keyword">fenwick_t</span>ree {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp         <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">value_t</span>ype&gt; m_data;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> value_type* p_data, size_type p_size)</span> </span>{</span><br><span class="line">      m_data.resize(p_size + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p_size; ++i) m_data[i] = p_data[i-<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= p_size; ++i)</span><br><span class="line">        <span class="keyword">if</span> ((j = i + lowbit(i)) &lt;= p_size) m_data[j] += m_data[i];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(size_type p_size)</span></span><br><span class="line">    </span>{ m_data.assign(p_size + <span class="number">1</span>, <span class="number">0</span>); }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">query</span><span class="params">(size_type __x)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">      <span class="keyword">value_t</span>ype __res = <span class="keyword">value_t</span>ype();</span><br><span class="line">      <span class="keyword">for</span> (; __x &gt; <span class="number">0</span>; __x -= lowbit(__x)) __res += m_data[__x];</span><br><span class="line">      <span class="keyword">return</span> __res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(size_type __x, <span class="keyword">const</span> value_type&amp; __v)</span></span><br><span class="line">    </span>{ <span class="keyword">for</span> (; __x &lt; m_data.size(); __x += lowbit(__x)) m_data[__x] += __v; }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* FENWICK_H_ */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>fenwick_exam.cpp</span><a href="/code//CodeTemplate/Template_Release/fenwick_exam.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fenwick.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : fenwick_exam.cpp</span><br><span class="line"> *  Date : 2015年5月5日 下午7:51:37</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  csl::<span class="keyword">fenwick_t</span>ree&lt;<span class="keyword">int</span>&gt; ft;</span><br><span class="line">  ft.build(<span class="number">6</span>);</span><br><span class="line">  ft.update(<span class="number">1</span>, +<span class="number">3</span>);     <span class="comment">// 第1个元素增加3 : +3 +0 +0 +0 +0 +0</span></span><br><span class="line">  ft.update(<span class="number">2</span>, -<span class="number">5</span>);     <span class="comment">// 第2个元素减少5 : +3 -5 +0 +0 +0 +0</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"sum of [1,2] = %d\n"</span>, ft.query(<span class="number">2</span>));</span><br><span class="line">  ft.update(<span class="number">6</span>, +<span class="number">1</span>);     <span class="comment">// 第6个元素增加1 : +0 +0 +0 +0 +0 +1</span></span><br><span class="line">  ft.update(<span class="number">2</span>, -<span class="number">4</span>);     <span class="comment">// 第2个元素减少4 : +0 -4 +0 +0 +0 +1</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"sum of [1,6] = %d\n"</span>, ft.query(<span class="number">6</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="线段树">线段树</h3><h3 id="稀疏表">稀疏表</h3><figure class="highlight cpp"><figcaption><span>sparse_intro.cpp</span><a href="/code//CodeTemplate/Template_Release/sparse_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150808L</span><br><span class="line"> *</span><br><span class="line"> *  模板参数：</span><br><span class="line"> *  sparse_table &lt;_Tp, _Compare&gt;</span><br><span class="line"> *    _Tp : 限定元素类型</span><br><span class="line"> *    _Compare : 比较函数</span><br><span class="line"> *</span><br><span class="line"> *  成员变量：</span><br><span class="line"> *  m_data : vector&lt; vector&lt;_Tp*&gt; &gt;</span><br><span class="line"> *    存储空间</span><br><span class="line"> *</span><br><span class="line"> *  m_comp : _Compare</span><br><span class="line"> *    比较函数实例</span><br><span class="line"> *</span><br><span class="line"> *  职能：</span><br><span class="line"> *  clear() : void</span><br><span class="line"> *    清空存储空间</span><br><span class="line"> *</span><br><span class="line"> *  元素访问：</span><br><span class="line"> *  query(size_t first, size_t last) const : _Tp</span><br><span class="line"> *    查询区间[first,last]的最值</span><br><span class="line"> *</span><br><span class="line"> *  修改符：</span><br><span class="line"> *  build(_Tp* p_data, size_t p_size) : void</span><br><span class="line"> *    以p_data为源数据地址, p_size为元素数量</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>sparse.h</span><a href="/code//CodeTemplate/Template_Release/sparse.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Sparse Table 稀疏表</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef SPARSE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SPARSE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SPARSE_H_VERSION 20150808L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;functional&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; msb(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">msb_build</span><span class="params">(<span class="built_in">std</span>::size_t p_data)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i=msb.size(),t=msb[i-<span class="number">1</span>];i&lt;=p_data;++i)</span><br><span class="line">      msb.push_back(t+=(i&amp;(i-<span class="number">1</span>)?<span class="number">0</span>:<span class="number">1</span>));</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Compare = <span class="built_in">std</span>::less&lt;_Tp&gt; &gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="keyword">sparse_t</span>able {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>;</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp*&gt; &gt; m_data; _Compare m_comp;</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">sparse_t</span>able(<span class="keyword">const</span> _Compare&amp; p_comp=_Compare()) : m_data(), m_comp(p_comp) { }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span><br><span class="line">    </span>{ m_data.clear(); }</span><br><span class="line">    _<span class="function">Tp <span class="title">query</span><span class="params">(size_t first, size_t last)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">      <span class="keyword">size_t</span> k=msb[last-first+<span class="number">1</span>]; last=last+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;k);</span><br><span class="line">      <span class="keyword">return</span> m_comp(*m_data[k][first],*m_data[k][last])?</span><br><span class="line">          *m_data[k][first]:*m_data[k][last];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(_Tp* p_data, size_t p_size)</span> </span>{</span><br><span class="line">      msb_build(p_size); m_data.clear(); m_data.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp*&gt;(p_size));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>;i&lt;p_size;++i) m_data[<span class="number">0</span>][i]=p_data+i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span> k=<span class="number">1</span>,d=<span class="number">2</span>,t=<span class="number">1</span>;d&lt;=p_size;++k,d&lt;&lt;=<span class="number">1</span>,t&lt;&lt;=<span class="number">1</span>) {</span><br><span class="line">        m_data.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp*&gt;(p_size-d+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span> i=<span class="number">0</span>,j=p_size+<span class="number">1</span>-d;i&lt;j;++i)</span><br><span class="line">          m_data[k][i]=m_comp(*m_data[k-<span class="number">1</span>][i],*m_data[k-<span class="number">1</span>][i+t]) ?</span><br><span class="line">              m_data[k-<span class="number">1</span>][i] : m_data[k-<span class="number">1</span>][i+t];</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* SPARSE_H_ */</span></span><br></pre></td></tr></table></figure>
<h2 id="数论">数论</h2><h3 id="高精度正整数">高精度正整数</h3><figure class="highlight cpp"><figcaption><span>bigint.h</span><a href="/code//CodeTemplate/Template_Release/bigint.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Big Positive Integer 高精度正整数</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef BIGINT_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BIGINT_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BIGNUM_H_VERSION 20150529L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> BIGINT_BIT     = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> BIGINT_BASE    = <span class="number">1e5</span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">int</span> _Sz&gt;</span><br><span class="line">  <span class="keyword">class</span> BigInt {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">int</span> m_size, m_data[_Sz];</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    BigInt() : m_size(<span class="number">1</span>) { <span class="built_in">memset</span>(m_data, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(m_data)); }</span><br><span class="line">    BigInt(<span class="keyword">const</span> <span class="keyword">int</span> b) : m_size(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">memset</span>(m_data, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(m_data)); m_data[<span class="number">0</span>] = b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BigInt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>{</span><br><span class="line">      <span class="keyword">char</span> *s = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(p), *t = s;</span><br><span class="line">      <span class="keyword">while</span> (*t) t++;</span><br><span class="line">      <span class="keyword">for</span> (m_data[m_size=<span class="number">0</span>] = <span class="number">0</span>; s &lt; t; ) {</span><br><span class="line">        m_data[m_size] = m_data[m_size] * <span class="number">10</span> + (*s++) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> ((t - s) % BIGINT_BIT == <span class="number">0</span>) m_data[++m_size] = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">std</span>::reverse(m_data, m_data + m_size);</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> BigInt&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      m_size = b.m_size;</span><br><span class="line">      <span class="built_in">memcpy</span>(m_data, b.m_data, m_size * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; i &lt; m_size || i &lt; b.m_size || c &gt; <span class="number">0</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (i &lt; m_size) c += m_data[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.m_size) c += b.m_data[i];</span><br><span class="line">        m_data[i] = c % BIGINT_BASE, c /= BIGINT_BASE;</span><br><span class="line">      }</span><br><span class="line">      m_size = i;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_size; i++) {</span><br><span class="line">        m_data[i] -= c;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.m_size) m_data[i] -= b.m_data[i];</span><br><span class="line">        <span class="keyword">if</span> (m_data[i] &lt; <span class="number">0</span>) c = <span class="number">1</span>, m_data[i] += BIGINT_BASE; <span class="keyword">else</span> c = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">if</span> (!b.m_size) <span class="keyword">return</span> *<span class="keyword">this</span> = BigInt();</span><br><span class="line">      BigInt r;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_size; i++) {</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.m_size || c &gt; <span class="number">0</span>; j++) {</span><br><span class="line">          <span class="keyword">if</span> (j &lt; b.m_size) c += (<span class="keyword">long</span> <span class="keyword">long</span>)m_data[i] * b.m_data[j];</span><br><span class="line">          <span class="keyword">if</span> (i + j &lt; r.m_size) c += r.m_data[i + j];</span><br><span class="line">          <span class="keyword">if</span> (i + j &gt;= r.m_size) r.m_data[r.m_size++] = c % BIGINT_BASE;</span><br><span class="line">          <span class="keyword">else</span> r.m_data[i + j] = c % BIGINT_BASE;</span><br><span class="line">          c /= BIGINT_BASE;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span> = r;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      BigInt r, c;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = m_size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        c = c * BIGINT_BASE + BigInt(m_data[i]);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = BIGINT_BASE - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (cmp(b * mid, c) &lt;= <span class="number">0</span>) left = mid; <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        r.m_data[i] = left, c = c - b * left;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">memcpy</span>(m_data, r.m_data, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * m_size);</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> %= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      BigInt r, c;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = m_size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        c = c * BIGINT_BASE + BigInt(m_data[i]);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = BIGINT_BASE - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (cmp(b * mid, c) &lt;= <span class="number">0</span>) left = mid; <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        r.m_data[i] = left, c = c - b * left;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span> = c;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) += b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) -= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) *= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> / (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) /= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> % (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) %= b; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) == <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) != <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &lt;= <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &gt;= <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &lt; <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &gt; <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::istream&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="built_in">std</span>::istream &amp;i, BigInt&amp; n)</span><br><span class="line">    { <span class="built_in">std</span>::<span class="built_in">string</span> s; i &gt;&gt; s; n = BigInt(s.c_str()); <span class="keyword">return</span> i; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="built_in">std</span>::ostream &amp;o, <span class="keyword">const</span> BigInt&amp; n) {</span><br><span class="line">      o &lt;&lt; (n.m_size ? n.m_data[n.m_size - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = n.m_size - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        o &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(BIGINT_BIT) &lt;&lt; n.m_data[i];</span><br><span class="line">      <span class="keyword">return</span> o &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">' '</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> BigInt&amp; a, <span class="keyword">const</span> BigInt&amp; b)</span> </span>{</span><br><span class="line">      <span class="keyword">if</span> (a.m_size ^ b.m_size) <span class="keyword">return</span> a.m_size &gt; b.m_size ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = a.m_size; i --&gt; <span class="number">0</span>;) <span class="keyword">if</span> (a.m_data[i] ^ b.m_data[i])</span><br><span class="line">        <span class="keyword">return</span> a.m_data[i] &gt; b.m_data[i] ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* BIGINT_H_ */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bigint_exam.cpp</span><a href="/code//CodeTemplate/Template_Release/bigint_exam.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *	Name : bigint_exam.cpp</span><br><span class="line"> *	Author : CHN.ChouUn</span><br><span class="line"> *	Date : 2015年5月5日 下午7:00:52</span><br><span class="line"> *	Copyright : www.fateud.com</span><br><span class="line"> *	Description : None</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bigint.h&gt;</span></span><br><span class="line"><span class="comment">//@ Program Begin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; _;</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    csl::BigInt&lt;<span class="number">300</span>&gt; n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span> - <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span> - <span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">if</span> (_) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="离散化">离散化</h3>
<figure class="highlight cpp"><figcaption><span>discrete.h</span><a href="/code//CodeTemplate/Template_Release/discrete.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Discretization 离散化</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef DISCRETE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> DISCRETE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> DISCRETE_H_VERSION 20150822L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stl_algo.h&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> discrete {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp  <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> _Tp* pointer;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">value_t</span>ype&gt; m_data;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="built_in">std</span>::sort(m_data.begin(), m_data.end());</span><br><span class="line">      m_data.resize(<span class="built_in">std</span>::unique(m_data.begin(), m_data.end()) - m_data.begin());</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span><br><span class="line">    </span>{ m_data.clear(); }</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> size()</span><br><span class="line">    { <span class="keyword">return</span> m_data.size(); }</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> query(<span class="keyword">value_t</span>ype __x)</span><br><span class="line">    { <span class="keyword">return</span> <span class="built_in">std</span>::lower_bound(m_data.begin(), m_data.end(), __x) - m_data.begin() + <span class="number">1</span>; }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(value_type __x)</span></span><br><span class="line">    </span>{ m_data.push_back(__x); }</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _InputIterator&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(_InputIterator first, _InputIterator last)</span></span><br><span class="line">    </span>{ m_data.insert(m_data.end(), first, last); }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* DISCRETE_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="欧拉筛法">欧拉筛法</h3><h3 id="快速数论变换">快速数论变换</h3><h2 id="图论">图论</h2><h3 id="强联通分量">强联通分量</h3><h3 id="2-SAT">2-SAT</h3><h3 id="网络流">网络流</h3><h2 id="字符串">字符串</h2><h3 id="马拉车算法">马拉车算法</h3>
<figure class="highlight cpp"><figcaption><span>manacher.h</span><a href="/code//CodeTemplate/Template_Release/manacher.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Manacher Algorithm 马拉车算法</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef MANACHER_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MANACHER_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MANACHER_H_VERSION 20150814L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp = <span class="keyword">char</span>, _Tp _FlagS = <span class="string">'@'</span>,</span><br><span class="line">      _Tp _FlagD = <span class="string">'#'</span>, _Tp _FlagT = <span class="string">'\0'</span>&gt;</span><br><span class="line">  <span class="keyword">class</span> manacher {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">typedef</span> _Tp         <span class="keyword">key_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>         <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> key_type* __src)</span></span><br><span class="line">    </span>{ generate(__src); calculate(); }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">value_t</span>ype __res = <span class="keyword">value_t</span>ype();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; m_size; ++i)</span><br><span class="line">        <span class="keyword">if</span> (m_data[i] &gt; __res) __res = m_data[i];</span><br><span class="line">      <span class="keyword">return</span> __res - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">at</span><span class="params">(size_type __x)</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> __x + <span class="number">2</span> &lt; m_size ? <span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](__x) : <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">value_t</span>ype <span class="keyword">operator</span> [] (<span class="keyword">size_t</span>ype __x)</span><br><span class="line">    { <span class="keyword">return</span> m_data[__x + <span class="number">2</span>] - <span class="number">1</span>; }</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">key_t</span>ype&gt;   m_dest;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">value_t</span>ype&gt; m_data;</span><br><span class="line">    <span class="keyword">size_t</span>ype               m_size;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">const</span> key_type* __src)</span> </span>{</span><br><span class="line">      m_dest.clear();</span><br><span class="line">      m_dest.push_back(_FlagS), m_dest.push_back(_FlagD);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; __src[i] != _FlagT; i++)</span><br><span class="line">        m_dest.push_back(__src[i]), m_dest.push_back(_FlagD);</span><br><span class="line">      m_dest.push_back(_FlagT); m_size = m_dest.size();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>{</span><br><span class="line">      m_data.resize(m_size);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; m_size; ++i) {</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> k = (p &gt; i) ? <span class="built_in">std</span>::min(m_data[<span class="number">2</span>*j-i], p-i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m_dest[i+k] == m_dest[i-k]) ++k;</span><br><span class="line">        <span class="keyword">if</span> (k + i &gt; p) p = k + i, j = i; m_data[i] = k;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* MANACHER_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="AC自动机">AC自动机</h3><h3 id="后缀自动机">后缀自动机</h3><h2 id="其他">其他</h2>]]></content>
    <summary type="html">
    <![CDATA[<p>不管你信不信, 反正这个页面是炸了.<br>如果不及时补上, 会产生一片虚空, 继而演变成黑洞.<br>然后像抽水马桶一样, 把整个博客吸进去!</p>]]>
    
    </summary>
    
      <category term="bestcoder" scheme="http://fateud.com/tags/bestcoder/"/>
    
      <category term="codeforces" scheme="http://fateud.com/tags/codeforces/"/>
    
      <category term="template" scheme="http://fateud.com/tags/template/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
</feed>