<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Fate / Unlimited Darkness]]></title>
  <subtitle><![CDATA[命運 / 無盡長夜]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://fateud.com//"/>
  <updated>2015-12-20T16:11:47.898Z</updated>
  <id>http://fateud.com//</id>
  
  <author>
    <name><![CDATA[ChouUn]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ZUCC2015新生选拔赛]]></title>
    <link href="http://fateud.com/zucc2015-newtrials/"/>
    <id>http://fateud.com/zucc2015-newtrials/</id>
    <published>2015-12-20T14:44:50.000Z</published>
    <updated>2015-12-20T16:11:47.898Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>考虑到一本招生，略微提高难度；预计可做题4-5道，然而没到预期。</p>
<a id="more"></a>
<h2 id="A-_五则计算器">A. 五则计算器</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1606" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1606</a></p>
<p>解题报告：水题。<br>分支结构的应用，做不出建议转专业。</p>
<h2 id="B-_五则计算器">B. 五则计算器</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1607" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1607</a></p>
<p>解题报告：水题。<br>gets容易受到系统环境影响，建议使用scanf输入。<br>本来查询次数 $q$ 较大，需要预先处理出每个字符的总数，再处理询问。</p>
<h2 id="C-_土鸡拜火教">C. 土鸡拜火教</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1608" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1608</a></p>
<p>解题报告：逻辑题。数学归纳法。<br>输出 $n - m + 1$ 即可。<br>证明部分详见<a href="https://www.zhihu.com/question/21262930" target="_blank" rel="external">一个关于数学归纳法的悖论问题：到底是第 N 天有 N 个红眼睛自杀，还是什么都不会发生？ - 知乎</a></p>
<h2 id="D-_汪洋的绯闻">D. 汪洋的绯闻</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1609" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1609</a></p>
<p>解题报告：数学题。<br>递推公式为 $f_{n} = f_{n-1} + (n-1)f_{n-2}$。<br>第 $n$ 个人如果跟外人脱单，剩下 $n-1$ 个人有 $f_{n-1}$ 种情况；<br>如果跟 $n-1$ 里的其中一个人脱单，有 $n-1$ 种选择，而剩下 $n-2$ 个人有 $f_{n-2}$ 种情况，根据乘法原理相乘即可。</p>
<h2 id="E-_土鸡摩天楼">E. 土鸡摩天楼</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1610" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1610</a></p>
<p>解题报告：模拟题。<br>先用数组记录零到九的 $LED$ 灯亮灭情况，然后用数组记录两种数字间的差异多大。<br>这样预先处理好，对于输入的 $M$ 每一位，分开来考虑差异范围内数字的情况一共几种，根据乘法原理相乘即可。</p>
<h2 id="F-_检索联系人">F. 检索联系人</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1611" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1611</a></p>
<p>解题报告：模拟题。字符串处理。<br>主要是处理部分复杂。<br>需要注意的是，元音只有 $a, e, o, u, i, v$，声母包括 $zh, ch, sh$。<br>对于一个元音，如果前一个也是元音，则忽略；否则前面必为声母，声母可能一位或两位。<br>先把所有缩写预先处理好，每次查询只要用strstr函数比较即可。</p>
<h2 id="G-_荣荣的爱情">G. 荣荣的爱情</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1612" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1612</a></p>
<p>解题报告：逻辑题。小学奥数题。<br>对方是知道月份的：</p>
<ul>
<li>如果该月份内所有日期，在别的月份内都未出现过，则你必然知道答案</li>
<li>如果该月份内所有日期，在别的月份内都出现过，则你必然不知道答案</li>
<li>如果该月份内所有日期，在别的月份内出现过与未出现过都有，则你不一定知道答案</li>
</ul>
<p>显然第一第三两种情况，是话语 $2$；第二种情况，是话语 $1$。<br>所有我们枚举出生月份，加以判断即可。</p>
<h2 id="H-_奏心的土鸡">H. 奏心的土鸡</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1613" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1613</a></p>
<p>解题报告：数学题。<br>用 $f_n$ 表示土鸡数量，用 $s_n$ 表示总记录数。<br>根据题意得出 $f_n = f_{n-1} + f_{n-2}$，对其求和计算 $s_n$，很容易发现 $s_n = f_{n+2} - 1$。<br>因为题目给了你 $f_n, s_n$，直接得到 $s_{n-1}, s_{n-2}$，整个数列昭然若揭。<br>而且为了简化问题，题目给出数据 $n - k \leq 10$，所以循环十次内就能求出答案。<br>出题人把 $n$ 的实际值限定在 $32767$ 内，这样还是有人强行用递归导致 $TLE$。</p>
<h2 id="I-_小气的楠楠">I. 小气的楠楠</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1614" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1614</a></p>
<p>解题报告：贪心题。谷歌面试出过。<br>先将两个数列排序，然后进行贪心。<br>两两对应后，有三种情况：同负，异号，同正，即：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A: - + +&#10;B: - - +</span><br></pre></td></tr></table></figure></p>
<p>对于同号的两种，通过比较 $A_l B_l$ 与 $A_r B_r$ 的大小，决定取哪一个。<br>对于异号的部分，假如还需要取 $k$ 对，取最小的正数与最大的负数，一一对应相乘即可，切勿交叉相乘。<br>下面是组容易错误的数据，建议替换 $M$ 来理解一下本质：<br>5 3或4<br>-1000 1 10 100 1000<br>-1000 -100 -10 -1 1000</p>
<h2 id="J-_楠楠与瓜瓜">J. 楠楠与瓜瓜</h2><p><a href="http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1615" target="_blank" rel="external">http://acm.zucc.edu.cn/JudgeOnline/problem.php?id=1615</a></p>
<p>解题报告：构造题。多校2015第九场。<br>通过相减得出愉悦值之差（记得取模），然后问题转化成寻找相同的两项，这样能很方便构造出相反的策略。<br>每次找出愉悦值最大的物品合并，愉悦值相减作为新物品的愉悦值。<br>这样对于 $n$ 个物品，愉悦值最大为 $m$；<br>第一轮，$n/2$ 次操作之后，愉悦值最大为 $\frac{2m}{n}$；<br>第二轮，$n/4$ 次操作之后，愉悦值最大为 $\frac{8m}{n^2}$；<br>第三轮，$n/8$ 次操作之后，愉悦值最大为 $\frac{64m}{n^3}$；<br>三次之后愉悦值最大只有6了，显然能出解，所以最后倒着 $dfs$ 把分配方法解出来即可。<br>窝不会告诉你们这题有彩蛋。</p>
<h2 id="后记">后记</h2><p>刷题很重要，思考不能少；只刷不思考，药丸是吃枣。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引言">引言</h2><p>考虑到一本招生，略微提高难度；预计可做题4-5道，然而没到预期。</p>]]>
    
    </summary>
    
      <category term="ZUCC" scheme="http://fateud.com/tags/ZUCC/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[殘龍的數學筆記]]></title>
    <link href="http://fateud.com/note-math/"/>
    <id>http://fateud.com/note-math/</id>
    <published>2015-12-20T01:44:33.783Z</published>
    <updated>2015-12-20T01:44:33.783Z</updated>
    <content type="html"><![CDATA[<p>老實說了吧，這篇東西是個大坑，反正我根本沒準備填。<br>你們如果有靠譜的資料，可以貼在下面供我參考，謝謝。</p>
<a id="more"></a>
<h2 id="數論">數論</h2><h3 id="最大公約數">最大公約數</h3><p><a href="https://en.wikipedia.org/wiki/Greatest_common_divisor" target="_blank" rel="external">https://en.wikipedia.org/wiki/Greatest_common_divisor</a></p>
<h4 id="歐幾里德算法">歐幾里德算法</h4><p><a href="https://en.wikipedia.org/wiki/Euclidean_algorithm" target="_blank" rel="external">https://en.wikipedia.org/wiki/Euclidean_algorithm</a></p>
<p>$ \begin{eqnarray} gcd(a,b) = \begin{cases}<br>a,                  &amp; b = 0 \cr<br>gcd(b, a \bmod b), &amp; otherwise<br>\end{cases} \end{eqnarray} $</p>
<p>令 $ r = gcd(a,b) $<br>則 $ r \mid a, r \mid b $<br>故 $ r \mid (a - b) $<br>引 $ r \mid (a - kb)<br>\Rightarrow r \mid (a - \lfloor \frac{a}{b} \rfloor b)<br>\Rightarrow r \mid (a \bmod b) $<br>故 $ gcd(a,b) \equiv gcd(b, a \bmod b) $</p>
<h4 id="擴展歐幾里德算法">擴展歐幾里德算法</h4><p><a href="https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm" target="_blank" rel="external">https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm</a></p>
<p>若 $ a, b, gcd(a,b) = 1 $，求 $ax + by = 1$</p>
<h3 id="乘法逆元">乘法逆元</h3><p><a href="https://en.wikipedia.org/wiki/Multiplicative_inverse" target="_blank" rel="external">https://en.wikipedia.org/wiki/Multiplicative_inverse</a></p>
<h4 id="费马小定理">费马小定理</h4><p><a href="https://en.wikipedia.org/wiki/Fermat%27s_little_theorem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Fermat%27s_little_theorem</a></p>
<p>若 $p$ 是素數，$a$ 是正整數，則：$a^p \equiv a \pmod{p}$。<br>若 $p$ 是素數，$a$ 是正整數且不能被 $p$ 整除，則：$a^{p-1} \equiv 1 \pmod{p}$。</p>
<h4 id="歐拉定理">歐拉定理</h4><p><a href="https://en.wikipedia.org/wiki/Euler%27s_theorem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Euler%27s_theorem</a></p>
<p>若 $gcd(p, a)$ = 1，則：$a^{\phi(p)} \equiv 1 \pmod{p}$。$\phi(n)$ 是<a href="#歐拉函數">歐拉函數</a>。</p>
<h4 id="逆元定義">逆元定義</h4><p>若 $ax \equiv 1 \pmod{p}$，則稱 $x$ 爲 $a$ 模 $m$ 的逆元。<br>構造 $ax + py = 1$，則x可以用擴展歐幾里德算法求得；<br>若 $p$ 是質數，$a^{p-2} \equiv x \pmod{p}$。</p>
<p>接下來講實踐中的三個小trick。</p>
<h4 id="編程技巧">編程技巧</h4><p>Q：教練，我不想求逆元！<br>A：可以通過以下性質來避開。</p>
<p>若 $b | a$，則：$\frac{a}{b} \bmod p = \frac{a \bmod pb}{b}$</p>
<p>證明：<br>$ \begin{align*}<br> &amp; \because \frac{a}{b} \equiv y \pmod{p} \\<br> &amp; \Rightarrow \frac{a}{b} = px + y \\<br> &amp; \Rightarrow a = pbx + by \\<br> &amp; \Rightarrow a \bmod pb = by \\<br> &amp; \Rightarrow \frac{a \bmod pb}{b} = y \\<br> &amp; \therefore \frac{a}{b} \bmod p = \frac{a \bmod pb}{b} \\<br>\end{align*} $</p>
<p>Q：如何對 $1!$ 到 $p-1!$ 的逆元高效打表？<br>A：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; p; ++i) fac[i] = fac[i-<span class="number">1</span>] * i;</span><br><span class="line">inv[p-<span class="number">1</span>] = getinv(fac[p-<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; p; ++i) inv[i-<span class="number">1</span>] = inv[i] * i;</span><br></pre></td></tr></table></figure></p>
<p>Q：那 $1$ 到 $p-1$ 不能這樣玩啊！<br>A：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; p; ++i) inv[i] = (p - p / i) * inv[p % i] % p;</span><br></pre></td></tr></table></figure></p>
<p>證明：<br>對於 $x$ 的逆元 $inv(x)$，滿足 $ x \cdot inv(x) \equiv 1 \pmod{p}$<br>由於 $p = ax + b$，令 $a = \lfloor \frac{p}{x} \rfloor, b = p \bmod x$<br>所以 $x = (p-b) / a = -b / a \pmod{p}$，$inv(x) = -a/b = -a \cdot inv(b) \pmod{p}$</p>
<h3 id="中國剩餘定理">中國剩餘定理</h3><p><a href="https://en.wikipedia.org/wiki/Chinese_remainder_theorem" target="_blank" rel="external">https://en.wikipedia.org/wiki/Chinese_remainder_theorem</a></p>
<p>已知 $ M = \prod m_{i} $，$ m_{i} \text{ is a prime number} $，$ S \equiv a_{i} \pmod{m_{i}} $，求 $ S $</p>
<p>先看 $ S \equiv a_{i} \pmod{m_{i}} $ 可以轉化爲 $ S + m_{i}y = a_{i} $，這個公式仍然不利於求解<br>聯想到 $ ax + by = gcd(a, b) $ 的形式，可以用 <a href="#擴展歐幾里德算法">擴展歐幾里德</a> 搞一搞<br>不妨令 $ M_{i} = \frac{ M }{ m_{i} } $，構造 $ M_{i}x + m_{i}y = gcd(M_{i},  m_{i}) = 1 $<br>這樣搞的好處都有啥？ 誰說對了csy就給他（非金坷拉<br>化成 $ M_{i}x \equiv 1 \pmod{m_{i}} $，$ \forall j \neq i, M_{i}x \equiv 0 \pmod{m_{j}} $<br>顯然 $ x $ 是 $ M_{i} $ 關於 $ m_{i} $ 的逆元，發現並不一定要用 $ exgcd $，我們記爲 $ x_{i} $<br>那麼 $ a_{i}M_{i}x_{i} \equiv a_{i} \pmod{m_{i}} $，$ S \equiv \sum a_{i}M_{i}x_{i} \pmod{M}$。<br>本質即求出對於 $m_{i}$ 相互獨立的各項 $ a_{i}M_{i}x_{i}$，然後對其進行合併即可。</p>
<h3 id="容斥原理">容斥原理</h3><p><a href="https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle" target="_blank" rel="external">https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle</a></p>
<p>這部分內容姑且放在反演的前面，給讀者壓壓驚。<br>私以爲，這是組很美妙的公式，如同陰陽兩魚相互糾纏。</p>
<p>定義：<br>$ g(A) = \sum\limits_{S : S \subseteq A} f(S) $<br>$ f(A) = \sum\limits_{S : S \subseteq A} (-1)^{|A| - |S|} g(S) $</p>
<p>證明：<br>$ \begin{align*}<br> &amp; \because g(A) = \sum\limits_{S : S \subseteq A} f(S) \\<br> &amp; \therefore \sum\limits_{S : S \subseteq A} (-1)^{|A| - |S|} g(S) \\<br> &amp; = \sum\limits_{S : S \subseteq A} (-1)^{|A| - |S|} \sum\limits_{T : T \subseteq S} f(T) \\<br> &amp; = \sum\limits_{T : T \subseteq A} f(T) \sum\limits_{R : R \subseteq A - T} (-1)^{|R|} \\<br> &amp; = \sum\limits_{T : T \subseteq A} f(T) \sum\limits_{k = 0}^{|A - T|} \binom{|A - T|}{k} (-1)^k \\<br> &amp; = \sum\limits_{T : T \subsetneqq A} f(T) (1 + (-1))^{|A - T|} + \sum\limits_{T : T \subseteqq A} f(T) (-1)^0 \\<br> &amp; = 0 + f(A) = f(A) \\<br>\end{align*} $</p>
<h3 id="積性函數">積性函數</h3><p><a href="https://en.wikipedia.org/wiki/Multiplicative_function" target="_blank" rel="external">https://en.wikipedia.org/wiki/Multiplicative_function</a></p>
<p>定義：<br>$ f(1) = 1 $ 且 $ \forall gcd(a,b) = 1, f(ab) = f(a) f(b) $<br>當 $ \forall a,b $ 都滿足 $ f(ab) = f(a) f(b) $ 時，稱爲<a href="https://en.wikipedia.org/wiki/Completely_multiplicative_function" target="_blank" rel="external">完全積性函數</a>。</p>
<ul>
<li>$ Id_{k}(n) $ : $ Id_{k}(n) = n^k $ 完全積性<ul>
<li>$k = 0$ 時，有 $ 1(n) = 1 $</li>
<li>$k = 1$ 時，有 $ Id(n) = n $</li>
</ul>
</li>
<li>$ \epsilon(n) $ : $ \epsilon(n) = \begin{cases} 1, &amp; n = 1 \cr 0, &amp; \text{otherwise} \end{cases} $</li>
</ul>
<h4 id="狄利克雷卷積">狄利克雷卷積</h4><p><a href="https://en.wikipedia.org/wiki/Dirichlet_convolution" target="_blank" rel="external">https://en.wikipedia.org/wiki/Dirichlet_convolution</a></p>
<p>定義：<br>$ (f * g)(n) = \sum\limits_{d|n} f(d)g(\frac{n}{d}) $</p>
<ul>
<li>交換律：$ f * g = g * f $</li>
<li>結合律：$ (f * g) * h = f * (g * h) $</li>
<li>分配率：$ f * (g * h) = f * g + f * h $</li>
<li>$ f = f * \epsilon = \epsilon * f $</li>
<li>$ f * f^{-1} = \epsilon $</li>
<li>$ f^{-1}(n) = \frac{-1}{f(1)}\sum\limits_{d|n,n \neq d} f(\frac{n}{d}) f^{-1}(d) $</li>
</ul>
<h4 id="歐拉函數">歐拉函數</h4><p><a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function" target="_blank" rel="external">https://en.wikipedia.org/wiki/Euler%27s_totient_function</a></p>
<p>一般用 $ phi(n) $ 或者 $ \phi(n) $ 表示，是個不完全積性函數。</p>
<p>若 $ n = \prod\limits_{i = 1}^{m} p_i^{k_i} $，<br>則 $ \phi(n) = n \prod\limits_{i = 1}^{m} (1 - \frac{1}{p_i}) $</p>
<h4 id="莫比烏斯函數">莫比烏斯函數</h4><p><a href="https://en.wikipedia.org/wiki/M%C3%B6bius_function" target="_blank" rel="external">https://en.wikipedia.org/wiki/M%C3%B6bius_function</a></p>
<p>一般用 $ mu(n) $ 或者 $ \mu(n) $ 表示，是個不完全積性函數。</p>
<p>若 $ n = \prod\limits_{i = 1}^{m} p_i^{k_i} $，<br>則 $ \mu(n) = \begin{cases}<br>1,      &amp; n = 1 \cr<br>0,      &amp; \exists k_i &gt; 1 \cr<br>(-1)^m, &amp; \text{otherwise}<br>\end{cases} $</p>
<h3 id="反演公式">反演公式</h3><h4 id="莫比烏斯反演">莫比烏斯反演</h4><p><a href="https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula" target="_blank" rel="external">https://en.wikipedia.org/wiki/M%C3%B6bius_inversion_formula</a></p>
<p>$ \sum\limits_{d|n} \phi(d) = Id(n) \Rightarrow \phi * 1 = Id $<br>$ \sum\limits_{d|n} \mu(d) = \epsilon(n) \Rightarrow \mu * 1 = \epsilon $</p>
<p>$ \begin{align*}<br> &amp; \because \mu * 1 = \epsilon \\<br> &amp; \therefore \phi(n) \\<br> &amp; = \sum\limits_{i = 1}^{n} \epsilon(gcd(i,n)) \\<br> &amp; = \sum\limits_{i = 1}^{n} \sum\limits_{d | gcd(i,n)} \mu(d) \\<br> &amp; = \sum\limits_{i = 1}^{n} \sum\limits_{d | i \wedge d | n} \mu(d) \\<br> &amp; = \sum\limits_{d | n} \mu(d) \frac{n}{d} \\<br> &amp; = (\mu * Id)(n)<br>\end{align*} $</p>
<p>按這思路，顯然得證 $ \sum\limits_{i = 1}^{n} i \cdot \epsilon(gcd(i,n)) = \frac{n}{2} (\mu * 1 + \mu * Id)(n) = \frac{n}{2} (\epsilon + \phi)(n) $，即[1,n]中與n互質的數之和。<br>[2015.12.03] 顺便补充下平方和的结论： $ \sum\limits_{i = 1}^{n} i^2 \cdot \epsilon(gcd(i,n)) = \frac{n^2}{3} \phi(n) + \frac{n^2}{2} \epsilon(n) + \frac{n}{6} \sum\limits_{d | n} \mu(d) d $</p>
<p>如 $ \phi * 1 = Id $，$ \mu * Id = \phi $；<br>又 $ \epsilon * 1 = 1 $，$ \mu * 1 = \epsilon $；<br>顯然能得出莫比烏斯反演公式 $ f * 1 = F $，$ \mu * F = f $<br>亦可以寫作：<br>$ F(n) = \sum\limits_{d | n} f(d) $<br>$ f(n) = \sum\limits_{d | n} \mu(\frac{n}{d}) F(d) $</p>
<p>證明：<br>$ \begin{align*}<br> &amp; \because f * 1 = F \\<br> &amp; \therefore (\mu * F)(n) \\<br> &amp; = \sum\limits_{d | n} \mu(d) F(\frac{n}{d}) \\<br> &amp; = \sum\limits_{d | n} \mu(d) \sum\limits_{d’ | \frac{n}{d}} f(d’) \\<br> &amp; = \sum\limits_{d’ | n} f(d’) \sum\limits_{d | \frac{n}{d’}} \mu(d) \\<br> &amp; = \sum\limits_{d’ | n} f(d’) \epsilon(frac{n}{d’}) \\<br> &amp; = f(n)<br>\end{align*} $</p>
<h4 id="二項式反演">二項式反演</h4><p>對於 $ 0 ^ n $ 的二項式展開：<br>$ \sum\limits_{i = 0}^{n} (-1)^i \binom{n}{i} = (1 + (-1))^{n} $<br>然後是個組合數學的小trick：<br>$ \binom{n}{i} \binom{i}{k} = \frac{n!}{(n-i)!} \frac{1}{k!(i-k)!} = \frac{n!}{k!(n-k)!} \frac{(n-k)!}{(n-i)!(i-k)!} = \binom{n}{k} \binom{n-k}{i-k} $</p>
<p>既然都這樣惹，再隨便推導下二項式的反演吧。<br>$ \begin{align*}<br> &amp; \because F(n) = \sum\limits_{i = 0}^{n} \binom{n}{k} f(i) \\<br> &amp; \therefore \sum\limits_{i = 0}^{n} (-1)^{n-i} \binom{n}{i} F(i) \\<br> &amp; = \sum\limits_{i = 0}^{n} (-1)^{n-i} \binom{n}{i} \sum\limits_{k = 0}^{i} \binom{i}{k} f(k) \\<br> &amp; = \sum\limits_{k = 0}^{n} f(k) \sum\limits_{i = k}^{n} (-1)^{n-i} \binom{n}{i} \binom{i}{k} \\<br> &amp; = \sum\limits_{k = 0}^{n} \binom{n}{k} f(k) \sum\limits_{i = k}^{n} (-1)^{n-i} \binom{n-k}{n-i} \\<br> &amp; = \sum\limits_{k = 0}^{n} \binom{n}{k} f(k) (1 + (-1))^{n - k} \\<br> &amp; = 0 + f(n) = f(n)<br>\end{align*} $</p>
<h2 id="遞推">遞推</h2><h3 id="a[n]_=_a[n-1]^2_-_2">a[n] = a[n-1]^2 - 2</h3><p>$ a_{n} = a_{n-1} ^ 2 - 2 $<br>令 $ a_{0} = x + \frac{1}{x} $<br>則 $ a_{n} = x ^ {2^n} + \frac{1}{x^{2^n}} $</p>
<h3 id="a[n]_=_p⋅a[n-1]_+_q⋅a[n-2]">a[n] = p⋅a[n-1] + q⋅a[n-2]</h3><p>$ a_{n} = p⋅a_{n-1} + q⋅a_{n-2} $<br>特徵方程 $ x ^ 2 = p x + q $，求得 $ \alpha \beta $。<br>若 $ \alpha \neq \beta $，則 $ a_{n} = c_{1} \alpha ^ n + c_{2} \beta ^ n $；<br>若 $ \alpha = \beta $，則 $ a_{n} = (c_{1} + n c_{2}) \alpha ^ n $。<br>求得 $ c_{1}, c_{2} $，求得 $ p, q $，即求得 $ a_{n} $。</p>
<h3 id="(a+√b)^n">(a+√b)^n</h3><p>$ S_{n} = \lceil (a + \sqrt{b}) ^ {n} \rceil $<br>構造 $ (a + \sqrt{b}) ^ {n} + (a - \sqrt{b}) ^ {n} $<br>$ \because 0 &lt; a - \sqrt{b} &lt; 1 $，<br>且二項式展開、合併同類項後，只可能有 $ \sqrt{b} ^ {2i} = b ^ i $<br>$ \therefore S_{n} = (a + \sqrt{b}) ^ {n} + (a - \sqrt{b}) ^ {n} $<br>$ S_{n} ⋅ ((a + \sqrt{b}) + (a - \sqrt{b})) $<br>$ =<br>(a + \sqrt{b}) ^ {n+1} +<br>(a - \sqrt{b}) ^ {n+1} +<br>(a + \sqrt{b}) (a - \sqrt{b}) ((a + \sqrt{b}) ^ {n-1} + (a - \sqrt{b}) ^ {n-1}) $<br>$ = S_{n+1} + (a ^ 2 - b) S_{n-1} $<br>移項得 $ S_{n+1} = 2a S_{n} + (b - a ^ 2) S_{n-1} $</p>
<p>也可以直接構造上一節 “a[n] = p⋅a[n-1] + q⋅a[n-2]” 的形式，<br>特徵根 $ a - \sqrt{b}, a + \sqrt{b} $，$ p = 2a, q = b - a ^ 2 $<br>輕鬆得 $ S_{n+1} = 2a S_{n} + (b - a ^ 2) S_{n-1} $</p>
<h2 id="浮點">浮點</h2><h3 id="卡翰求和算法">卡翰求和算法</h3><p><a href="https://en.wikipedia.org/wiki/Kahan_summation_algorithm" target="_blank" rel="external">https://en.wikipedia.org/wiki/Kahan_summation_algorithm</a></p>
<p>對浮點序列求 $ \sum a_i $ 減小過程中的誤差</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function <span class="function"><span class="title">KahanSum</span><span class="params">(input)</span></span></span><br><span class="line">  <span class="tag">var</span> sum = <span class="number">0.0</span></span><br><span class="line">  <span class="tag">var</span> c = <span class="number">0.0</span></span><br><span class="line">  <span class="keyword">for</span> <span class="tag">i</span> = <span class="number">1</span> to <span class="tag">input</span><span class="class">.length</span> do</span><br><span class="line">    <span class="tag">var</span> y = <span class="tag">input</span>[i] - c</span><br><span class="line">    <span class="tag">var</span> t = sum + y</span><br><span class="line">    c = (t - sum) - y</span><br><span class="line">    sum = t</span><br><span class="line">  return sum</span><br></pre></td></tr></table></figure>
<h3 id="牛頓迭代法">牛頓迭代法</h3><p>牛頓迭代法（Newton Method）：<a href="https://en.wikipedia.org/wiki/Newton%27s_method" target="_blank" rel="external">https://en.wikipedia.org/wiki/Newton%27s_method</a></p>
<p>對 $ \sqrt{S} $ 構造 $ f(x) = x ^ 2 - S = 0 $<br>有 $ x_{n+1}<br>= x_{n} - \frac{ f(x_{n}) }{ f’(x_{n}) }<br>= x_{n} - \frac{ x_{n}^{2} - S }{ 2x_{n} }<br>= \frac{1}{2} (x_{n} + \frac{S}{x_{n}}) $</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>老實說了吧，這篇東西是個大坑，反正我根本沒準備填。<br>你們如果有靠譜的資料，可以貼在下面供我參考，謝謝。</p>]]>
    
    </summary>
    
      <category term="數論" scheme="http://fateud.com/tags/%E6%95%B8%E8%AB%96/"/>
    
      <category term="遞推" scheme="http://fateud.com/tags/%E9%81%9E%E6%8E%A8/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[架設一個L2TP協議的簡易vpn]]></title>
    <link href="http://fateud.com/note-vpn/"/>
    <id>http://fateud.com/note-vpn/</id>
    <published>2015-12-20T01:44:17.215Z</published>
    <updated>2015-12-20T01:44:17.215Z</updated>
    <content type="html"><![CDATA[<blockquote><p>|9.21| 战五猹网络部，区区断网岂能拦得住我，求你把L2TP之类的穿透给封印了，不然我还是强行能用VPN啊。</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e788132ef9fe55ab490600.1" target="_blank" rel="external">user.qzone.qq.com/327739187/mood/33e788132ef9fe55ab490600.1</a></cite></footer></blockquote>
<a id="more"></a>
<h2 id="起因">起因</h2><p>又值開學季，慘無人道的十一點斷網不速而來，最近準備區域賽、急需大量資料的我，無法接受慘痛的現實。<br>轉念一想，實驗室是通宵供電供網的，然而天天睡實驗室對身體不利，所以我決定通過代理來解決上網問題。</p>
<h2 id="架設">架設</h2><p>我先回憶了上個學期架設vpn的過程，進行了同樣的步驟。</p>
<p>在作爲服務器的電腦上，新建一個傳入連接。<br>右鍵屬性，“用戶”選項卡，除去該項的勾“要求所有用戶對其密碼和數據的安全進行保護”。</p>
<p>在作爲客戶端的電腦上，設置新的連接，連接到工作區，使用我的Internet連接，Internet地址填服務器的IP。<br>右鍵屬性，“安全”選項卡，VPN類型使用L2TP，數據加密可選，允許使用這些協議（PAP、CHAP、MS-CHAP v2）。</p>
<p>連接成功，然後血崩。喂，根上學期的劇本不一樣啊。我開始思考，L2TP能連，然而無法上網。</p>
<h2 id="路由">路由</h2><p>// 警告：這一部分已經驗證非關鍵作用，請無視</p>
<p>後來我想起，自從上次斷電以後，實驗室的路由就怪怪的，難道禁止了L2TP穿透？<br>於是我強行黑進了實驗室的路由，去尋找問題的緣由。</p>
<p>在“轉發規則-虛擬服務器”（也就是很多地方所說的映射關係），我發現了一片空白，腦中也一片空白。<br>隨便一搜，找到老司機所發佈的長文，裏面有如下一段。我把死馬當活馬醫，添加了進去。</p>
<ol>
<li>TCP 1723 端口：PPTP協議連接端口</li>
<li>UDP 1701 端口：L2TP協議連接端口</li>
<li>UDP 500 端口：Internet密鑰交換(IKE) - 用戶數據報協議</li>
<li>UDP 4500 端口：IPsec NAT-T</li>
<li>TCP/UDP 50 端口：封裝式安全協議(ESP) - Internet協議(IP)協議</li>
</ol>
<p>然後嘗試著訪問百度，哇哦！還是血崩…</p>
<h2 id="尾聲">尾聲</h2><p>我原以爲要跟上次一樣不了了之了，結果chrome虎軀一震，竟然連上了，真是xnmbyy！<br>測試了一下Google，秒連，說明並不是錯覺。也懶得糾結這麼多了，能上就好。</p>
<h2 id="UPD1">UPD1</h2><p>聽說11月以後，通過撥號能上內網，但是子網掩碼默認是四個255，導致我無法ping通機房。<br>我用netsh命令改成了255.255.255.0，還是可以連vpn的，靜候11點斷電斷網，保佑。</p>
<h2 id="UPD2">UPD2</h2><p>然後到了11點這一刻，告訴我網線已被拔出，日媽。<br>本來就能直接連內網，所以你弄個PPPOE有瘠薄用？<br>弄得斷網以後能上內網一樣，不知道網絡部是不是用菊花思考的。<br>衷心祝願你們後裔的消化系統是一個單向棧。</p>
<h2 id="UPD3">UPD3</h2><p>vpn在連接上有偏差，我是要負責的！<br>我沒有說vpn使用者要欽定，沒有任何這個意思。<br>但是你問——一定要問我——vpn密碼是多少，我可能回答你說“無可奉告”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote><p>|9.21| 战五猹网络部，区区断网岂能拦得住我，求你把L2TP之类的穿透给封印了，不然我还是强行能用VPN啊。</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e788132ef9fe55ab490600.1">user.qzone.qq.com/327739187/mood/33e788132ef9fe55ab490600.1</a></cite></footer></blockquote>]]>
    
    </summary>
    
      <category term="L2TP" scheme="http://fateud.com/tags/L2TP/"/>
    
      <category term="vpn" scheme="http://fateud.com/tags/vpn/"/>
    
      <category term="網絡" scheme="http://fateud.com/tags/%E7%B6%B2%E7%B5%A1/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每日一摘]]></title>
    <link href="http://fateud.com/note-excerpt/"/>
    <id>http://fateud.com/note-excerpt/</id>
    <published>2015-12-18T17:06:58.415Z</published>
    <updated>2015-12-18T17:06:58.415Z</updated>
    <content type="html"><![CDATA[<p>20151210<br>皇權的合法性不是一個可以拿來討論的東西。</p>
<p>20151204</p>
<p>你站在道德高地就不冷嗎<br>Does it ever get cold on the moral high ground? —— from Downton Abbey</p>
<a id="more"></a>
<p>20151122</p>
<p>在中國，任何超脫飛揚的思想都會砰然墜地的，現實的引力太沉重了。</p>
<p>20151027</p>
<p>海不擇細流，故能成其大；山不拒細壤，方能就其高。</p>
<p>20151025</p>
<p>水深則流緩，人貴則語遲。</p>
<p>20151012</p>
<p>人吃土一輩，土吃人一回。</p>
<p>20151010</p>
<p>三毛：刻意去找的東西，往往是找不到的。天下萬物的來和去，都有他的時間。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>20151210<br>皇權的合法性不是一個可以拿來討論的東西。</p>
<p>20151204</p>
<p>你站在道德高地就不冷嗎<br>Does it ever get cold on the moral high ground? —— from Downton Abbey</p>]]>
    
    </summary>
    
      <category term="摘錄" scheme="http://fateud.com/tags/%E6%91%98%E9%8C%84/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <link href="http://fateud.com/note-hexo/"/>
    <id>http://fateud.com/note-hexo/</id>
    <published>2015-12-03T06:19:47.873Z</published>
    <updated>2015-12-03T06:19:47.873Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info.</p>
</blockquote>
<p>以上一行字，表明我转投了<a href="http://hexo.io/" target="_blank" rel="external"><strong>Hexo</strong></a>的怀抱。</p>
<a id="more"></a>
<p>最初用的<a href="http://blog.csdn.net/y63308042" target="_blank" rel="external"><em>csdn</em></a>，感觉自由度过低（不能任意DIY），很是不爽；<br>后来用<a href="http://idlepilot.com/" target="_blank" rel="external"><em>飞行员</em></a>的衡天主机搭了个<a href="http://cn.wordpress.org/" target="_blank" rel="external"><em>WordPress</em></a>，然而维护太繁琐。<br>累觉不爱的我听从<a href="http://loli.be/" target="_blank" rel="external"><em>Smoogle</em></a>用了<a href="http://hexo.io/" target="_blank" rel="external"><em>Hexo</em></a>，现在想来静态blog也是极好。<br>用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>写博文，这才符合我这种屌丝码农的身份嘛……</p>
<h2 id="绪论">绪论</h2><h3 id="Hexo是啥箇物事">Hexo是啥箇物事</h3><blockquote>
<p>Hexo是一个快速、简洁且高效的博客框架。<br>Hexo使用<a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<h3 id="Hexo由边个开发">Hexo由边个开发</h3><blockquote>
<p>Hexo用<a href="http://nodejs.org/" target="_blank" rel="external">Node.js</a>开发，作者是台湾大学生<a href="http://twitter.com/tommy351" target="_blank" rel="external">tommy351</a>。</p>
</blockquote>
<h3 id="出现问题谁背锅">出现问题谁背锅</h3><blockquote>
<p>如果您在使用过程中遇到问题，请查看<a href="https://hexo.io/zh-cn/docs/troubleshooting.html" target="_blank" rel="external">问题解答</a>，或者在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>、<a href="https://groups.google.com/group/hexo" target="_blank" rel="external">Google Group</a>上正面刚作者。</p>
</blockquote>
<h2 id="搭建">搭建</h2><h3 id="安装Node-js">安装Node.js</h3><p>到<a href="http://nodejs.org/" target="_blank" rel="external">Node.js官网</a>下载<strong>相应平台</strong>的<a href="http://nodejs.org/download/" target="_blank" rel="external">最新版本</a>，安装之。</p>
<h3 id="安装Git">安装Git</h3><blockquote>
<ul>
<li>Windows：下载并安装<a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a>.</li>
<li>Mac：使用<a href="http://mxcl.github.com/homebrew/" target="_blank" rel="external">Homebrew</a>、<a href="http://www.macports.org/" target="_blank" rel="external">MacPorts</a>或下载<a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="external">安装程序</a>。</li>
<li>Linux (Ubuntu, Debian)：<code>$ sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>$ sudo yum install git-core</code></li>
</ul>
</blockquote>
<h3 id="安装Hexo">安装Hexo</h3><p>笔者以Windows为例</p>
<ol>
<li>打开Git Bash，执行<code>$ npm install -g hexo</code></li>
<li>用<code>$ cd</code>跟<code>$ ls</code>命令，进入一个文件夹作为Hexo的本地存储区域</li>
<li>执行<code>$ hexo init</code></li>
<li>执行<code>$ npm install</code></li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/cd&ls.png">
<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#10;&#9500;&#9472;&#9472; _config.yml&#10;&#9500;&#9472;&#9472; package.json&#10;&#9500;&#9472;&#9472; scaffolds&#10;&#9500;&#9472;&#9472; scripts&#10;&#9500;&#9472;&#9472; source&#10;&#9474;   &#9500;&#9472;&#9472; _drafts&#10;&#9474;   &#9492;&#9472;&#9472; _posts&#10;&#9492;&#9472;&#9472; themes</span><br></pre></td></tr></table></figure>
<p>其实到这里已经差不多了，剩下的只是如何去编辑、查看、发布。</p>
<h2 id="起飞">起飞</h2><h3 id="部署前戏">部署前戏</h3><ol>
<li>修改<code>\_config.yml</code>的deploy部分，注意你在此处用的repository必须名为<code>your_user_name.github.io</code>（忽略大小写）</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploy:&#10;  type: git&#10;  repository: https://github.com/ChouUn/chouun.github.io.git&#10;  branch: master</span><br></pre></td></tr></table></figure>
<ol>
<li>执行<code>$ npm install hexo-deployer-git --save</code>安装部署插件</li>
<li>执行<code>$ hexo d -g</code>进行部署</li>
<li>打开<code>http://your_user_name.github.io</code>察看效果</li>
</ol>
<p>ps. 新版本的hexo已经不再支持github，被新的git取代了。<br>pss. 过程中可能要求你调用这两个命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"chouunsoft@gmail.com"</span></span><br><span class="line">$ git config --global user.name <span class="string">"ChouUn"</span></span><br></pre></td></tr></table></figure>
<p>psss. 为了避免命名空间冲突，每个用户对应唯一一个github.io，请对自己负责不要乱取名字</p>
<h3 id="常用命令">常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 完整命令</span></span><br><span class="line">$ hexo new <span class="string">"My New Post"</span>    <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span>  <span class="comment">#新建页面</span></span><br><span class="line">$ hexo generate             <span class="comment">#生成页面</span></span><br><span class="line">$ hexo server               <span class="comment">#运行服务</span></span><br><span class="line">$ hexo deploy               <span class="comment">#部署博客</span></span><br><span class="line">$ hexo clean                <span class="comment">#清除缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 复合命令</span></span><br><span class="line">$ hexo server --generate    <span class="comment">#生成并运行</span></span><br><span class="line">$ hexo deploy --generate    <span class="comment">#生成并部署</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 缩写命令</span></span><br><span class="line">$ hexo n                    <span class="comment"># hexo new</span></span><br><span class="line">$ hexo g                    <span class="comment"># hexo generate</span></span><br><span class="line">$ hexo s                    <span class="comment"># hexo server</span></span><br><span class="line">$ hexo d                    <span class="comment"># hexo deploy</span></span><br><span class="line">$ hexo s -g                 <span class="comment"># hexo server -generate</span></span><br><span class="line">$ hexo d -g                 <span class="comment"># hexo deploy -generate</span></span><br></pre></td></tr></table></figure>
<p>一般使用<code>$ hexo n</code>新建文章，然后<code>$ hexo s -g</code>实时察看效果，最后<code>$ hexo d -g</code>部署到github上。<br>ps. <code>$ hexo server -s</code>可以运行静态服务，以确认生成是否成功，如果有异步，<code>$ hexo clean</code>以后再<code>$ hexo d -g</code>一次。</p>
<h3 id="标签插件">标签插件</h3><blockquote><p>They’re ported from Octopress and can help you insert specific contents in posts quickly.</p>
<footer><strong>Tag Plugins | Hexo</strong><cite><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">hexo.io/docs/tag-plugins.html</a></cite></footer></blockquote>
<p>译：这些功能是沿袭Octopress，以便你快速插入特殊内容。</p>
<ol>
<li><p>对书籍的引用</p>
<blockquote><p>露と落ち、露と消えにし、我が身かな、浪速のことも、夢のまた夢。</p>
<footer><strong>Toyotomi Hideyoshi</strong><cite>辞世の句</cite></footer></blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Toyotomi Hideyoshi, &#36766;&#19990;&#12398;&#21477; %&#125;&#10;&#38706;&#12392;&#33853;&#12385;&#12289;&#38706;&#12392;&#28040;&#12360;&#12395;&#12375;&#12289;&#25105;&#12364;&#36523;&#12363;&#12394;&#12289;&#28010;&#36895;&#12398;&#12371;&#12392;&#12418;&#12289;&#22818;&#12398;&#12414;&#12383;&#22818;&#12290;&#10;&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对网文的引用</p>
<blockquote><p>[範例]【WB】減少洩漏、提高效率、數據系統<br>雖然我的系統很舊了，不過看最近在研究這東西的人還不少</p>
<footer><strong>Weberkkk</strong><cite><a href="http://forums.wasabistudio.ca/viewtopic.php?t=23408" target="_blank" rel="external">forums.wasabistudio.ca/viewtopic.php?t=23408</a></cite></footer></blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Weberkkk http://forums.wasabistudio.ca/viewtopic.php?t=23408 %&#125;&#10;[&#31684;&#20363;]&#12304;WB&#12305;&#28187;&#23569;&#27945;&#28431;&#12289;&#25552;&#39640;&#25928;&#29575;&#12289;&#25976;&#25818;&#31995;&#32113;&#10;&#38614;&#28982;&#25105;&#30340;&#31995;&#32113;&#24456;&#33290;&#20102;&#65292;&#19981;&#36942;&#30475;&#26368;&#36817;&#22312;&#30740;&#31350;&#36889;&#26481;&#35199;&#30340;&#20154;&#36996;&#19981;&#23569;&#10;&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码块</p>
<figure class="highlight cpp"><figcaption><span>helloworld</span><a href="/code/helloworld.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"!!!Hello World!!!"</span> &lt;&lt; endl; <span class="comment">// prints !!!Hello World!!!</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">&#123;% include_code helloworld lang:cpp helloworld.cpp %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="绑定域名">绑定域名</h3><blockquote><p>如果有自己的域名，在<code>\Hexo\source</code>内创建一个文件名为<code>CNAME</code>（没有后缀）的文件，在里面加入自己的域名，如：<code>xuzhenyang.com</code>，部署后就能在浏览器里进入自己的域名看到自己的博客啦~</p>
<footer><strong>Hello Hexo | 飞行员手册</strong><cite><a href="http://idlepilot.com/2015/04/06/Hello%20Hexo/" target="_blank" rel="external">idlepilot.com/2015/04/06/Hello%20Hexo</a></cite></footer></blockquote>
<p>CNAME文件，起到的只是一个跳转作用。此处利用chrome右键<code>审核元素 -&gt; Network</code>，勾上保留日志<code>Preserve log</code>，打开自己的blog，你会发现一个Method为GET、Status为301的文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remote Address:103.245.222.133:80&#10;Request URL:http://chouun.github.io/&#10;Request Method:GET&#10;Status Code:301 Moved Permanently (from cache)&#10;&#10;Date:Fri, 07 Aug 2015 07:59:18 GMT&#10;Location:http://fateud.com/&#10;Server:GitHub.com</span><br></pre></td></tr></table></figure>
<p>显然你需要一个自己的域名，不然填什么都是为别人做嫁衣。我的<code>fateud.com</code>是从狗爹(<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>)上入的。</p>
<ol>
<li><code>win + R</code>输入<code>cmd</code>回车，输入<code>ping your_user_name.github.io</code>回车，得知自己ip是<em>103.245.222.133</em></li>
<li>登录<a href="https://www.dnspod.cn/" target="_blank" rel="external">DNSPod</a>，添加你的域名，并添加两个A记录，名为<code>@</code>和<code>www</code>，记录值为ip，保存</li>
<li>登录<a href="https://www.godaddy.com/" target="_blank" rel="external">GoDaddy</a>，点击My Account，选择你的域名，在<code>SETTINGS</code>里，管理<code>Nameservers</code>，选择<code>Custom</code>，添加记录<code>f1g1ns1.dnspod.net</code>和<code>f1g1ns2.dnspod.net</code></li>
<li>修改CNAME，为你的域名，不需要<code>www</code>等开头，如<a href="https://github.com/ChouUn/chouun.github.io/blob/master/CNAME" target="_blank" rel="external"></a></li>
<li>坐等解析更新，不用心急，可以ping你的域名，判断是否成功。</li>
<li>有些人可能注意到了<code>mxbiz1.qq.com</code>之类的，网站邮件收发，我采用了腾讯的<a href="http://exmail.qq.com/" target="_blank" rel="external">企业邮箱</a></li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/dnspod.png">
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/ping.png">
<h3 id="七牛图床">七牛图床</h3><p>图片容易拖慢博客的速度，加上github在国内访问时好时坏，同时为了方便博客的迁移，所以用上了七牛图床。七牛支持防盗链、日志，且自带处理功能，以完成水印、缩放、裁剪，甚至支持用户的深度定制。<br>每月免费额度：存储空间10GB、下载流量10GB、10万次PUT请求、100万次GET请求。不得不说是相当优厚的条件，还可以通过<a href="https://portal.qiniu.com/signup?code=3l9w67jqysksy" target="_blank" rel="external">七牛邀请</a>来获取额外额度。顺便提及一下「key-value 存储系统」。</p>
<blockquote><p>Q：七牛云存储支持目录或文件夹概念么？<br>A：七牛云存储的服务端是一个 key-value 系统，而非树形结构，因此也没有“目录”或者“文件夹”的概念。<br>其中，value 是用户上传到七牛云存储的文件，key 是一个用户自定义的字符串，用于在服务端标识这个 value 这个文件。一个 key 对应一个 value，因此，在每个空间（Bucket）中，key 必须是唯一的。<br>key 中可以包含斜杠“/”，让你感觉起来像目录结构，比如 “a/b/c/d.txt” 这个 key，在服务端只对应一个文件，但它看起来像 a 目录下的 b 目录下的 c 目录下的文件 d.txt。实际上，服务端是不存在 a、b、c 三个目录的，也没法创建目录。</p>
<footer><strong>Qiniu</strong><cite><a href="http://kb.qiniu.com/key-value-system" target="_blank" rel="external">kb.qiniu.com/key-value-system</a></cite></footer></blockquote>
<ol>
<li>执行<code>$ npm install hexo-qiniu-sync --save</code>安装七牛插件</li>
<li>对七牛进行设置，详见<a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="external">gyk001/hexo-qiniu-sync</a>；ak和sk参见<a href="https://portal.qiniu.com/setting/key" target="_blank" rel="external">密钥 - 账号设置 - 七牛云存储</a>，要注意空间不能是<code>private</code>的，被坑了很久</li>
<li>运行<code>$ hexo qiniu s</code>进行第一次同步，<code>/hexo</code>下会出现一个与<code>local_dir</code>属性同名的文件夹，里面的分类你懂的</li>
<li>在文章中使用<code><img title="图片标题" alt="图片说明" class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/exam.png"></code>标签插入图片<br>ps. 第二步中的<code>urlPrefix</code>因人而异，比如我是<code>http://7xjw62.com5.z0.glb.clouddn.com/</code>，所以你们别被坑了<br>pss. 因为对<code>$ hexo deploy</code>的支持尚有问题，我们需要手动进行上传..</li>
</ol>
<h3 id="更多信息">更多信息</h3><p><a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a><br><a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a><br><a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a><br><a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">Tag Plugins</a></p>
<h2 id="编辑">编辑</h2><h3 id="安装Sublime">安装Sublime</h3><p>个人喜欢用稳定的<a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime 2</a>，下载了官方原版（无限试用期）。</p>
<h3 id="安装Package_Control">安装Package Control</h3><p>按下<code>Control + BackQuote</code>调出Console，键入一下代码并回车。所谓BackQuote就是<code>~</code>键中的反引号。</p>
<ul>
<li>sublime 2</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib2,os; pf=&#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#39;wb&#39; ).write( urllib2.urlopen( &#39;http://sublime.wbond.net/&#39; +pf.replace( &#39; &#39;,&#39;%20&#39; )).read()); print( &#39;Please restart Sublime Text to finish installation&#39;)</span><br></pre></td></tr></table></figure>
<ul>
<li>sublime 3</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</span><br></pre></td></tr></table></figure>
<p>若是安装成功，重启后能在<code>Preferences -&gt; Package Settings</code>中找到<code>Package Control</code>。</p>
<h3 id="安装Markdown_&amp;_Monokai">安装Markdown &amp; Monokai</h3><ol>
<li>按下<code>Control + Shift + P</code>，键入<code>Package Control: install Package</code>回车，键入<code>Markdown Extended</code>回车，即可安装该Package。</li>
<li>同样操作，安装<code>Monokai Extended</code>。</li>
</ol>
<h3 id="配置Sublime">配置Sublime</h3><ol>
<li><p>打开<code>Preferences -&gt; Settings - User</code>，在一对<code>{}</code>内的开头添加以下语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#34;color_scheme&#34;: &#34;Packages/Monokai Extended/Monokai Extended Bright.tmTheme&#34;,&#10;&#34;theme&#34;: &#34;Soda Dark.sublime-theme&#34;,</span><br></pre></td></tr></table></figure>
</li>
<li><p>勾上<code>View -&gt; Syntax -&gt; Markdown Extended</code></p>
</li>
<li>重启之，随便开个<code>.md</code>文件看看高亮效果，下图仅供参考。</li>
</ol>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-hexo/sublime.png">
<h3 id="Markdown语法">Markdown语法</h3><p>因为篇幅有限，对于md的语法部分，原谅我不予赘述。</p>
<ol>
<li>简体中文: <a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">http://wowubuntu.com/markdown/</a></li>
<li>繁体中文: <a href="http://markdown.tw/" target="_blank" rel="external">http://markdown.tw/</a></li>
<li>英文原版: <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">http://daringfireball.net/projects/markdown/syntax</a></li>
<li>密集排版: <a href="http://www.applecho.com/markdown-guide/" target="_blank" rel="external">http://www.applecho.com/markdown-guide/</a></li>
<li>飞行员版: <a href="http://idlepilot.com/2015/07/12/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/" target="_blank" rel="external">http://idlepilot.com/2015/07/12/Markdown常用语法/</a></li>
</ol>
<h2 id="主题">主题</h2><blockquote>
<p><a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Jacman</a>是为<a href="http://hexo.io" target="_blank" rel="external">Hexo</a>设计的一款清新且具有响应式的主题，拥有更丰富的特性并支持了很多的国内服务。Jacman始于<a href="https://github.com/A-limon/pacman" target="_blank" rel="external">Pacman</a>修改而来。</p>
</blockquote>
<h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/wuchong/jacman.git themes/jacman</span><br></pre></td></tr></table></figure>
<p><strong>Jacman 需要 Hexo 2.7 及以上版本</strong></p>
<h3 id="启用">启用</h3><p>修改博客根目录下的配置文件<code>_config.yml</code>，把<code>theme</code>的值修改为 <code>jacman</code>.</p>
<h3 id="配置">配置</h3><p>修改<code>/themes/jacman/_config.yml</code>中的配置。通过<a href="https://github.com/wuchong/jacman/wiki/%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97" target="_blank" rel="external">配置指南wiki</a>了解更多</p>
<h3 id="公式">公式</h3><p>$\frac{\partial u}{\partial t}<br>= h^2 \left(<br>\frac{\partial^2 u}{\partial x^2} +<br>\frac{\partial^2 u}{\partial y^2} +<br>\frac{\partial^2 u}{\partial z^2}<br>\right)$<br>以上公式由以下代码生成，调用了$Mathjax$的接口</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\\frac&#123;\\partial u&#125;&#123;\\partial t&#125;&#10;= h^2 \\left(&#10;\\frac&#123;\\partial^2 u&#125;&#123;\\partial x^2&#125; +&#10;\\frac&#123;\\partial^2 u&#125;&#123;\\partial y^2&#125; +&#10;\\frac&#123;\\partial^2 u&#125;&#123;\\partial z^2&#125;&#10;\\right)$</span><br></pre></td></tr></table></figure>
<p>此功能需要在配置里修改如下项<code>mathjax: true</code>，抑或在每个文章中手动添加。<br>用一对<code>$$</code>会单独占用一行，用一对<code>$</code>会作为内容的顺延。</p>
<h3 id="评论">评论</h3><p>该主题自带disqus和duoshuo支持，把shortname填上去即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### Comment&#10;duoshuo_shortname: fateud ## e.g. wuchong   your duoshuo short name.&#10;disqus_shortname: chouun  ## e.g. wuchong   your disqus short name.</span><br></pre></td></tr></table></figure>
<h3 id="支持">支持</h3><p>更多功能与信息请查阅：<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">Jacman官网</a></p>
<h2 id="参考">参考</h2><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">文档 | Hexo</a><br><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客 | 不如</a><br><a href="http://idlepilot.com/2015/04/06/Hello%20Hexo/" target="_blank" rel="external">Hello Hexo | 飞行员手册</a><br><a href="http://daringfireball.net/projects/markdown/syntax/" target="_blank" rel="external">Daring Fireball: Markdown Syntax Documentation</a><br><a href="http://code-tech.diandian.com/post/2012-11-10/40041958361" target="_blank" rel="external">配置Sublime Text使用Markdown，语法高亮,生成HTML_技术党</a><br><a href="http://lucifr.com/2011/08/31/sublime-text-2-tricks-and-tips/" target="_blank" rel="external">Sublime Text 2 入门及技巧 | Lucifr</a><br><a href="http://lucifr.com/2012/07/12/markdownediting-for-sublime-text-2/" target="_blank" rel="external">MarkdownEditing：Sublime Text 2 的 Markdown 利器 | Lucifr</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Welcome to <a href="http://hexo.io/">Hexo</a>! Check <a href="http://hexo.io/docs/">documentation</a> for more info.</p>
</blockquote>
<p>以上一行字，表明我转投了<a href="http://hexo.io/"><strong>Hexo</strong></a>的怀抱。</p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://fateud.com/tags/blog/"/>
    
      <category term="github" scheme="http://fateud.com/tags/github/"/>
    
      <category term="hexo" scheme="http://fateud.com/tags/hexo/"/>
    
      <category term="markdown" scheme="http://fateud.com/tags/markdown/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Lua學習筆記]]></title>
    <link href="http://fateud.com/note-lua/"/>
    <id>http://fateud.com/note-lua/</id>
    <published>2015-11-05T13:45:54.959Z</published>
    <updated>2015-11-05T13:45:54.959Z</updated>
    <content type="html"><![CDATA[<p>關於Lua的<a href="http://www.lua.org/about.html" target="_blank" rel="external">官方定義</a>：</p>
<blockquote>
<p><strong>Lua</strong> is a powerful, fast, lightweight, embeddable <strong>scripting language</strong>.<br><strong>Lua</strong> combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is <strong>dynamically typed</strong>, runs by interpreting bytecode for a register-based <strong>virtual machine</strong>, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.</p>
</blockquote>
<p>別的我就不多安利了</p>
<a id="more"></a>
<h2 id="type">type</h2><h3 id="table">table</h3><p>table是類似class的hash_map，由data和method兩部分組成。簡而言之，數據和行爲是分離的，後者在Lua中稱爲metatable。<br>metatable有很多特有的鍵，在此我們粗暴的認爲特有鍵類似c++中的操作符，它們的值一般爲function或table。</p>
<h4 id="setmetatable">setmetatable</h4><p>我們可以通過setmetatable來賦予table不同的動作。</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = &#123;&#125;              <span class="comment">-- 普通的table</span></span><br><span class="line">mt = &#123;&#125;             <span class="comment">-- metatable</span></span><br><span class="line"><span class="built_in">setmetatable</span>(t, mt) <span class="comment">-- 设定mt为t的metatable</span></span><br><span class="line"><span class="built_in">getmetatable</span>(t)     <span class="comment">-- 返回mt</span></span><br></pre></td></tr></table></figure>
<p>以上代碼可以縮略爲：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure></p>
<h4 id="__index與__newindex">__index與__newindex</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">other = &#123;&#125;</span><br><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123; __newindex = other &#125;)</span><br><span class="line">t.foo = <span class="number">3</span></span><br><span class="line">t.foo     <span class="comment">-- nil</span></span><br><span class="line">other.foo <span class="comment">-- 3</span></span><br><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123; __index = other &#125;)</span><br><span class="line">t.foo     <span class="comment">-- 3</span></span><br><span class="line">other.foo <span class="comment">-- 3</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>__index</code>類似於<code>[]</code>操作符</li>
<li><code>__newindex</code>類似於<code>[]=</code>操作符</li>
</ul>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123;</span><br><span class="line">  __newindex = <span class="function"><span class="keyword">function</span><span class="params">(t, key, value)</span></span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(value) == <span class="string">"number"</span> <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">rawset</span>(t, key, value * value)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">rawset</span>(t, key, value)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">t.foo = <span class="string">"foo"</span></span><br><span class="line">t.foo <span class="comment">-- "foo"</span></span><br><span class="line">t.bar = <span class="number">4</span></span><br><span class="line">t.bar <span class="comment">-- 16</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>rawget</code>和<code>rawset</code>可以避免調用重載後的操作符（__index和__newindex）</li>
</ul>
<h4 id="__tostring">__tostring</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t = <span class="built_in">setmetatable</span>(&#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123;</span><br><span class="line">  __tostring = <span class="function"><span class="keyword">function</span><span class="params">(t)</span></span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span> sum = sum + v <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Sum: "</span> .. sum</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(t) <span class="comment">-- prints out "Sum: 6"</span></span><br></pre></td></tr></table></figure>
<h4 id="operator">operator</h4><p>運算符只能是函數</p>
<ul>
<li>__add</li>
<li>__sub</li>
<li>__mul</li>
<li>__div</li>
<li>__mod</li>
<li>__unm</li>
<li>__concat</li>
<li>__eq</li>
<li>__lt</li>
<li>__le</li>
</ul>
<h3 id="function">function</h3><p>一個機智的計數器</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InitCounter</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">newCounter1 = InitCounter()</span><br><span class="line"><span class="built_in">print</span>(newCounter1()) <span class="comment">-- 1</span></span><br><span class="line"><span class="built_in">print</span>(newCounter1()) <span class="comment">-- 2</span></span><br><span class="line">newCounter2 = InitCounter()</span><br><span class="line"><span class="built_in">print</span>(newCounter2()) <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure>
<h2 id="wheel">wheel</h2><p>德堪邀請我入坑，考慮了一下還是可行的。<br>現在手頭還沒拿到項目，所以自己造輪子玩。</p>
<figure class="highlight lua"><figcaption><span>list.lua</span><a href="/code/wheel/container/list.lua">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ _list_node ]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Class</span></span><br><span class="line">_list_node = {}</span><br><span class="line">_list_node.__index = _list_node</span><br><span class="line">_list_node.__gc = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">  self._type = <span class="keyword">nil</span></span><br><span class="line">  self._next = <span class="keyword">nil</span></span><br><span class="line">  self._prev = <span class="keyword">nil</span></span><br><span class="line">  self._elem = <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Metatable</span></span><br><span class="line">_list_node_mt = {}</span><br><span class="line">_list_node_mt._type = <span class="string">"_list_node"</span></span><br><span class="line">_list_node_mt._next = <span class="keyword">nil</span></span><br><span class="line">_list_node_mt._prev = <span class="keyword">nil</span></span><br><span class="line">_list_node_mt._elem = <span class="keyword">nil</span></span><br><span class="line">_list_node_mt.__call = <span class="function"><span class="keyword">function</span><span class="params">(self, value)</span></span></span><br><span class="line">  <span class="keyword">local</span> res = <span class="built_in">setmetatable</span>({}, _list_node)</span><br><span class="line">  res._elem = value</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">setmetatable</span>(_list_node, _list_node_mt)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Iterators</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_list_node:next</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> self._next</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_list_node:prev</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> self._prev</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Access</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_list_node:valueOf</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> self._elem</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ list ]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Class</span></span><br><span class="line">list = {}</span><br><span class="line">list.__index = list</span><br><span class="line">list.__len = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">  <span class="keyword">return</span> self._size</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">list.__gc = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line">  self:clear()</span><br><span class="line">  self._type = <span class="keyword">nil</span></span><br><span class="line">  self._impl = <span class="keyword">nil</span></span><br><span class="line">  self._size = <span class="keyword">nil</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Metatable</span></span><br><span class="line">list_mt = {}</span><br><span class="line">list._type = <span class="string">"list"</span></span><br><span class="line">list._impl = <span class="keyword">nil</span></span><br><span class="line">list._size = <span class="number">0</span></span><br><span class="line">list_mt.__call = <span class="function"><span class="keyword">function</span><span class="params">(self, arg)</span></span></span><br><span class="line">  <span class="keyword">local</span> res = <span class="built_in">setmetatable</span>({}, list)</span><br><span class="line">  res._impl = _list_node(<span class="keyword">nil</span>)</span><br><span class="line">  res._impl._next = res._impl</span><br><span class="line">  res._impl._prev = res._impl</span><br><span class="line">  res._size = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> arg ~= <span class="keyword">nil</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">assert</span>(<span class="built_in">type</span>(arg) == <span class="string">"table"</span>)</span><br><span class="line">    <span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(arg) <span class="keyword">do</span></span><br><span class="line">      res:push_back(v)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">setmetatable</span>(list, list_mt)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Capacity</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:empty</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> _size == <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Iterators</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:front</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> self._impl._next</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:back</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">return</span> self._impl</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:find</span><span class="params">(value)</span></span></span><br><span class="line">  <span class="keyword">local</span> res = self:front()</span><br><span class="line">  <span class="keyword">while</span> res ~= self:back() <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> res._elem == value <span class="keyword">then</span> <span class="keyword">break</span> <span class="keyword">end</span></span><br><span class="line">    res = res._next</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:move</span><span class="params">(value)</span></span></span><br><span class="line">  <span class="keyword">local</span> node = self:find(value)</span><br><span class="line">  <span class="keyword">if</span> node ~= self:back() <span class="keyword">then</span> self:erase(node) <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Modifiers</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:insert</span><span class="params">(node, elem)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(node ~= <span class="keyword">nil</span>)</span><br><span class="line">  <span class="keyword">local</span> temp = _list_node(elem)</span><br><span class="line">  temp._prev = node._prev</span><br><span class="line">  node._prev._next = temp</span><br><span class="line">  temp._next = node</span><br><span class="line">  node._prev = temp</span><br><span class="line">  self._size = self._size + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> temp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:erase</span><span class="params">(node)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(node ~= <span class="keyword">nil</span>)</span><br><span class="line">  node._prev._next = node._next</span><br><span class="line">  node._next._prev = node._prev</span><br><span class="line">  node._next = <span class="keyword">nil</span></span><br><span class="line">  node._prev = <span class="keyword">nil</span></span><br><span class="line">  node._elem = <span class="keyword">nil</span></span><br><span class="line">  self._size = self._size - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:push_front</span><span class="params">(elem)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(self._impl ~= <span class="keyword">nil</span>)</span><br><span class="line">  <span class="keyword">return</span> self:insert(self:front(), elem)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:pop_front</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> node = self:front()</span><br><span class="line">  <span class="built_in">assert</span>(node ~= self._impl)</span><br><span class="line">  <span class="keyword">return</span> self:erase(node)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:push_back</span><span class="params">(elem)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(self._impl ~= <span class="keyword">nil</span>)</span><br><span class="line">  <span class="keyword">return</span> self:insert(self:back(), elem)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:pop_back</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> node = self:back():prev()</span><br><span class="line">  <span class="built_in">assert</span>(node ~= self._impl)</span><br><span class="line">  <span class="keyword">return</span> self:erase(node)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:swap</span><span class="params">(other)</span></span></span><br><span class="line">  <span class="built_in">assert</span>(other._type == <span class="string">"list"</span>)</span><br><span class="line">  self._impl, other._impl = other._impl, self._impl</span><br><span class="line">  self._size, other._size = other._size, self._size</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:clear</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">while</span> self._size ~= <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">    self:erase(self:front())</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- Operations</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list:reverse</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> node = self:front()</span><br><span class="line">  <span class="keyword">while</span> node ~= self:back() <span class="keyword">do</span></span><br><span class="line">    node._prev, node._next = node._next, node._prev</span><br><span class="line">    node = node._prev</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  node._prev, node._next = node._next, node._prev</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ test ]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> q = list({<span class="number">1</span>, <span class="number">2</span>})</span><br><span class="line">q:push_front(<span class="keyword">true</span>)</span><br><span class="line">q:push_back(<span class="keyword">nil</span>)</span><br><span class="line">q:push_back(<span class="string">"4"</span>)</span><br><span class="line">q:push_back(<span class="number">5</span>)</span><br><span class="line">q:pop_back()</span><br><span class="line">q:push_back({<span class="number">6</span>,<span class="number">7</span>})</span><br><span class="line">q:move(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">local</span> p = list({<span class="number">8</span>, <span class="number">9</span>})</span><br><span class="line">p:swap(q)</span><br><span class="line">q:clear()</span><br><span class="line">p:reverse()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"length : "</span> .. #q)</span><br><span class="line">i = p:front()</span><br><span class="line"><span class="keyword">while</span> i ~= p:back() <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(i:valueOf())</span><br><span class="line">  i = i:<span class="built_in">next</span>()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span><br><span class="line">length : 0</span><br><span class="line">table: 00C8AF38</span><br><span class="line">4</span><br><span class="line">nil</span><br><span class="line">1</span><br><span class="line">true</span><br><span class="line">[Finished in 0.192s]</span><br><span class="line">]]</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>關於Lua的<a href="http://www.lua.org/about.html">官方定義</a>：</p>
<blockquote>
<p><strong>Lua</strong> is a powerful, fast, lightweight, embeddable <strong>scripting language</strong>.<br><strong>Lua</strong> combines simple procedural syntax with powerful data description constructs based on associative arrays and extensible semantics. Lua is <strong>dynamically typed</strong>, runs by interpreting bytecode for a register-based <strong>virtual machine</strong>, and has automatic memory management with incremental garbage collection, making it ideal for configuration, scripting, and rapid prototyping.</p>
</blockquote>
<p>別的我就不多安利了</p>]]>
    
    </summary>
    
      <category term="Lua" scheme="http://fateud.com/tags/Lua/"/>
    
      <category term="編程語言" scheme="http://fateud.com/tags/%E7%B7%A8%E7%A8%8B%E8%AA%9E%E8%A8%80/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 ACM/ICPC Asia Regional Changchun OnSite]]></title>
    <link href="http://fateud.com/icpc2015-ccos/"/>
    <id>http://fateud.com/icpc2015-ccos/</id>
    <published>2015-10-17T02:59:08.000Z</published>
    <updated>2015-10-20T14:21:59.370Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>因爲我的愚蠢，坑了H，最後才出5題，只拿了銀。<br>這麼一看，是不是與<a href="/icpc2015-ccol">2015 ACM/ICPC Asia Regional Changchun Online</a>情與貌，略相似。我不長記性啊。</p>
<a id="more"></a>
<h2 id="隊名">隊名</h2><p>中文隊名：冷酷的奴隸主<br>英文隊名：Grim Patron<br>出處是「爐石傳說」中的一張卡牌，效果是受到不致死的傷害能分裂出同樣一個3/3的分身。<br>寓意不是屠場，而是奮鬥；其實主要是因爲「卞」和「颼颼」喜歡爐石，我就想了這樣一個名字。</p>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/Grim%20Patron.png?imageView2/2/w/269">
<h2 id="獎牌">獎牌</h2><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/medal.png?imageView2/2/w/269">
<h2 id="啓碇">啓碇</h2><p>雖然經費緊張，boss們還是決定給去長春的我們定機票，相比之下南陽衆的待遇就差很多了，導致我現在還是有負罪感。<br>早早到了長春機場，一出門便被妹子勾搭了：你們是來參加ICPC的麼？起初以爲志願者，原來是如假包換的女隊。<br>三點時的士換班，我們打不到車，又不開森，一怒之下直接走到了學校，簡直了。</p>
<h2 id="入住">入住</h2><p>進了學校以後，志願者妹紙的腿不錯..呃，我是說腳力不錯，先帶着我們先去領了參賽資料和制服。<br>每個隊伍只有一個袋子，不像上海每人一個，還有google爸爸的本子送。畢竟贊助商都去ccpc了。<br>別的學校似乎都有吉祥物可以領..嗯，哼，yahari，我們沒有。繼續趕往賓館。</p>
<p>現在問題來了..賓館在哪裏..果然不太好找..</p>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/storefront.png?imageView2/2/w/269">
<p>打開房門，第一感覺就是狹窄。好歹是三人間，鎮海的蛟川就高大上多了，你們好歹是省會= =。<br>房間裏連熱水壺都沒，只有熱水瓶去接水。<br>寫字檯上還有個電視。液晶？想多了。方方正正一個大箱子。現在已經被我們安置在桌下了，騰空間。</p>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/room.png?imageView2/2/w/269">
<h2 id="制服">制服</h2><p>然後就是展示制服了，聽說ccpc是粉紅色的，笑cry。<br>我們的充其量也就是個校服，還是「無印良品」，連個logo都沒。<br>你不印學校標識也就算了，連acm的標識都懶得弄上去，這讓我如何穿出去吹逼。<br>看來這個鍋又要給沒有贊助商了。<br>下圖是不願透露正臉的帥氣的「颼颼」學長。</p>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/member.png?imageView2/2/w/269">
<p>晚上就是幸福的遊戲時間，因爲網絡不好，我們只能打war3rpg。<br>比如《術士戰爭》兩個人追着一個懟，導致「颼颼」險些棄坑。</p>
<h2 id="面基">面基</h2><p>第二天清晨，初中學弟便來面基了，多年未見甚是想念他們，聊了很多、很久。<br>不過小學弟的住宿環境似乎比我們還差，真是喜聞樂見。<br>下面就是駐紮在他們天花板上的瓢蟲，土語叫「花大姐」。</p>
<img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/ladybug.png?imageView2/2/w/269">
<p>中午吃飯面了網友「王太虛」，賽場上面了「obsolescence」。<br>下午熱身賽，測試了一些東西，然而惡意提交的人太多，來不及返回結果。<br>晚上又是快樂的rpg時光，我們都中毒了，奠定了爆銀的節奏。</p>
<h2 id="正賽">正賽</h2><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/icpc2015-ccos/field.png?imageView2/2/w/269">
<p>榜單：<a href="http://acm.nenu.edu.cn/board/" target="_blank" rel="external">http://acm.nenu.edu.cn/board/</a></p>
<ul>
<li>33分鐘，兩發L題；</li>
<li>54分鐘，一發F題；</li>
<li>76分鐘，一發G題；</li>
<li>109分鐘，一發J題；</li>
<li>252分鐘，六發H題。</li>
</ul>
<p>所以多交的幾發，全是因爲我的愚蠢。<br>不然罰時少，有空開E，或者搞出A，有望衝金。<br>最後銀牌滾粗。</p>
<h2 id="感想">感想</h2><p>不吹不黑，長春的市區建設，真心跟浙北縣級市不相上下，充其量馬路寬泛一點。<br>不過飛機來的途中，阡陌交通，村落如聚，在我處實屬不易見到的景象。<br>長春的哥也是有點屌的，相當有「性格」，不過也有很熱心的老司機，會老馬識途。<br>不過去過別的城市以後，我對杭州的感官也有所改變。</p>
<blockquote><p>我已經習慣的，被我當成了空氣一般自然而然的東西，原來並不是理所當然的。<br>我以爲一個城市的市容市貌就應該是這樣整潔美觀，<br>我以爲一個城市裏的市區就應該有山水湖泊，<br>我以爲生活本來就應該是春夏秋冬都有步可以散，<br>我以爲城市裏的圖書館hifi音樂廳週末就會有免費的演唱會可以聽…<br>我以爲這些就像吃飯睡覺一樣正常。<br>如今我離開了才明白這日子有多麼奢侈。</p>
<footer><strong>Porco</strong><cite><a href="http://www.zhihu.com/question/36479332/answer/68148497" target="_blank" rel="external">www.zhihu.com/question/36479332/answer/68148497</a></cite></footer></blockquote>
<p>畢竟，車讓人，本不是所有城市都有的現象；<br>無論規定抑或素質，它就擺在那裏，不折、不扣。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引言">引言</h2><p>因爲我的愚蠢，坑了H，最後才出5題，只拿了銀。<br>這麼一看，是不是與<a href="/icpc2015-ccol">2015 ACM/ICPC Asia Regional Changchun Online</a>情與貌，略相似。我不長記性啊。</p>]]>
    
    </summary>
    
      <category term="現場賽" scheme="http://fateud.com/tags/%E7%8F%BE%E5%A0%B4%E8%B3%BD/"/>
    
      <category term="長春賽區" scheme="http://fateud.com/tags/%E9%95%B7%E6%98%A5%E8%B3%BD%E5%8D%80/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 Astar Contest - Round 2A]]></title>
    <link href="http://fateud.com/astar2015-round2a/"/>
    <id>http://fateud.com/astar2015-round2a/</id>
    <published>2015-09-25T16:23:50.000Z</published>
    <updated>2015-09-25T17:49:01.227Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>在一直沒有寫出能正常運行的平衡樹模板，這個坑拖了很久（然而是取巧的）。<br>還有一個就是魔方，之前打了27的表發現還要考慮色向和，怎麼都wa簡直崩潰。</p>
<a id="more"></a>
<h2 id="1001-_超级赛亚ACMer_(hdu5246)">1001. 超级赛亚ACMer (hdu5246)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5246" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5246</a></p>
<h3 id="解題報告">解題報告</h3><p>排個序，貪心搞一搞，過了。</p>
<h3 id="樣例代碼">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1001</span><a href="/code/hdu/hdu5246.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5246.cpp</span><br><span class="line"> *  Date : 2015年8月4日 下午8:29:04</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line">ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">//for (; scanf("%d", &amp;_) != EOF; ) {</span></span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_); _; _--) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">    <span class="keyword">int</span> n; ll m, k; <span class="built_in">scanf</span>(<span class="string">"%d"</span> i64 i64, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    rep(i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(i64, a+i); sort(a, a+n);</span><br><span class="line">    <span class="keyword">int</span> idx = -<span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, n) <span class="keyword">if</span> (a[i] &gt; m) <span class="keyword">break</span>; <span class="keyword">else</span> idx = i;</span><br><span class="line">    <span class="keyword">if</span> (~idx) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> tmp = idx; k &amp;&amp; idx != n-<span class="number">1</span>; k--, idx = tmp) {</span><br><span class="line">        rep(i, idx+<span class="number">1</span>, n) <span class="keyword">if</span> (a[i] &gt; a[idx] + max(k, <span class="number">0l</span>l)) <span class="keyword">break</span>; <span class="keyword">else</span> tmp = i;</span><br><span class="line">        <span class="keyword">if</span> (tmp == idx) <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(idx != n-<span class="number">1</span> ? <span class="string">"madan!\n"</span> : <span class="string">"why am I so diao?\n"</span>);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1002-_找连续数_(hdu5247)">1002. 找连续数 (hdu5247)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5247" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5247</a></p>
<h3 id="解題報告-1">解題報告</h3><p>維護三種值：</p>
<ol>
<li>區間內的最小值$x$</li>
<li>區間內的最大值$y$</li>
<li>區間內所有元素上次出現的下標的最大值$z$</li>
</ol>
<p>因此對於區間$[i,i+k-1]$：<br>滿足$y - x + 1 = k$，約束了數據範圍；<br>且$z &lt; i$，約束了重複元素。</p>
<h3 id="樣例代碼-1">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1002</span><a href="/code/hdu/hdu5247.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_algo.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sparse.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5247.cpp</span><br><span class="line"> *  Date : 2015年8月5日 下午7:41:50</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//for (; scanf("%d", &amp;_) != EOF; ) {</span></span><br><span class="line">  <span class="keyword">for</span> (_ = <span class="number">1</span>; _; _--) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">    <span class="keyword">int</span> n, m; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    rep(i, <span class="number">0</span>, n) {</span><br><span class="line">      it = p.find(a[i]);</span><br><span class="line">      b[i] = (it == p.end()) ? -<span class="number">1</span> : it-&gt;second;</span><br><span class="line">      p[a[i]] = i;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    csl::<span class="keyword">sparse_t</span>able&lt; <span class="keyword">int</span>, csl::less&lt;<span class="keyword">int</span>&gt; &gt; st1; st1.build(a, n);</span><br><span class="line">    csl::<span class="keyword">sparse_t</span>able&lt; <span class="keyword">int</span>, csl::greater&lt;<span class="keyword">int</span>&gt; &gt; st2; st2.build(a, n);</span><br><span class="line">    csl::<span class="keyword">sparse_t</span>able&lt; <span class="keyword">int</span>, csl::greater&lt;<span class="keyword">int</span>&gt; &gt; st3; st3.build(b, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m--) {</span><br><span class="line">      <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">      <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">      rep(i, <span class="number">0</span>, n-k+<span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">int</span> x = st1.query(i, i+k-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> y = st2.query(i, i+k-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (y - x + <span class="number">1</span> != k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> z = st3.query(i, i+k-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (z &gt;= i) <span class="keyword">continue</span>;</span><br><span class="line">        ++ans;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1003-_序列变换_(hdu5248)">1003. 序列变换 (hdu5248)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5248" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5248</a></p>
<h3 id="解題報告-2">解題報告</h3><p>二分答案，然後貪心之。<br>第一頁嗑瓜子。</p>
<h3 id="樣例代碼-2">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1003</span><a href="/code/hdu/hdu5248.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5248.cpp</span><br><span class="line"> *  Date : 2015年8月5日 下午10:07:15</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> now = a[<span class="number">0</span>] - k;</span><br><span class="line">  rep(i, <span class="number">1</span>, n) {</span><br><span class="line">    now = max(now + <span class="number">1</span>, a[i] - k);</span><br><span class="line">    <span class="keyword">if</span> (now &gt; a[i] + k) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//for (; scanf("%d", &amp;_) != EOF; ) {</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_); _; _--) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	rep(i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">2000000</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">	  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	  <span class="keyword">if</span> (judge(m)) r = m; <span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1004-_KPI_(hdu5249)">1004. KPI (hdu5249)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5249" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5249</a></p>
<h3 id="解題報告-3">解題報告</h3><ol>
<li>兩個set瞎搞</li>
<li>離線離散化，二分樹狀數組</li>
<li>數據結構題，用平衡樹維護</li>
</ol>
<p>第一頁第三個。</p>
<h3 id="樣例代碼-3">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1004</span><a href="/code/hdu/hdu5249-1.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5249-1.cpp</span><br><span class="line"> *  Date : 2015年8月5日 下午10:18:37</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> channel {</span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; head, tail;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">  <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; order;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>{</span><br><span class="line">    head.clear();</span><br><span class="line">    tail.clear();</span><br><span class="line">    order.clear();</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (head.empty() || x &gt; *head.rbegin()) tail.insert(x);</span><br><span class="line">    <span class="keyword">else</span> head.insert(x);</span><br><span class="line">    order.push_back(x);</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (order.empty()) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> x = order.front(); order.pop_front();</span><br><span class="line">    it = head.find(x); <span class="keyword">if</span> (it != head.end()) head.erase(it);</span><br><span class="line">    it = tail.find(x); <span class="keyword">if</span> (it != tail.end()) tail.erase(it);</span><br><span class="line">  }</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">while</span> (tail.size() &lt; head.size()) {</span><br><span class="line">      it = --head.end();</span><br><span class="line">      tail.insert(*it);</span><br><span class="line">      head.erase(it);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (tail.size() &gt; head.size() + <span class="number">1</span>) {</span><br><span class="line">      it = tail.begin();</span><br><span class="line">      head.insert(*it);</span><br><span class="line">      tail.erase(it);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!tail.empty()) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *tail.begin());</span><br><span class="line">  }</span><br><span class="line">} q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF; ) {</span><br><span class="line"><span class="comment">//  for (scanf("%d", &amp;_); _; _--) {</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">    q.clear();</span><br><span class="line">	<span class="keyword">while</span> (n--) {</span><br><span class="line">	  <span class="keyword">char</span> s[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); <span class="keyword">int</span> x;</span><br><span class="line">	  <span class="keyword">switch</span> (s[<span class="number">0</span>]) {</span><br><span class="line">	    <span class="keyword">case</span> <span class="string">'i'</span> : <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); q.insert(x); <span class="keyword">break</span>;</span><br><span class="line">	    <span class="keyword">case</span> <span class="string">'o'</span> : q.erase(); <span class="keyword">break</span>;</span><br><span class="line">	    <span class="keyword">case</span> <span class="string">'q'</span> : q.query(); <span class="keyword">break</span>;</span><br><span class="line">	  }</span><br><span class="line">	}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>1004</span><a href="/code/hdu/hdu5249-2.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fenwick.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;discrete.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5249-2.cpp</span><br><span class="line"> *  Date : 2015年8月5日 下午11:37:55</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="keyword">char</span> op[maxn];</span><br><span class="line"></span><br><span class="line">csl::<span class="keyword">fenwick_t</span>ree&lt;<span class="keyword">int</span>&gt; ft;</span><br><span class="line"><span class="keyword">size_t</span> search(<span class="keyword">int</span> k) {</span><br><span class="line">  <span class="keyword">size_t</span> res = <span class="number">0</span>; <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  rrep(i, <span class="number">0</span>, <span class="number">20</span>) {</span><br><span class="line">    <span class="keyword">size_t</span> tmp = res + (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">    <span class="keyword">if</span> (tmp &gt;= ft.m_data.size()) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">if</span> (cnt + ft.m_data[tmp] &gt;= k) <span class="keyword">continue</span>;</span><br><span class="line">    res = tmp; cnt += ft.m_data[tmp];</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> __ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF; ) {</span><br><span class="line"><span class="comment">//  for (scanf("%d", &amp;_); _; _--) {</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; u;</span><br><span class="line">    csl::discrete&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    rep(i, <span class="number">0</span>, n) {</span><br><span class="line">      <span class="keyword">char</span> s[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); op[i] = s[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'i'</span>) {</span><br><span class="line">        <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        u.push_back(x); v.insert(x);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    v.build();</span><br><span class="line"></span><br><span class="line">    ft.build(v.size());</span><br><span class="line">    <span class="keyword">int</span> l = -<span class="number">1</span>, r = -<span class="number">1</span>, pos;</span><br><span class="line">    rep(i, <span class="number">0</span>, n)</span><br><span class="line">      <span class="keyword">switch</span> (op[i]) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span> :</span><br><span class="line">          pos = v.query(u[++r]); ft.update(pos + <span class="number">1</span>, +<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span> :</span><br><span class="line">          pos = v.query(u[++l]); ft.update(pos + <span class="number">1</span>, -<span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'q'</span> :</span><br><span class="line">          pos = search((r - l) / <span class="number">2</span> + <span class="number">1</span>); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, v[pos - <span class="number">1</span>]); <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>1004</span><a href="/code/hdu/hdu5249-3.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;rb_tree.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5249-3.cpp</span><br><span class="line"> *  Date : 2015年8月8日 上午9:53:05</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> csl::<span class="keyword">rb_t</span>ree&lt;<span class="keyword">int</span>, __gnu_pbds::<span class="keyword">null_t</span>ype, less&lt;<span class="keyword">int</span>&gt;,</span><br><span class="line">    __gnu_pbds::tree_order_statistics_node_update&gt; <span class="keyword">rb_t</span>ree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> __ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF; ) {</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++__);</span><br><span class="line">    <span class="keyword">rb_t</span>ree p;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (n--) {</span><br><span class="line">      <span class="keyword">char</span> s[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">switch</span> (s[<span class="number">0</span>]) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span> :</span><br><span class="line">          <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), q.push(x), p.insert(x); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'o'</span> :</span><br><span class="line">          <span class="keyword">if</span> (!q.empty()) x = q.front(), q.pop(), p.erase(x); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'q'</span> :</span><br><span class="line">          <span class="keyword">if</span> (!p.empty()) x = *p.find_by_order(p.size() / <span class="number">2</span>); <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, x); <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1005-_三阶魔方_(hdu5250)">1005. 三阶魔方 (hdu5250)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5250" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5250</a></p>
<h3 id="解題報告-4">解題報告</h3><p>對發生變化的48個面打個表，然後暴力跑一跑能過。<br>我這裏爲了衝榜首，用了找循環節然後求gcd的方法。</p>
<h3 id="樣例代碼-4">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1005</span><a href="/code/hdu/hdu5250.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5250.cpp</span><br><span class="line"> *  Date : 2015年9月25日 上午12:32:37</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 48</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g[<span class="number">6</span>][maxn] = {</span><br><span class="line">    <span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">44</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">47</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">39</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">36</span>,<span class="number">28</span>,<span class="number">34</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">10</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">15</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">29</span>,<span class="number">43</span>,<span class="number">27</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">24</span>,</span><br><span class="line">    <span class="number">37</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">38</span>,<span class="number">4</span>,<span class="number">39</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">14</span>,<span class="number">9</span>,<span class="number">15</span>,<span class="number">12</span>,<span class="number">10</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">40</span>,<span class="number">19</span>,<span class="number">41</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">42</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">18</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,</span><br><span class="line">    <span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">37</span>,<span class="number">35</span>,<span class="number">32</span>,<span class="number">38</span>,<span class="number">33</span>,<span class="number">39</span>,<span class="number">36</span>,<span class="number">34</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">45</span>,<span class="number">46</span>,<span class="number">47</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">32</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">37</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">19</span>,<span class="number">16</span>,<span class="number">22</span>,<span class="number">17</span>,<span class="number">23</span>,<span class="number">20</span>,<span class="number">18</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">45</span>,<span class="number">27</span>,<span class="number">43</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">31</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">26</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">8</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">11</span>,<span class="number">44</span>,<span class="number">13</span>,<span class="number">46</span>,<span class="number">47</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">47</span>,<span class="number">3</span>,<span class="number">46</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">45</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">34</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">33</span>,<span class="number">20</span>,<span class="number">32</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">29</span>,<span class="number">27</span>,<span class="number">24</span>,<span class="number">30</span>,<span class="number">25</span>,<span class="number">31</span>,<span class="number">28</span>,<span class="number">26</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">40</span>,<span class="number">41</span>,<span class="number">42</span>,<span class="number">43</span>,<span class="number">44</span>,<span class="number">16</span>,<span class="number">19</span>,<span class="number">21</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">26</span>,<span class="number">27</span>,<span class="number">28</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">32</span>,<span class="number">33</span>,<span class="number">34</span>,<span class="number">35</span>,<span class="number">36</span>,<span class="number">37</span>,<span class="number">38</span>,<span class="number">39</span>,<span class="number">45</span>,<span class="number">43</span>,<span class="number">40</span>,<span class="number">46</span>,<span class="number">41</span>,<span class="number">47</span>,<span class="number">44</span>,<span class="number">42</span>,</span><br><span class="line">};</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> s[maxn], t[maxn], v[maxn];</span><br><span class="line"><span class="keyword">int</span> *p = s, *q = t;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trans</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> func[])</span> </span>{</span><br><span class="line">  rep(i, <span class="number">0</span>, maxn) q[i] = p[func[i]];</span><br><span class="line">  swap(p, q);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> x)</span> </span>{</span><br><span class="line">  v[i] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (p[i] == x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> dfs(p[i], x) + <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    rep(i, <span class="number">0</span>, maxn) p[i] = i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span>* ch = c; *ch; ++ch) {</span><br><span class="line">      <span class="keyword">int</span> type, time = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">switch</span> (*ch) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'U'</span> : type = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'R'</span> : type = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'F'</span> : type = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'D'</span> : type = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'L'</span> : type = <span class="number">4</span>; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'B'</span> : type = <span class="number">5</span>; <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">switch</span> (*(ch + <span class="number">1</span>)) {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'\''</span> : time += <span class="number">2</span>; ++ch; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'2'</span> :  time += <span class="number">1</span>; ++ch; <span class="keyword">break</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> (time--) trans(g[type]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, maxn) v[i] = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, maxn) <span class="keyword">if</span> (!v[i]) {</span><br><span class="line">      <span class="keyword">int</span> x = dfs(i, i);</span><br><span class="line">      <span class="keyword">if</span> (x == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">      ans = ans / __gcd(ans, x) * x;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n%d\n"</span>, ++__, ans);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1006-_矩形面积_(hdu5251)">1006. 矩形面积 (hdu5251)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5251" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5251</a></p>
<h3 id="解題報告-5">解題報告</h3><p>最小包圍矩形。</p>
<h3 id="樣例代碼-5">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1006</span><a href="/code/hdu/hdu5251.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_algo.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;geometry.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5251.cpp</span><br><span class="line"> *  Date : 2015年9月24日 下午3:19:01</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> csl::point;</span><br><span class="line"><span class="keyword">using</span> csl::line;</span><br><span class="line"><span class="keyword">using</span> csl::sgn;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line">point p[maxn*<span class="number">4</span>], q[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _, __ = <span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, <span class="number">0</span>, n &lt;&lt; <span class="number">2</span>) <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt; g = csl::graham(p, n &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> m = g.size(); g.push_back(g[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">double</span> ans = csl::bound_rect(g.data(), m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n%.0f\n"</span>, ++__, ans);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引言">引言</h2><p>在一直沒有寫出能正常運行的平衡樹模板，這個坑拖了很久（然而是取巧的）。<br>還有一個就是魔方，之前打了27的表發現還要考慮色向和，怎麼都wa簡直崩潰。</p>]]>
    
    </summary>
    
      <category term="百度之星" scheme="http://fateud.com/tags/%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
      <category term="網絡賽" scheme="http://fateud.com/tags/%E7%B6%B2%E7%B5%A1%E8%B3%BD/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[代码模板（长期更新）]]></title>
    <link href="http://fateud.com/code-template/"/>
    <id>http://fateud.com/code-template/</id>
    <published>2015-09-21T08:18:41.049Z</published>
    <updated>2015-09-21T08:18:41.049Z</updated>
    <content type="html"><![CDATA[<p>不管你信不信，反正这个页面是炸了。<br>如果不及时补上，会产生一片虚空，继而演变成黑洞。<br>然后像抽水马桶一样，把整个博客吸进去。</p>
<a id="more"></a>
<h2 id="使用方法">使用方法</h2><p>$Github$上有<a href="https://github.com/ChouUn/CodeWorld/tree/master/Template_Release" target="_blank" rel="external">Release</a>和<a href="https://github.com/ChouUn/CodeWorld/tree/master/Template_Debug" target="_blank" rel="external">Debug</a>两种版本。作为头文件使用的，建议下载<a href="https://github.com/ChouUn/CodeWorld/tree/master/Template_Release" target="_blank" rel="external">Release</a>版本。</p>
<p>平时写代码的时候，可以通过<code>#include &lt;...&gt;</code>的方式，来调用这些功能。提交的时候，把这些文件的所有内容全选，然后替换掉include语句即可。因为我使用了<code>ifndef</code>进行检测，不会出现<code>multi-define</code>之类的蠢事，可以安心食用。</p>
<ul>
<li>Dev-Cpp x64<br>可以放入<code>Dev-Cpp\MinGW64\lib\gcc\x86_64-w64-mingw32\4.8.1\include\c++</code></li>
<li>MinGW<br>丢进<code>MinGW\mingw32\lib\gcc\mingw32\4.8.1\include\c++</code>里</li>
<li>Eclipse 用户<ol>
<li>新建一个<code>C++ Project</code></li>
<li>在其中新建一个<code>Source Folder</code></li>
<li>工程上右键<code>Properties -&gt; C/C++ General -&gt; Paths and Symbols</code>,</li>
<li>点击<code>Includes 选项卡</code>，在<code>GNU C++</code>中点<code>Add</code></li>
<li><code>Directory</code>填<code>/工程名/文件夹名</code></li>
<li>勾上<code>Is a workspace path</code>，按OK即可</li>
</ol>
</li>
<li>其他用户<br>你可以直接copy代码进去，其实姿势无甚影响。</li>
</ul>
<p>ps. 不同版本的文件夹会有些许差异<br>pss. 建议以后写程序一直用这个工程，方便你管理源码，一如<a href="https://github.com/ChouUn/CodeWorld/" target="_blank" rel="external">CodeWorld</a>。</p>
<h2 id="更新日志">更新日志</h2><p>20150912: 添加了matrix.h<br>20150911: 添加了anti-stackoverflow.h，解决了g++爆栈问题<br>20150904: 修改了sparse的运行机制，添加了两个二元运算符<br>20150822: 添加了discrete离散化模块<br>20150821: 添加了csl_algo中的euler函数<br>20150820: 删除了csl_math中的冗余内容<br><del>20150815: 你以为我真的会写？</del><br><del>20150503: 今后代码将直接与GitHub同步</del><br>20150503: 更新了bigint.h、fenwick.h<br>20150428: 更新了csl_math.h<br>20150427: 更新了csl_std.h</p>
<h2 id="通用文件头">通用文件头</h2><h3 id="纸农の标准库">纸农の标准库</h3><figure class="highlight cpp"><figcaption><span>csl_std_intro.cpp</span><a href="/code/Template_Release/csl_std_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150808L</span><br><span class="line"> *</span><br><span class="line"> *  直接把csl_std.h的内容作为.cpp文件生成的模板</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_std.h</span><a href="/code/Template_Release/csl_std.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : ChouUn's Standard Library 纸农の标准库</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_STD_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_STD_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_STD_H_VERSION 20150930L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> _USE_MATH_DEFINES</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span>          ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;   vi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;vi&gt;    vvi;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ll&gt;    vll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pii&gt;   vpii;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uin</span><span class="params">(_Tp &amp;a, _Tp b)</span> </span>{ <span class="keyword">return</span> a &gt; b ? (a = b, <span class="keyword">true</span>) : <span class="keyword">false</span>; }</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> _Tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">uax</span><span class="params">(_Tp &amp;a, _Tp b)</span> </span>{ <span class="keyword">return</span> a &lt; b ? (a = b, <span class="keyword">true</span>) : <span class="keyword">false</span>; }</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rep(i,a,n)  for (int i = (a); i &lt; (n); ++i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> rrep(i,a,n) for (int i = (n) - 1; i &gt;= (a); --i)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_STD_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="数学计算">数学计算</h3><figure class="highlight cpp"><figcaption><span>csl_math_intro.cpp</span><a href="/code/Template_Release/csl_math_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20151008L</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  gcd(_Tp a, _Tp b) : _Tp</span><br><span class="line"> *    返回 a 和 b 的最大公约数</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  gcd(_Tp a, _Tp b, _Tp&amp; x, _Tp&amp; y) : _Tp</span><br><span class="line"> *    返回 a 和 b 的最大公约数, 且满足 ax + by = 1</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  lcm(_Tp a, _Tp b) : _Tp</span><br><span class="line"> *    返回 a 和 b 的最小公倍数</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Key&gt;</span><br><span class="line"> *  pow(_Tp c, _Tp n, _Key k) : _Tp</span><br><span class="line"> *    返回 c * (n ^ k)</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Key&gt;</span><br><span class="line"> *  pow(_Tp c, _Tp n, _Key k, _Tp m) : _Tp</span><br><span class="line"> *    返回 c * (n ^ k) % m</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  inv(_Tp x, _Tp m) : _Tp</span><br><span class="line"> *    返回 x 对于模数 m 的逆元, m 是质数</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_math.h</span><a href="/code/Template_Release/csl_math.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Mathematical Computation 数学计算</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_MATH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_MATH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_MATH_H_VERSION 20151008L</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp a, _Tp b)</span></span><br><span class="line">  </span>{ <span class="keyword">while</span> (b) { _Tp t = a%b; a=b; b=t; } <span class="keyword">return</span> a; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  _<span class="function">Tp <span class="title">gcd</span><span class="params">(_Tp a, _Tp b, _Tp&amp; x, _Tp&amp; y)</span></span><br><span class="line">  </span>{ <span class="keyword">if</span> (b) { _Tp r=gcd(b,a%b,y,x); <span class="keyword">return</span> y=y-a/b*x,r; } <span class="keyword">return</span> x=<span class="number">1</span>,y=<span class="number">0</span>,a; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Tp <span class="title">lcm</span><span class="params">(_Tp a, _Tp b)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> a / gcd(a,b) * b; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Mod,</span><br><span class="line">            <span class="keyword">typename</span> _Op1, <span class="keyword">typename</span> _Op2&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">dnc</span><span class="params">(_Val c, _Val n, _Key k, <span class="keyword">const</span> _Mod m,</span><br><span class="line">                  <span class="keyword">const</span> _Op1&amp; op1, <span class="keyword">const</span> _Op2&amp; op2)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (n=op2(n,m);k;n=op2(op1(n,n),m),k&gt;&gt;=<span class="number">1</span>) <span class="keyword">if</span> (k&amp;<span class="number">1</span>) c=op2(op1(c,n),m);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _Key, <span class="keyword">typename</span> _Op&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">dnc</span><span class="params">(_Val c, _Val n, _Key k, <span class="keyword">const</span> _Op&amp; op)</span></span><br><span class="line">  </span>{ <span class="keyword">for</span> (;k;n=op(n,n),k&gt;&gt;=<span class="number">1</span>) <span class="keyword">if</span> (k&amp;<span class="number">1</span>) c=op(c,n); <span class="keyword">return</span> c; }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">mul</span><span class="params">(_Val a, _Val b, <span class="keyword">const</span> _Val m)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> dnc(_Val(),a,b,m,<span class="built_in">std</span>::plus&lt;_Val&gt;(),<span class="built_in">std</span>::modulus&lt;_Val&gt;()); }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _Key&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">pow</span><span class="params">(_Val c, _Val n, <span class="keyword">const</span> _Key k)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> dnc(c,n,k,<span class="built_in">std</span>::multiplies&lt;_Val&gt;()); }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val, <span class="keyword">typename</span> _Key&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">pow</span><span class="params">(_Val c, _Val n, _Key k, <span class="keyword">const</span> _Val m)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> dnc(c,n,k,m,<span class="built_in">std</span>::multiplies&lt;_Val&gt;(),<span class="built_in">std</span>::modulus&lt;_Val&gt;()); }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Val&gt;</span><br><span class="line">  <span class="keyword">inline</span> _<span class="function">Val <span class="title">inv</span><span class="params">(_Val x, <span class="keyword">const</span> _Val m)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> <span class="built_in">pow</span>(_Val(<span class="number">1</span>),x,m-<span class="number">2</span>,m); }</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_MATH_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="算法">算法</h3><figure class="highlight cpp"><figcaption><span>csl_algo_intro.cpp</span><a href="/code/Template_Release/csl_algo_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150917L</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  struct less : public std::binary_function&lt;_Tp, _Tp, _Tp&gt;</span><br><span class="line"> *    返回较小值</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp&gt;</span><br><span class="line"> *  struct greater : public std::binary_function&lt;_Tp, _Tp, _Tp&gt;</span><br><span class="line"> *    返回较大值</span><br><span class="line"> *</span><br><span class="line"> *  namespace euler</span><br><span class="line"> *    欧拉函数</span><br><span class="line"> *</span><br><span class="line"> *  euler::phi : std::vector&lt;int&gt;</span><br><span class="line"> *    获取欧拉函数</span><br><span class="line"> *</span><br><span class="line"> *  euler::div : std::vector&lt;int&gt;</span><br><span class="line"> *    获取最小因子</span><br><span class="line"> *</span><br><span class="line"> *  euler::prm : std::vector&lt;int&gt;</span><br><span class="line"> *    获得素数序列</span><br><span class="line"> *</span><br><span class="line"> *  euler::build(int __n) : void</span><br><span class="line"> *    欧拉筛法, [0,__n)</span><br><span class="line"> *    初始化欧拉函数/最小因子/素数序列</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Comp &gt;</span><br><span class="line"> *  isomorph_min(_Tp* data, std::size_t size, _Comp comp) : std::size_t</span><br><span class="line"> *    给定从 data 起长为 size 循环两次的序列，求其最大/小同构中最小的下标</span><br><span class="line"> *</span><br><span class="line"> *  template &lt;typename _Tp, typename _Comp &gt;</span><br><span class="line"> *  isomorph_max(_Tp* data, std::size_t size, _Comp comp) : std::size_t</span><br><span class="line"> *    给定从 data 起长为 size 循环两次的序列，求其最大/小同构中最大的下标</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>csl_algo.h</span><a href="/code/Template_Release/csl_algo.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Algorithm 算法</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_ALGO_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_ALGO_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CSL_ALGO_H_VERSION 20150917L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;functional&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">double</span> M_EPS = <span class="number">1e-8</span>;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> __x)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> <span class="built_in">fabs</span>(__x) &lt; M_EPS ? <span class="number">0</span> : (__x &lt; <span class="number">0</span> ? -<span class="number">1</span> : <span class="number">1</span>); }</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span><br><span class="line">  </span>{ <span class="keyword">return</span> sgn(a - b); }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> less : <span class="keyword">public</span> <span class="built_in">std</span>::binary_function&lt;_Tp, _Tp, _Tp&gt; {</span><br><span class="line">    _<span class="function">Tp <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> __x &lt; __y ? __x : __y; }</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> greater : <span class="keyword">public</span> <span class="built_in">std</span>::binary_function&lt;_Tp, _Tp, _Tp&gt; {</span><br><span class="line">    _<span class="function">Tp <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> _Tp&amp; __x, <span class="keyword">const</span> _Tp&amp; __y)</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> __x &gt; __y ? __x : __y; }</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">namespace</span> prime {</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; phi, mu, div, prm;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="built_in">std</span>::size_t __n)</span> </span>{</span><br><span class="line">      phi.assign(__n, <span class="number">0</span>); mu.assign(__n, <span class="number">0</span>); div.assign(__n, <span class="number">0</span>);</span><br><span class="line">      prm.reserve(__n &gt;&gt; <span class="number">3</span>); prm.clear(); phi[<span class="number">1</span>] = <span class="number">1</span>; mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">2</span>; i &lt; __n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (!div[i]) phi[i]=i-<span class="number">1</span>,mu[i]=-<span class="number">1</span>,div[i]=i,prm.push_back(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> j = <span class="number">0</span>, m = prm.size(); j &lt; m; ++j) {</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">double</span>(i) * prm[j] &gt;= __n) <span class="keyword">break</span>;</span><br><span class="line">          div[i*prm[j]]=prm[j];</span><br><span class="line">          <span class="keyword">if</span> (i % prm[j] == <span class="number">0</span>)</span><br><span class="line">          { phi[i*prm[j]]=phi[i]*prm[j]; mu[i*prm[j]]=<span class="number">0</span>; <span class="keyword">break</span>; }</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          { phi[i*prm[j]]=phi[i]*(prm[j]-<span class="number">1</span>); mu[i*prm[j]]=-mu[i]; }</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  } <span class="comment">// namespace prime</span></span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Comp &gt;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> isomorph_min(_Tp* data, <span class="built_in">std</span>::<span class="keyword">size_t</span> size, _Comp comp) {</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> k; i &lt; size &amp;&amp; j &lt; size;) {</span><br><span class="line">      <span class="keyword">for</span> (k = <span class="number">0</span>; data[i+k] == data[j+k] &amp;&amp; k &lt; size; ++k);</span><br><span class="line">      <span class="keyword">if</span> (k == size) <span class="keyword">return</span> i;</span><br><span class="line">      <span class="keyword">if</span> (!comp(data[i+k], data[j+k])) <span class="built_in">std</span>::swap(i, j);</span><br><span class="line">      j = <span class="built_in">std</span>::max(j + k + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Comp &gt;</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> isomorph_max(_Tp* data, <span class="built_in">std</span>::<span class="keyword">size_t</span> size, _Comp comp) {</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> i = <span class="number">0</span>, j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">std</span>::<span class="keyword">size_t</span> k; i &lt; size &amp;&amp; j &lt; size;) {</span><br><span class="line">      <span class="keyword">for</span> (k = <span class="number">0</span>; data[i+k] == data[j+k] &amp;&amp; k &lt; size; ++k);</span><br><span class="line">      <span class="keyword">if</span> (k == size) i = <span class="built_in">std</span>::max(i, j), j = i + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">if</span> (!comp(data[i+k], data[j+k])) <span class="built_in">std</span>::swap(i, j);</span><br><span class="line">        j = <span class="built_in">std</span>::max(j + k + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  }</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* CSL_ALGO_H_ */</span></span><br></pre></td></tr></table></figure>
<h2 id="存储结构">存储结构</h2><h3 id="前向链表">前向链表</h3><p>挖坑重写</p>
<h2 id="统计结构">统计结构</h2><h3 id="树状数组">树状数组</h3><figure class="highlight cpp"><figcaption><span>fenwick_intro.cpp</span><a href="/code/Template_Release/fenwick_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150823L</span><br><span class="line"> *</span><br><span class="line"> *  struct fenwick_tree</span><br><span class="line"> *</span><br><span class="line"> *  模板参数：</span><br><span class="line"> *  fenwick_tree &lt; _Tp, _Op = std::plus&lt;_Tp&gt; &gt;</span><br><span class="line"> *    _Tp : 限定元素类型</span><br><span class="line"> *    _Op : 限定元素运算</span><br><span class="line"> *</span><br><span class="line"> *  成员变量：</span><br><span class="line"> *  m_data : std::vector&lt;_Tp&gt;</span><br><span class="line"> *    存储空间</span><br><span class="line"> *  m_func : _Op</span><br><span class="line"> *    运算仿函数</span><br><span class="line"> *</span><br><span class="line"> *  职能：</span><br><span class="line"> *  build(value_type* p_data, size_type p_size) : void</span><br><span class="line"> *    以p_data为源数据地址, p_size为元素数量, 建立树状数组</span><br><span class="line"> *</span><br><span class="line"> *  build(size_type p_size) : void</span><br><span class="line"> *    以p_size为元素数量, 建立空树状数组</span><br><span class="line"> *</span><br><span class="line"> *  元素访问：</span><br><span class="line"> *  query(size_type __x, value_type __res = value_type()) : value_type</span><br><span class="line"> *    获得前__x个元素的统计, 以__res为底</span><br><span class="line"> *</span><br><span class="line"> *  修改符：</span><br><span class="line"> *  update(size_type __x, value_type __v) : void</span><br><span class="line"> *    第__x个元素的值修改__v</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>fenwick.h</span><a href="/code/Template_Release/fenwick.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Fenwick Tree 树状数组</span></span><br><span class="line"><span class="comment">// AKA : Binary Indexed Tree 二分索引树</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef FENWICK_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FENWICK_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FENWICK_H_VERSION 20150928L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;functional&gt;</span></span><br><span class="line"><span class="preprocessor">#ifndef lowbit</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> lowbit(x) ((x)&amp;-(x))</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt; <span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Op = <span class="built_in">std</span>::plus&lt;_Tp&gt; &gt;</span><br><span class="line">  <span class="keyword">struct</span> <span class="keyword">fenwick_t</span>ree {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp         <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="keyword">fenwick_t</span>ree() : m_func() { }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(size_type p_size)</span></span><br><span class="line">    </span>{ m_data.assign(p_size + <span class="number">1</span>, <span class="number">0</span>); }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> value_type* p_data, size_type p_size)</span> </span>{</span><br><span class="line">      m_data.resize(p_size + <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= p_size; ++i) m_data[i] = p_data[i-<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= p_size; ++i)</span><br><span class="line">        <span class="keyword">if</span> ((j = i + lowbit(i)) &lt;= p_size)</span><br><span class="line">          m_data[j] = m_func(m_data[j], m_data[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">size_t</span><span class="function">ype <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_data.size(); }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">query</span><span class="params">(size_type __x, value_type __res = value_type()</span>)  <span class="keyword">const</span> </span>{</span><br><span class="line">      <span class="keyword">for</span> (; __x &gt; <span class="number">0</span>; __x -= lowbit(__x)) __res = m_func(__res, m_data[__x]);</span><br><span class="line">      <span class="keyword">return</span> __res;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(size_type __x, <span class="keyword">const</span> value_type&amp; __v)</span> </span>{</span><br><span class="line">      <span class="keyword">for</span> (; __x &lt; m_data.size(); __x += lowbit(__x))</span><br><span class="line">        m_data[__x] = m_func(m_data[__x], __v);</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">value_t</span>ype&gt; m_data;</span><br><span class="line">    <span class="keyword">const</span> _Op               m_func;</span><br><span class="line">  };</span><br><span class="line">  <span class="built_in">std</span>::<span class="keyword">size_t</span> search(<span class="keyword">fenwick_t</span>ree&lt;<span class="keyword">int</span>&gt;&amp; f, <span class="keyword">int</span> x) {</span><br><span class="line">    <span class="keyword">if</span> (f.query(f.size() - <span class="number">1</span>) &lt; x) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="keyword">size_t</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; <span class="number">20</span>; i &gt; <span class="number">0</span> &amp;&amp; x &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span>) {</span><br><span class="line">      <span class="keyword">if</span> (res + i &gt;= f.size()) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (x &gt; f.m_data[res + i]) x -= f.m_data[res += i];</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res + <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* FENWICK_H_ */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>fenwick_exam.cpp</span><a href="/code/Template_Release/fenwick_exam.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fenwick.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : fenwick_exam.cpp</span><br><span class="line"> *  Date : 2015年5月5日 下午7:51:37</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  csl::<span class="keyword">fenwick_t</span>ree&lt;<span class="keyword">int</span>&gt; ft;</span><br><span class="line">  ft.build(<span class="number">6</span>);</span><br><span class="line">  ft.update(<span class="number">1</span>, +<span class="number">3</span>);     <span class="comment">// 第1个元素增加3 : +3 +0 +0 +0 +0 +0</span></span><br><span class="line">  ft.update(<span class="number">2</span>, -<span class="number">5</span>);     <span class="comment">// 第2个元素减少5 : +3 -5 +0 +0 +0 +0</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"sum of [1,2] = %d\n"</span>, ft.query(<span class="number">2</span>));</span><br><span class="line">  ft.update(<span class="number">6</span>, +<span class="number">1</span>);     <span class="comment">// 第6个元素增加1 : +0 +0 +0 +0 +0 +1</span></span><br><span class="line">  ft.update(<span class="number">2</span>, -<span class="number">4</span>);     <span class="comment">// 第2个元素减少4 : +0 -4 +0 +0 +0 +1</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"sum of [1,6] = %d\n"</span>, ft.query(<span class="number">6</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="线段树">线段树</h3><h3 id="稀疏表">稀疏表</h3><figure class="highlight cpp"><figcaption><span>sparse_intro.cpp</span><a href="/code/Template_Release/sparse_intro.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  20150904L</span><br><span class="line"> *</span><br><span class="line"> *  模板参数：</span><br><span class="line"> *  sparse_table &lt;_Tp, _Compare&gt;</span><br><span class="line"> *    _Tp : 限定元素类型</span><br><span class="line"> *    _Compare : 比较函数</span><br><span class="line"> *</span><br><span class="line"> *  成员变量：</span><br><span class="line"> *  m_data : vector&lt; vector&lt;_Tp&gt; &gt;</span><br><span class="line"> *    存储空间</span><br><span class="line"> *</span><br><span class="line"> *  m_comp : _Compare</span><br><span class="line"> *    比较函数实例</span><br><span class="line"> *</span><br><span class="line"> *  职能：</span><br><span class="line"> *  clear() : void</span><br><span class="line"> *    清空存储空间</span><br><span class="line"> *</span><br><span class="line"> *  元素访问：</span><br><span class="line"> *  query(size_t first, size_t last) const : _Tp</span><br><span class="line"> *    查询区间[first,last]的最值</span><br><span class="line"> *</span><br><span class="line"> *  修改符：</span><br><span class="line"> *  build(_Tp* p_data, size_t p_size) : void</span><br><span class="line"> *    以p_data为源数据地址, p_size为元素数量</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>sparse.h</span><a href="/code/Template_Release/sparse.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Sparse Table 稀疏表</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef SPARSE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SPARSE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SPARSE_H_VERSION 20150904L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#ifndef CSL_ALGO_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> message("need : csl_algo.h");</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_algo.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt; msb(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">msb_build</span><span class="params">(<span class="built_in">std</span>::size_t p_data)</span> </span>{</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">std</span>::<span class="keyword">size_t</span> i=msb.size(),t=msb[i-<span class="number">1</span>];i&lt;=p_data;++i)</span><br><span class="line">      msb.push_back(t+=!(i&amp;(i-<span class="number">1</span>)));</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp, <span class="keyword">typename</span> _Compare = csl::less&lt;_Tp&gt; &gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="keyword">sparse_t</span>able {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="keyword">sparse_t</span>able(<span class="keyword">const</span> _Compare&amp; p_comp=_Compare()) : m_data(), m_comp(p_comp) { }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span><br><span class="line">    </span>{ m_data.clear(); }</span><br><span class="line">    _<span class="function">Tp <span class="title">query</span><span class="params">(size_type first, size_type last)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">      <span class="keyword">size_t</span>ype k=msb[last-first+<span class="number">1</span>]; last=last+<span class="number">1</span>-(<span class="number">1</span>&lt;&lt;k);</span><br><span class="line">      <span class="keyword">return</span> m_comp(m_data[k][first], m_data[k][last]);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(_Tp* p_data, size_type p_size)</span> </span>{</span><br><span class="line">      msb_build(p_size); m_data.clear();</span><br><span class="line">      m_data.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp&gt;(p_data,p_data+p_size));</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype k=<span class="number">1</span>,d=<span class="number">2</span>,t=<span class="number">1</span>;d&lt;=p_size;++k,d&lt;&lt;=<span class="number">1</span>,t&lt;&lt;=<span class="number">1</span>) {</span><br><span class="line">        m_data.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp&gt;(p_size-d+<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i=<span class="number">0</span>,j=p_size+<span class="number">1</span>-d;i&lt;j;++i)</span><br><span class="line">          m_data[k][i]=m_comp(m_data[k-<span class="number">1</span>][i],m_data[k-<span class="number">1</span>][i+t]);</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp&gt; &gt; m_data; _Compare m_comp;</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* SPARSE_H_ */</span></span><br></pre></td></tr></table></figure>
<h2 id="数论">数论</h2><h3 id="矩阵">矩阵</h3>
<figure class="highlight cpp"><figcaption><span>matrix.h</span><a href="/code/Template_Release/matrix.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Matrix 矩阵</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef MATRIX_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MATRIX_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MATRIX_H_VERSION 20150912L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;ostream&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">class</span> matrix {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">typedef</span> _Tp  <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp&gt; container;</span><br><span class="line">    <span class="keyword">typedef</span> csl::matrix&lt;_Tp&gt; _Self;</span><br><span class="line">    matrix() : m_data(), m_h(), m_w() { }</span><br><span class="line">    matrix(<span class="keyword">const</span> _Self&amp; __x) { *<span class="keyword">this</span> = __x; }</span><br><span class="line">    matrix(<span class="keyword">size_t</span>ype __h, <span class="keyword">size_t</span>ype __w) : m_data(__h*__w), m_h(__h), m_w(__w) { }</span><br><span class="line">    <span class="keyword">static</span> _<span class="function">Self <span class="title">identity</span><span class="params">(size_type __n)</span> </span>{</span><br><span class="line">      _Self __res(__n, __n);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; __n; ++i) __res[i][i] = <span class="keyword">value_t</span>ype(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> __res;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">static</span> _<span class="function">Self <span class="title">identity</span><span class="params">(<span class="keyword">const</span> _Self&amp; __x)</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> identity(__x.height()); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_h; }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">width</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_w; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">value_t</span>ype* <span class="keyword">operator</span> [] (<span class="keyword">size_t</span>ype __x)</span><br><span class="line">    { <span class="keyword">return</span> &amp;m_data[__x * m_w]; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">value_t</span>ype* <span class="keyword">operator</span> [] (<span class="keyword">size_t</span>ype __x) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> &amp;m_data[__x * m_w]; }</span><br><span class="line">    _Self&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> _Self&amp; b) {</span><br><span class="line">      <span class="keyword">size_t</span>ype __n = height() * width();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; __n; ++i) m_data[i] += b.m_data[i];</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    _Self&amp; <span class="keyword">operator</span> *= (<span class="keyword">const</span> _Self&amp; b) {</span><br><span class="line">      <span class="keyword">size_t</span>ype n = height(), p = width(), m = b.width();</span><br><span class="line">      _<span class="function">Self <span class="title">c</span><span class="params">(n, m)</span></span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span>ype k = <span class="number">0</span>; k &lt; p; ++k) {</span><br><span class="line">          <span class="keyword">value_t</span>ype <span class="keyword">__t</span>mp = (*<span class="keyword">this</span>)[i][k]; <span class="keyword">if</span> (!<span class="keyword">__t</span>mp) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">size_t</span>ype j = <span class="number">0</span>; j &lt; m; ++j) c[i][j] += <span class="keyword">__t</span>mp * b[k][j];</span><br><span class="line">        }</span><br><span class="line">      <span class="built_in">std</span>::swap(m_data, c.m_data); m_h = c.m_h; m_w = c.m_w; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    _Self <span class="keyword">operator</span> + (<span class="keyword">const</span> _Self&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> _Self(*<span class="keyword">this</span>) += b; }</span><br><span class="line">    _Self <span class="keyword">operator</span> * (<span class="keyword">const</span> _Self&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> _Self(*<span class="keyword">this</span>) *= b; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="built_in">std</span>::ostream &amp;o, <span class="keyword">const</span> _Self&amp; a) {</span><br><span class="line">      <span class="keyword">size_t</span>ype n = a.height(), m = a.width();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; n; ++i) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span>ype j = <span class="number">0</span>; j &lt; m; ++j) o &lt;&lt; a.m_data[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        o &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> o;</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    container m_data; <span class="keyword">size_t</span>ype m_h, m_w;</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* MATRIX_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="高精度正整数">高精度正整数</h3><figure class="highlight cpp"><figcaption><span>bigint.h</span><a href="/code/Template_Release/bigint.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Big Positive Integer 高精度正整数</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef BIGINT_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BIGINT_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BIGNUM_H_VERSION 20150529L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iomanip&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> BIGINT_BIT     = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> BIGINT_BASE    = <span class="number">1e5</span>;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">int</span> _Sz&gt;</span><br><span class="line">  <span class="keyword">class</span> BigInt {</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="keyword">int</span> m_size, m_data[_Sz];</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    BigInt() : m_size(<span class="number">1</span>) { <span class="built_in">memset</span>(m_data, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(m_data)); }</span><br><span class="line">    BigInt(<span class="keyword">const</span> <span class="keyword">int</span> b) : m_size(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">memset</span>(m_data, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(m_data)); m_data[<span class="number">0</span>] = b;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">BigInt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *p)</span> </span>{</span><br><span class="line">      <span class="keyword">char</span> *s = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span> *&gt;(p), *t = s;</span><br><span class="line">      <span class="keyword">while</span> (*t) t++;</span><br><span class="line">      <span class="keyword">for</span> (m_data[m_size=<span class="number">0</span>] = <span class="number">0</span>; s &lt; t; ) {</span><br><span class="line">        m_data[m_size] = m_data[m_size] * <span class="number">10</span> + (*s++) - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span> ((t - s) % BIGINT_BIT == <span class="number">0</span>) m_data[++m_size] = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">std</span>::reverse(m_data, m_data + m_size);</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> BigInt&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      m_size = b.m_size;</span><br><span class="line">      <span class="built_in">memcpy</span>(m_data, b.m_data, m_size * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; i &lt; m_size || i &lt; b.m_size || c &gt; <span class="number">0</span>; i++) {</span><br><span class="line">        <span class="keyword">if</span> (i &lt; m_size) c += m_data[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.m_size) c += b.m_data[i];</span><br><span class="line">        m_data[i] = c % BIGINT_BASE, c /= BIGINT_BASE;</span><br><span class="line">      }</span><br><span class="line">      m_size = i;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_size; i++) {</span><br><span class="line">        m_data[i] -= c;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.m_size) m_data[i] -= b.m_data[i];</span><br><span class="line">        <span class="keyword">if</span> (m_data[i] &lt; <span class="number">0</span>) c = <span class="number">1</span>, m_data[i] += BIGINT_BASE; <span class="keyword">else</span> c = <span class="number">0</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> *= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      <span class="keyword">if</span> (!b.m_size) <span class="keyword">return</span> *<span class="keyword">this</span> = BigInt();</span><br><span class="line">      BigInt r;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m_size; i++) {</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.m_size || c &gt; <span class="number">0</span>; j++) {</span><br><span class="line">          <span class="keyword">if</span> (j &lt; b.m_size) c += (<span class="keyword">long</span> <span class="keyword">long</span>)m_data[i] * b.m_data[j];</span><br><span class="line">          <span class="keyword">if</span> (i + j &lt; r.m_size) c += r.m_data[i + j];</span><br><span class="line">          <span class="keyword">if</span> (i + j &gt;= r.m_size) r.m_data[r.m_size++] = c % BIGINT_BASE;</span><br><span class="line">          <span class="keyword">else</span> r.m_data[i + j] = c % BIGINT_BASE;</span><br><span class="line">          c /= BIGINT_BASE;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span> = r;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      BigInt r, c;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = m_size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        c = c * BIGINT_BASE + BigInt(m_data[i]);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = BIGINT_BASE - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (cmp(b * mid, c) &lt;= <span class="number">0</span>) left = mid; <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        r.m_data[i] = left, c = c - b * left;</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">memcpy</span>(m_data, r.m_data, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * m_size);</span><br><span class="line">      <span class="keyword">while</span> (m_size &gt; <span class="number">1</span> &amp;&amp; !m_data[m_size - <span class="number">1</span>]) m_size--;</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    }</span><br><span class="line">    BigInt&amp; <span class="keyword">operator</span> %= (<span class="keyword">const</span> BigInt&amp; b) {</span><br><span class="line">      BigInt r, c;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = m_size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) {</span><br><span class="line">        c = c * BIGINT_BASE + BigInt(m_data[i]);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = BIGINT_BASE - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">          <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span> (cmp(b * mid, c) &lt;= <span class="number">0</span>) left = mid; <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        r.m_data[i] = left, c = c - b * left;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span> = c;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> + (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) += b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> - (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) -= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> * (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) *= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> / (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) /= b; }</span><br><span class="line">    <span class="keyword">inline</span> BigInt <span class="keyword">operator</span> % (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> BigInt(*<span class="keyword">this</span>) %= b; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) == <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) != <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &lt;= <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &gt;= <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &lt; <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> BigInt&amp; b) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> cmp(*<span class="keyword">this</span>, b) &gt; <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::istream&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="built_in">std</span>::istream &amp;i, BigInt&amp; n)</span><br><span class="line">    { <span class="built_in">std</span>::<span class="built_in">string</span> s; i &gt;&gt; s; n = BigInt(s.c_str()); <span class="keyword">return</span> i; }</span><br><span class="line">    <span class="keyword">friend</span> <span class="built_in">std</span>::ostream&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="built_in">std</span>::ostream &amp;o, <span class="keyword">const</span> BigInt&amp; n) {</span><br><span class="line">      o &lt;&lt; (n.m_size ? n.m_data[n.m_size - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = n.m_size - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        o &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">'0'</span>) &lt;&lt; <span class="built_in">std</span>::setw(BIGINT_BIT) &lt;&lt; n.m_data[i];</span><br><span class="line">      <span class="keyword">return</span> o &lt;&lt; <span class="built_in">std</span>::setfill(<span class="string">' '</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> BigInt&amp; a, <span class="keyword">const</span> BigInt&amp; b)</span> </span>{</span><br><span class="line">      <span class="keyword">if</span> (a.m_size ^ b.m_size) <span class="keyword">return</span> a.m_size &gt; b.m_size ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = a.m_size; i --&gt; <span class="number">0</span>;) <span class="keyword">if</span> (a.m_data[i] ^ b.m_data[i])</span><br><span class="line">        <span class="keyword">return</span> a.m_data[i] &gt; b.m_data[i] ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* BIGINT_H_ */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><figcaption><span>bigint_exam.cpp</span><a href="/code/Template_Release/bigint_exam.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *	Name : bigint_exam.cpp</span><br><span class="line"> *	Author : CHN.ChouUn</span><br><span class="line"> *	Date : 2015年5月5日 下午7:00:52</span><br><span class="line"> *	Copyright : www.fateud.com</span><br><span class="line"> *	Description : None</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;bigint.h&gt;</span></span><br><span class="line"><span class="comment">//@ Program Begin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; _;</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    csl::BigInt&lt;<span class="number">300</span>&gt; n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n % <span class="number">4</span> &gt; <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span> - <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (n / <span class="number">2</span> - <span class="number">1</span>) &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    <span class="keyword">if</span> (_) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="离散化">离散化</h3>
<figure class="highlight cpp"><figcaption><span>discrete.h</span><a href="/code/Template_Release/discrete.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Discretization 离散化</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef DISCRETE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> DISCRETE_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> DISCRETE_H_VERSION 20150926L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;algorithm&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> discrete {</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Tp&gt; m_data;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="built_in">std</span>::sort(m_data.begin(), m_data.end());</span><br><span class="line">      m_data.resize(<span class="built_in">std</span>::unique(m_data.begin(), m_data.end()) - m_data.begin());</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span><br><span class="line">    </span>{ m_data.clear(); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_data.size(); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reserve</span><span class="params">(size_type __n)</span></span><br><span class="line">    </span>{ m_data.reserve(__n); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">query</span><span class="params">(<span class="keyword">const</span> _Tp&amp; __x)</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> <span class="built_in">std</span>::lower_bound(m_data.begin(), m_data.end(), __x) - m_data.begin(); }</span><br><span class="line">    _Tp <span class="keyword">operator</span> [] (<span class="keyword">size_t</span>ype __x) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> m_data[__x]; }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(_Tp __x)</span></span><br><span class="line">    </span>{ m_data.push_back(__x); }</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _InputIterator&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(_InputIterator first, _InputIterator last)</span></span><br><span class="line">    </span>{ m_data.insert(m_data.end(), first, last); }</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* DISCRETE_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="欧拉筛法">欧拉筛法</h3><h3 id="快速数论变换">快速数论变换</h3><h2 id="图论">图论</h2><h3 id="前向星">前向星</h3><figure class="highlight cpp"><figcaption><span>graph.h</span><a href="/code/Template_Release/graph.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Graph 图论</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef GRAPH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> GRAPH_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> GRAPH_H_VERSION 20150911L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> _graph_node {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp         <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> _graph_node&lt;_Tp&gt; *_Link;</span><br><span class="line">    _graph_node()</span><br><span class="line">    : prev(), next(), from(), to(), data() { }</span><br><span class="line">    _graph_node(_Link a, _Link b, <span class="keyword">size_t</span>ype c, <span class="keyword">size_t</span>ype d, <span class="keyword">value_t</span>ype e)</span><br><span class="line">    : prev(a), next(b), from(c), to(d), data(e) { }</span><br><span class="line">    _Link prev, next; <span class="keyword">size_t</span>ype from, to; <span class="keyword">value_t</span>ype data;</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> graph {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp  <span class="keyword">value_t</span>ype, *pointer, &amp;reference;</span><br><span class="line">    <span class="keyword">typedef</span> _graph_node&lt;_Tp&gt;  _Node, *_Link, *iterator;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m_add_edge</span><span class="params">(size_type from, size_type to, <span class="keyword">const</span> value_type&amp; data)</span> </span>{</span><br><span class="line">      _Link node = m_data.data() + m_size++;</span><br><span class="line">      *node = _Node(<span class="number">0</span>, m_impl[from], from, to, data);</span><br><span class="line">      <span class="keyword">if</span> (m_impl[from]) m_impl[from]-&gt;prev = node; m_impl[from] = node;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">graph</span><span class="params">(size_type __v = 0, size_type __e = 0)</span> : <span class="title">m_size</span><span class="params">()</span></span><br><span class="line">    </span>{ m_impl.reserve(__v); m_data.reserve(__e); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(size_type __v, size_type __e)</span></span><br><span class="line">    </span>{ m_impl.assign(__v, _Link()); m_data.resize(__e); m_size = <span class="number">0</span>; }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_size; }</span><br><span class="line">    <span class="keyword">inline</span> _<span class="function">Link <span class="title">getHead</span><span class="params">(size_type __x)</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_impl[__x]; }</span><br><span class="line">    <span class="keyword">inline</span> _<span class="function">Link <span class="title">getEdge</span><span class="params">(size_type __x)</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_data.data() + __x; }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">getEdgeIndex</span><span class="params">(_Link __x)</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> __x - m_data.data(); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(size_type from, size_type to, <span class="keyword">const</span> value_type&amp; data)</span></span><br><span class="line">    </span>{ m_add_edge(from, to, data); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_double_edge</span><span class="params">(size_type from, size_type to, <span class="keyword">const</span> value_type&amp; data)</span></span><br><span class="line">    </span>{ m_add_edge(from, to, data); m_add_edge(to, from, data); }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_couple_edge</span><span class="params">(size_type from, size_type to, <span class="keyword">const</span> value_type&amp; data1,</span><br><span class="line">                                <span class="keyword">const</span> value_type&amp; data2 = value_type()</span>)</span><br><span class="line">    </span>{ m_add_edge(from, to, data1); m_add_edge(to, from, data2); }</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Link&gt; m_impl; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;_Node&gt; m_data; <span class="keyword">size_t</span>ype m_size;</span><br><span class="line">  };</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">struct</span> tarjan {</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> graph&lt;_Tp&gt;::_Link _Link;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    <span class="keyword">void</span> __scc(<span class="keyword">size_t</span>ype u) {</span><br><span class="line">      dfn[u] = low[u] = ++idx; vis[u] = <span class="keyword">true</span>; sta.push_back(u);</span><br><span class="line">      <span class="keyword">for</span> (_Link i = <span class="built_in">map</span>-&gt;getHead(u); i; i = i-&gt;next) {</span><br><span class="line">        <span class="keyword">size_t</span>ype v = i-&gt;to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) { __scc(v); <span class="keyword">if</span> (low[u] &gt; low[v]) low[u] = low[v]; }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vis[v] &amp;&amp; low[u] &gt; dfn[v]) low[u] = dfn[v];</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (dfn[u] == low[u]) {</span><br><span class="line">        <span class="keyword">size_t</span>ype w;</span><br><span class="line">        <span class="keyword">do</span> { w = sta.back(); sta.pop_back(); vis[w] = <span class="keyword">false</span>; key[w] = cnt; }</span><br><span class="line">        <span class="keyword">while</span> (w != u);</span><br><span class="line">        ++cnt;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">void</span> __dcc(<span class="keyword">size_t</span>ype u, <span class="keyword">size_t</span>ype p) {</span><br><span class="line">      dfn[u] = low[u] = ++idx; sta.push_back(u);</span><br><span class="line">      <span class="keyword">for</span> (_Link i = <span class="built_in">map</span>-&gt;getHead(u); i; i = i-&gt;next) {</span><br><span class="line">        <span class="keyword">size_t</span>ype v = i-&gt;to; <span class="keyword">if</span> (v == p) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v]) {</span><br><span class="line">          __dcc(v, u);</span><br><span class="line">          <span class="keyword">if</span> (low[u] &gt; low[v]) low[u] = low[v];</span><br><span class="line">          <span class="keyword">if</span> (dfn[u] &lt; low[v]) {</span><br><span class="line">            <span class="keyword">size_t</span>ype w;</span><br><span class="line">            <span class="keyword">do</span> { w = sta.back(); sta.pop_back(); key[w] = cnt; } <span class="keyword">while</span> (w != v);</span><br><span class="line">            cnt++;</span><br><span class="line">          }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (low[u] &gt; dfn[v]) low[u] = dfn[v];</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  <span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scc</span><span class="params">(graph&lt;_Tp&gt;&amp; __map)</span> </span>{</span><br><span class="line">      <span class="built_in">map</span> = &amp;__map; <span class="keyword">size_t</span>ype __n = <span class="built_in">map</span>-&gt;m_impl.size();</span><br><span class="line">      idx = <span class="number">0</span>; cnt = <span class="number">0</span>; sta.reserve(__n); dfn.assign(__n, <span class="number">0</span>);</span><br><span class="line">      low.resize(__n); key.resize(__n); vis.assign(__n, <span class="keyword">false</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; __n; ++i) <span class="keyword">if</span> (!dfn[i]) __scc(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dcc</span><span class="params">(graph&lt;_Tp&gt;&amp; __map)</span> </span>{</span><br><span class="line">      <span class="built_in">map</span> = &amp;__map; <span class="keyword">size_t</span>ype __n = <span class="built_in">map</span>-&gt;m_impl.size();</span><br><span class="line">      idx = <span class="number">0</span>; cnt = <span class="number">0</span>; sta.reserve(__n); dfn.assign(__n, <span class="number">0</span>);</span><br><span class="line">      low.resize(__n); key.resize(__n);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; __n; ++i) {</span><br><span class="line">        <span class="keyword">if</span> (dfn[i]) <span class="keyword">continue</span>; sta.clear(); __dcc(i, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">size_t</span>ype j = <span class="number">0</span>; j &lt; sta.size(); ++j) key[sta[j]] = cnt;</span><br><span class="line">        cnt++;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">size_t</span>ype <span class="keyword">operator</span> [] (<span class="keyword">const</span> <span class="keyword">size_t</span>ype __x) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> key[__x]; }</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> cnt; }</span><br><span class="line">  <span class="keyword">private</span> :</span><br><span class="line">    graph&lt;_Tp&gt;* <span class="built_in">map</span>; <span class="keyword">size_t</span>ype idx, cnt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>ype&gt; sta, dfn, low, key;</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* GRAPH_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="强联通分量">强联通分量</h3><h3 id="2-SAT">2-SAT</h3><h3 id="网络流">网络流</h3><h2 id="字符串">字符串</h2><h3 id="马拉车算法">马拉车算法</h3>
<figure class="highlight cpp"><figcaption><span>manacher.h</span><a href="/code/Template_Release/manacher.h">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Name : Manacher Algorithm 马拉车算法</span></span><br><span class="line"><span class="comment">// Copyright : fateud.com</span></span><br><span class="line"><span class="preprocessor">#ifndef MANACHER_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MANACHER_H_</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MANACHER_H_VERSION 20150814L</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"><span class="keyword">namespace</span> csl {</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp = <span class="keyword">char</span>, _Tp _FlagS = <span class="string">'@'</span>,</span><br><span class="line">      _Tp _FlagD = <span class="string">'#'</span>, _Tp _FlagT = <span class="string">'\0'</span>&gt;</span><br><span class="line">  <span class="keyword">struct</span> manacher {</span><br><span class="line">    <span class="keyword">typedef</span> _Tp         <span class="keyword">key_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>         <span class="keyword">value_t</span>ype;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">std</span>::<span class="keyword">size_t</span> <span class="keyword">size_t</span>ype;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">const</span> key_type* __src)</span></span><br><span class="line">    </span>{ generate(__src); calculate(); }</span><br><span class="line">    <span class="keyword">size_t</span><span class="function">ype <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> m_size - <span class="number">4</span>; }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">query</span><span class="params">()</span> <span class="keyword">const</span> </span>{</span><br><span class="line">      <span class="keyword">value_t</span>ype __res = <span class="keyword">value_t</span>ype();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; i &lt; m_size; ++i)</span><br><span class="line">        <span class="keyword">if</span> (m_data[i] &gt; __res) __res = m_data[i];</span><br><span class="line">      <span class="keyword">return</span> __res - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">value_t</span><span class="function">ype <span class="title">at</span><span class="params">(size_type __x)</span></span><br><span class="line">    </span>{ <span class="keyword">return</span> __x + <span class="number">2</span> &lt; m_size ? <span class="keyword">this</span>-&gt;<span class="keyword">operator</span>[](__x) : <span class="number">0</span>; }</span><br><span class="line">    <span class="keyword">value_t</span>ype <span class="keyword">operator</span> [] (<span class="keyword">size_t</span>ype __x) <span class="keyword">const</span></span><br><span class="line">    { <span class="keyword">return</span> m_data[__x + <span class="number">2</span>] - <span class="number">1</span>; }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generate</span><span class="params">(<span class="keyword">const</span> key_type* __src)</span> </span>{</span><br><span class="line">      m_dest.clear();</span><br><span class="line">      m_dest.push_back(_FlagS), m_dest.push_back(_FlagD);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">size_t</span>ype i = <span class="number">0</span>; __src[i] != _FlagT; i++)</span><br><span class="line">        m_dest.push_back(__src[i]), m_dest.push_back(_FlagD);</span><br><span class="line">      m_dest.push_back(_FlagT); m_size = m_dest.size();</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">()</span> </span>{</span><br><span class="line">      m_data.resize(m_size);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; m_size; ++i) {</span><br><span class="line">        <span class="keyword">register</span> <span class="keyword">int</span> k = (p &gt; i) ? <span class="built_in">std</span>::min(m_data[<span class="number">2</span>*j-i], p-i) : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m_dest[i+k] == m_dest[i-k]) ++k;</span><br><span class="line">        <span class="keyword">if</span> (k + i &gt; p) p = k + i, j = i; m_data[i] = k;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">key_t</span>ype&gt;   m_dest;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">value_t</span>ype&gt; m_data;</span><br><span class="line">    <span class="keyword">size_t</span>ype               m_size;</span><br><span class="line">  };</span><br><span class="line">} <span class="comment">// namespace csl</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> /* MANACHER_H_ */</span></span><br></pre></td></tr></table></figure>
<h3 id="AC自动机">AC自动机</h3><h3 id="后缀自动机">后缀自动机</h3><h2 id="其他">其他</h2><h3 id="珍爱生命，远离爆栈">珍爱生命，远离爆栈</h3><figure class="highlight cpp"><figcaption><span>anti-stackoverflow.cpp</span><a href="/code/Template_Release/anti-stackoverflow.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Anti Stack Overflow</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _size = <span class="number">16</span> &lt;&lt; <span class="number">20</span>; <span class="comment">// KB(&lt;&lt; 10), MB(&lt;&lt; 20).</span></span><br><span class="line">  <span class="keyword">char</span>* _data = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(_size) + _size;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __x86_64__ || __ppc64__ || _WIN64</span></span><br><span class="line">  __asm__ __volatile__(<span class="string">"movq %0,%%rsp\n pushq $_exit\n"</span>::<span class="string">"r"</span>(_data));</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span> <span class="comment">// 64-bit</span></span></span><br><span class="line">  __asm__ __volatile__(<span class="string">"movl %0,%%esp\n pushl $_exit\n"</span>::<span class="string">"r"</span>(_data));</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span> <span class="comment">// 32-bit</span></span></span><br><span class="line">  Main();</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>不管你信不信，反正这个页面是炸了。<br>如果不及时补上，会产生一片虚空，继而演变成黑洞。<br>然后像抽水马桶一样，把整个博客吸进去。</p>]]>
    
    </summary>
    
      <category term="bestcoder" scheme="http://fateud.com/tags/bestcoder/"/>
    
      <category term="codeforces" scheme="http://fateud.com/tags/codeforces/"/>
    
      <category term="template" scheme="http://fateud.com/tags/template/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 ACM/ICPC Asia Regional Changchun Online]]></title>
    <link href="http://fateud.com/icpc2015-ccol/"/>
    <id>http://fateud.com/icpc2015-ccol/</id>
    <published>2015-09-18T12:29:30.000Z</published>
    <updated>2015-09-19T17:18:33.408Z</updated>
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>すみません、すみません、すみません、<br>因爲我的愚蠢，坑了1010，最後才出6道。</p>
<a id="more"></a>
<h2 id="1001-_Alisha’s_Party_(hdu5437)">1001. Alisha’s Party (hdu5437)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5437" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5437</a></p>
<h3 id="中文題意">中文題意</h3><p>朋友來訪，室內空間有限，優先讓禮物貴重者進入。<br>有$k$個朋友依次前來，第$i$個叫$B_{i}$，帶了價值爲$v_{i}$的禮物。<br>開$m$次門，第$i$次開門在第$t_{i}$個朋友來時，放$p_{i}$個朋友入室。<br>有$q$次詢問，求第$n_{i}$個進入者的名字。</p>
<h3 id="解題報告">解題報告</h3><ol>
<li>切忌對整個結構體進行排序，可以對指針進行排序</li>
<li>用優先隊列維護$v_{i}$最高者</li>
</ol>
<h3 id="樣例代碼">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1001</span><a href="/code/hdu/hdu5437.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5437.cpp</span><br><span class="line"> *  Date : 2015年9月13日 下午3:47:00</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxk 150010</span></span><br><span class="line"><span class="keyword">struct</span> node {</span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">201</span>];</span><br><span class="line">  <span class="keyword">int</span> v;</span><br><span class="line">  <span class="keyword">int</span> w;</span><br><span class="line">};</span><br><span class="line">node a[maxk];</span><br><span class="line">pii c[maxk];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> cmp {</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(node* a, node* b)</span> <span class="keyword">const</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> a-&gt;v != b-&gt;v ? a-&gt;v &lt; b-&gt;v : a-&gt;w &gt; b-&gt;w;</span><br><span class="line">  }</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_); _; _--) {</span><br><span class="line">    <span class="keyword">int</span> k, m, q; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;m, &amp;q);</span><br><span class="line">    rep(i, <span class="number">0</span>, k) <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, a[i].s, &amp;a[i].v), a[i].w = i;</span><br><span class="line">    rep(i, <span class="number">0</span>, m) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c[i].first, &amp;c[i].second);</span><br><span class="line">    sort(c, c + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt; node*, <span class="built_in">vector</span>&lt;node*&gt;, cmp &gt; p;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node*&gt; ans; ans.reserve(k);</span><br><span class="line">    rep(i, <span class="number">0</span>, m) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = c[i].first; cur &lt; x; ++cur) p.push(a + cur);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> x = c[i].second; x &amp;&amp; !p.empty(); --x, p.pop())</span><br><span class="line">        ans.push_back(p.top());</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (; cur &lt; k; ++cur) p.push(a + cur);</span><br><span class="line">    <span class="keyword">for</span> (; !p.empty(); p.pop())</span><br><span class="line">      ans.push_back(p.top());</span><br><span class="line"></span><br><span class="line">    rep(i, <span class="number">0</span>, q) {</span><br><span class="line">      <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s%c"</span>, ans[x-<span class="number">1</span>]-&gt;s, i == q-<span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1002-_Ponds_(hdu5438)">1002. Ponds (hdu5438)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5438" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5438</a></p>
<h3 id="中文題意-1">中文題意</h3><p>一個無向圖有$p$個點，第$i$個點點權$v_{i}$；$m$條邊，第$i$條邊連接$a_{i}$和$b_{i}$。<br>刪除所有度小於$2$的點，求點個數爲奇數的聯通塊的所有點權之和。</p>
<h3 id="解題報告-1">解題報告</h3><ol>
<li>先進行拓撲刪點</li>
<li>然後遍歷所有聯通塊</li>
</ol>
<h3 id="樣例代碼-1">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1002</span><a href="/code/hdu/hdu5438.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;graph.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5438.cpp</span><br><span class="line"> *  Date : 2015年9月13日 下午7:32:30</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 10010</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxm 100010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> csl::graph&lt;<span class="keyword">bool</span>&gt; graph;</span><br><span class="line"><span class="keyword">typedef</span> csl::graph&lt;<span class="keyword">bool</span>&gt;::_Link edge;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>,ll&gt; node;</span><br><span class="line"></span><br><span class="line">graph g;</span><br><span class="line"><span class="keyword">int</span> n, m, a[maxn], b[maxm], c[maxm];</span><br><span class="line"><span class="keyword">int</span> d[maxn]; <span class="keyword">bool</span> e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  rep(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="keyword">if</span> (d[i] &lt;= <span class="number">1</span>) q.push(i);</span><br><span class="line">  <span class="keyword">while</span> (!q.empty()) {</span><br><span class="line">    <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">    <span class="keyword">if</span> (e[u]) <span class="keyword">continue</span>; e[u] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (d[u] != <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span> (edge i = g.getHead(u); i; i = i-&gt;next) {</span><br><span class="line">      <span class="keyword">int</span> v = i-&gt;to;</span><br><span class="line">      <span class="keyword">if</span> (e[v]) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> ((--d[v]) == <span class="number">1</span>) q.push(v);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">node <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>{</span><br><span class="line">  <span class="function">node <span class="title">res</span><span class="params">(1,a[u])</span></span>;</span><br><span class="line">  e[u] = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (edge i = g.getHead(u); i; i = i-&gt;next) {</span><br><span class="line">    <span class="keyword">int</span> v = i-&gt;to;</span><br><span class="line">    <span class="keyword">if</span> (e[v]) <span class="keyword">continue</span>;</span><br><span class="line">    node tmp = dfs(v);</span><br><span class="line">    res.first += tmp.first;</span><br><span class="line">    res.second += tmp.second;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line">    rep(i, <span class="number">0</span>, m) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, b+i, c+i);</span><br><span class="line"></span><br><span class="line">    g.build(n+<span class="number">1</span>, m&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    rep(i, <span class="number">1</span>, n+<span class="number">1</span>) d[i] = <span class="number">0</span>, e[i] = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, m) g.add_double_edge(b[i], c[i], <span class="keyword">true</span>), ++d[b[i]], ++d[c[i]];</span><br><span class="line"></span><br><span class="line">    bfs();</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="keyword">if</span> (!e[i]) {</span><br><span class="line">      node res = dfs(i);</span><br><span class="line">      <span class="keyword">if</span> (res.first &amp; <span class="number">1</span>) ans += res.second;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1003-_Aggregated_Counting_(hdu5439)">1003. Aggregated Counting (hdu5439)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5439" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5439</a></p>
<h3 id="中文題意-2">中文題意</h3><ol>
<li>先寫下數列1,2,2</li>
<li>第三個數是2，在末尾添加2個3</li>
<li>第四個數是3，在末尾添加3個4</li>
<li>第五個數是3，在末尾添加3個5</li>
<li>以此類推</li>
</ol>
<p>令$f_{n}$爲$n$出現最後的位置，$f_{2}=3$，$f_{3}=5$，$f_{4}=8$<br>給你一個$n$，求$f_{f_{n}} \bmod 1000000007$的值</p>
<h3 id="解題報告-2">解題報告</h3><ol>
<li>$a_{n}$爲1,2,2,3,3,4,4,4,5,5,5,6,6,6,6…</li>
<li>$f_{n}$爲1,3,5,8,11,15…顯然$f_{n} = \sum\limits_{i=1}^{n} a_{i}$</li>
<li>$f_{f_{n}}$爲1,5,11,23,38,62…$f_{f_{n}} = \sum\limits_{i=1}^{n} i * a_{i}$。具體證明略，自行參考<a href="http://bestcoder.hdu.edu.cn/blog/2015-acmicpc-asia-regional-changchun-online-solution-document/#comments" target="_blank" rel="external">Solution</a></li>
<li>對於$f_{f_{n}}$的公式，我們可以合併同類項，得$1*1+2*(2+3)+3*(4+5)+4*(6+7+8)+\dotsb$</li>
<li>得到這個規律，我們只要維護出$a_{n}$中連續$x$的區間，區間的長度可以通過查詢之前維護出的值得知。用二分查是$O(logn)$的效率，事實上這是單調的，$O(1)$就能維護出來。</li>
</ol>
<h3 id="樣例代碼-2">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1003</span><a href="/code/hdu/hdu5439.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_math.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5439.cpp</span><br><span class="line"> *  Date : 2015年9月13日 下午8:34:38</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxm 1000000000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 500010</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> mod 1000000007</span></span><br><span class="line">ll f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">  v.push_back(<span class="number">0</span>);</span><br><span class="line">  v.push_back(<span class="number">1</span>);</span><br><span class="line">  v.push_back(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>, s = <span class="number">3</span>, cur = <span class="number">2</span>; s &lt; maxm; ++i) {</span><br><span class="line">    <span class="keyword">if</span> (i &gt; v[cur]) ++cur;</span><br><span class="line">    v.push_back(s+=cur);</span><br><span class="line">  }</span><br><span class="line">  ll half = csl::<span class="built_in">pow</span>(<span class="number">1l</span>l, <span class="number">2l</span>l, mod-<span class="number">2</span>, (ll)mod);</span><br><span class="line">  rep(i, <span class="number">1</span>, (<span class="keyword">int</span>)v.size()) {</span><br><span class="line">    ll tmp = ll(v[i] - v[i-<span class="number">1</span>]) * (v[i] + v[i-<span class="number">1</span>] + <span class="number">1</span>) % mod * half % mod;</span><br><span class="line">    f[i] = (f[i-<span class="number">1</span>] + tmp * i) % mod;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> p = lower_bound(v.begin(), v.end(), n) - v.begin();</span><br><span class="line">    ll tmp = ll(n - v[p-<span class="number">1</span>]) * (n + v[p-<span class="number">1</span>] + <span class="number">1</span>) % mod * half % mod;</span><br><span class="line">    ll ans = (f[p-<span class="number">1</span>] + tmp * p) % mod;</span><br><span class="line">    <span class="built_in">printf</span>(i64 <span class="string">"\n"</span>, ans);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1005-_Travel_(hdu5441)">1005. Travel (hdu5441)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5441" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5441</a></p>
<h3 id="中文題意-3">中文題意</h3><p>一個無向圖有$n$個點，$m$條邊，第$i$條邊連接$a_{i}$和$b_{i}$，邊權爲$d_{i}$。<br>有$q$次詢問，給你一個整數$x$，求不存在邊權大於等於x的邊時，聯通的點對共有多少。</p>
<h3 id="解題報告-3">解題報告</h3><ol>
<li>先將邊按邊權排序，然後用並查集維護聯通塊內的點數。</li>
<li>每加一條邊，對兩端聯通塊進行一次“並”操作，且記錄當前答案。</li>
<li>對於每個查詢，用二分尋找邊權小於$x$且最大的邊，輸出對應的記錄。</li>
</ol>
<h3 id="樣例代碼-3">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1005</span><a href="/code/hdu/hdu5441.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5441.cpp</span><br><span class="line"> *  Date : 2015年9月13日 上午9:23:47</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 20010</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxm 100010</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxq 5010</span></span><br><span class="line"><span class="keyword">int</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxm],b[maxm],c[maxm],d[maxm],f[maxm];</span><br><span class="line"><span class="keyword">int</span> g[maxn],h[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> c[a] &lt; c[b];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> u)</span> </span>{</span><br><span class="line">  <span class="keyword">return</span> g[u] == u ? u : g[u] = root(g[u]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> ru = root(u);</span><br><span class="line">  <span class="keyword">int</span> rv = root(v);</span><br><span class="line">  <span class="keyword">if</span> (ru == rv) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> ret = s[h[ru]] + s[h[rv]];</span><br><span class="line">  g[rv] = ru;</span><br><span class="line">  h[ru] += h[rv];</span><br><span class="line">  <span class="keyword">return</span> s[h[ru]] - ret;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  rep(i, <span class="number">1</span>, maxn) s[i] = i * (i-<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> _;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_); _; _--) {</span><br><span class="line">	<span class="keyword">int</span> n, m, q; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line">	rep(i, <span class="number">0</span>, m) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, a+i, b+i, c+i), d[i]=i;</span><br><span class="line">	sort(d, d+m, cmp);</span><br><span class="line"></span><br><span class="line">	rep(i, <span class="number">1</span>, n+<span class="number">1</span>) g[i]=i, h[i]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	rep(i, <span class="number">0</span>, m) {</span><br><span class="line">	  <span class="keyword">int</span> j = d[i];</span><br><span class="line">	  f[j] = (cnt += merge(a[j],b[j]));</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	rep(i, <span class="number">0</span>, q) {</span><br><span class="line">	  <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">	  <span class="keyword">int</span> l = <span class="number">0</span>, r = m-<span class="number">1</span>;</span><br><span class="line">	  <span class="keyword">while</span> (l &lt; r) {</span><br><span class="line">	    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">if</span> (c[d[m]] &lt;= x) l = m+<span class="number">1</span>;</span><br><span class="line">	    <span class="keyword">else</span> r = m;</span><br><span class="line">	  }</span><br><span class="line">	  <span class="keyword">if</span> (l &amp;&amp; c[d[l]] &gt; x) --l;</span><br><span class="line">	  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c[d[l]] &lt;= x ? f[d[l]] &lt;&lt; <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">	}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1006-_Favorite_Donut_(hdu5442)">1006. Favorite Donut (hdu5442)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5442" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5442</a></p>
<h3 id="中文題意-4">中文題意</h3><p>給你一個長度爲$n$的字符串，求串的正反循環的所有同構中，字典序最大的下標和方向。<br>如果字典序相同，輸出下標最小的；如果下標相同，輸出方向爲正的。</p>
<h3 id="解題報告-4">解題報告</h3><p>算法一：</p>
<ol>
<li>求正串的最小表示法中下標最小的解</li>
<li>求反串的最小表示法中下標最大的解</li>
<li>運算出兩解在原串中的下標，進行比較</li>
<li>因爲沒有極端數據，所以第二步不會達到$O(n^2)$</li>
</ol>
<p>算法二：<br>後綴數組搞一搞</p>
<h3 id="樣例代碼-4">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1006</span><a href="/code/hdu/hdu5442.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_algo.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5442.cpp</span><br><span class="line"> *  Date : 2015年9月17日 上午11:47:07</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 20010</span></span><br><span class="line"><span class="keyword">char</span> s[maxn], t1[maxn*<span class="number">2</span>], t2[maxn*<span class="number">2</span>];</span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line"></span><br><span class="line">    rep(i, <span class="number">0</span>, n) t1[i] = t1[n+i] = s[i];</span><br><span class="line">    rep(i, <span class="number">0</span>, n) t2[i] = t2[n+i] = s[n-<span class="number">1</span>-i];</span><br><span class="line">    t1[<span class="number">2</span>*n] = <span class="number">0</span>, t2[<span class="number">2</span>*n] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> x = csl::isomorph_min(t1, n, <span class="built_in">std</span>::greater&lt;<span class="keyword">char</span>&gt;());</span><br><span class="line">    <span class="keyword">int</span> y = csl::isomorph_max(t2, n, <span class="built_in">std</span>::greater&lt;<span class="keyword">char</span>&gt;());</span><br><span class="line">    t1[x+n] = <span class="number">0</span>, t2[y+n] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans1 = x + <span class="number">1</span>, ans2 = n - y;</span><br><span class="line">    <span class="keyword">int</span> z = <span class="built_in">strcmp</span>(t1+x, t2+y);</span><br><span class="line">    <span class="keyword">if</span> (z)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, z &gt; <span class="number">0</span> ? ans1 : ans2, z &lt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, min(ans1,ans2), ans1 &gt; ans2);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1007-_The_Water_Problem_(hdu5443)">1007. The Water Problem (hdu5443)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5443" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5443</a></p>
<h3 id="中文題意-5">中文題意</h3><p>給你一個長度爲$n$的序列，進行$q$次詢問，求區間$[l,r]$內最大值。</p>
<h3 id="解題報告-5">解題報告</h3><p>直接把$Sparse Table$往上一套，聽說暴力也能過。</p>
<h3 id="樣例代碼-5">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1007</span><a href="/code/hdu/hdu5443.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;sparse.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5443.cpp</span><br><span class="line"> *  Date : 2015年9月13日 上午9:01:38</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _;</span><br><span class="line">  <span class="comment">//for (; scanf("%d", &amp;_) != EOF; ) {</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_); _; _--) {</span><br><span class="line">    <span class="comment">//printf("Case #%d:\n", ++__);</span></span><br><span class="line">	<span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	rep(i, <span class="number">0</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a+i);</span><br><span class="line"></span><br><span class="line">	csl::<span class="keyword">sparse_t</span>able&lt;<span class="keyword">int</span>, csl::greater&lt;<span class="keyword">int</span>&gt; &gt; s;</span><br><span class="line">	s.build(a, n);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> m; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">	rep(i, <span class="number">0</span>, m) {</span><br><span class="line">	  <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">	  <span class="keyword">int</span> z = s.query(x - <span class="number">1</span>, y - <span class="number">1</span>);</span><br><span class="line">	  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, z);</span><br><span class="line">	}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1008-_Elven_Postman_(hdu5444)">1008. Elven Postman (hdu5444)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5444" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5444</a></p>
<h3 id="中文題意-6">中文題意</h3><p>一棵$n$個節點的二叉樹，從右往左編號爲$1 \dotsb n$，按高度從小到大告訴你節點的編號。<br>有$q$次詢問，求點$x_{i}$應該如何到達。</p>
<h3 id="解題報告-6">解題報告</h3><p>區間內，根爲高度最低的節點，然後同理劃分左右子樹。<br>然後類似於二分搜索樹的思路，找到詢問的節點即可。</p>
<h3 id="樣例代碼-6">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1008</span><a href="/code/hdu/hdu5444.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5444.cpp</span><br><span class="line"> *  Date : 2015年9月18日 下午4:20:29</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 1010</span></span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> x = l;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++i)</span><br><span class="line">    <span class="keyword">if</span> (a[i] &lt; a[x]) x = i;</span><br><span class="line">  b[x] = dfs(l, x - <span class="number">1</span>);</span><br><span class="line">  c[x] = dfs(x + <span class="number">1</span>, r);</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, <span class="number">0</span>, n) {</span><br><span class="line">      <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">      a[x] = i + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">int</span> r = dfs(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span> (q--) {</span><br><span class="line">      <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">      <span class="keyword">int</span> t = r;</span><br><span class="line">      <span class="keyword">while</span> (t != x) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, t &gt; x ? <span class="string">'E'</span> : <span class="string">'W'</span>);</span><br><span class="line">        t = (t &gt; x) ? b[t] : c[t];</span><br><span class="line">      }</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="1010-_Unknown_Treasure_(hdu5446)">1010. Unknown Treasure (hdu5446)</h2><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5446" target="_blank" rel="external">http://acm.hdu.edu.cn/showproblem.php?pid=5446</a></p>
<h3 id="中文題意-7">中文題意</h3><p>給你$n,m,k$，以及$k$個質數$p_{i}$，模數$M = \prod_{i=1}^{k} p_{i}$，求$C_{n}^{m} \bmod M$</p>
<h3 id="解題報告-7">解題報告</h3><ol>
<li>對於每個$i$，用$Lucas$定理求$C_{n}^{m} \bmod p_{i}$</li>
<li>然後用$\text{Chinese Remainder Theorem}$合併這些結果</li>
</ol>
<h3 id="樣例代碼-7">樣例代碼</h3><figure class="highlight cpp"><figcaption><span>1010</span><a href="/code/hdu/hdu5446.cpp">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@ Including Header</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_std.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;csl_math.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> *  Name : hdu5446.cpp</span><br><span class="line"> *  Date : 2015年9月18日 下午4:37:28</span><br><span class="line"> *  Copyright : fateud.com</span><br><span class="line"> *  Anti-Mage : The magic ends here.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxk 20</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> maxn 100010</span></span><br><span class="line">ll a[maxk], fac[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">com</span><span class="params">(ll n, ll m, ll mod)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> fac[n] * csl::inv(fac[m] * fac[n-m], mod) % mod;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">lucas</span><span class="params">(ll n, ll m, ll mod)</span> </span>{</span><br><span class="line">  fac[<span class="number">0</span>] = <span class="number">1</span>, fac[mod] = <span class="number">0</span>;</span><br><span class="line">  rep(i, <span class="number">1</span>, mod) fac[i] = fac[i-<span class="number">1</span>] * i % mod;</span><br><span class="line"></span><br><span class="line">  ll res = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (m) {</span><br><span class="line">    res = res * com(n % mod, m % mod, mod) % mod;</span><br><span class="line">    n /= mod, m /= mod;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ Main Function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> _; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">  <span class="keyword">while</span> (_--) {</span><br><span class="line">    ll n, m; <span class="built_in">scanf</span>(i64 i64, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> k; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">    rep(i, <span class="number">0</span>, k) <span class="built_in">scanf</span>(i64, a+i);</span><br><span class="line"></span><br><span class="line">    ll M = <span class="number">1</span>; rep(i, <span class="number">0</span>, k) M *= a[i];</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    rep(i, <span class="number">0</span>, k) {</span><br><span class="line">      ll p = lucas(n, m, a[i]);</span><br><span class="line">      ll q = M / a[i];</span><br><span class="line">      ans += csl::mul(p, csl::mul(q, csl::inv(q, a[i]), M), M);</span><br><span class="line">      ans %= M;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">printf</span>(i64 <span class="string">"\n"</span>, ans);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="後記">後記</h2><p>今朝是先父小生日，願逝者安息，生者堅強。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="引言">引言</h2><p>すみません、すみません、すみません、<br>因爲我的愚蠢，坑了1010，最後才出6道。</p>]]>
    
    </summary>
    
      <category term="網絡賽" scheme="http://fateud.com/tags/%E7%B6%B2%E7%B5%A1%E8%B3%BD/"/>
    
      <category term="長春賽區" scheme="http://fateud.com/tags/%E9%95%B7%E6%98%A5%E8%B3%BD%E5%8D%80/"/>
    
      <category term="ACM/ICPC" scheme="http://fateud.com/categories/ACM-ICPC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[紀念世界反法西斯戰爭勝利70週年閱兵式]]></title>
    <link href="http://fateud.com/note-antifascism/"/>
    <id>http://fateud.com/note-antifascism/</id>
    <published>2015-09-03T04:27:40.000Z</published>
    <updated>2015-12-20T14:44:56.644Z</updated>
    <content type="html"><![CDATA[<div style="text-align:center;"><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-antifascism/sen-cin-paoq-tzeu.png"><br>無論毀譽參半<br>曾談笑風生的他 終究露出了疲態<br>那個詼諧搞怪的「蛤蛤」<br></div>

<p>警告：以上圖文與正文無關<br><a id="more"></a></p>
<h2 id="談下標題">談下標題</h2><p>細心的讀者會發現，標題似乎少了「暨」之前的一些字。<br>此處不多加點評，只因我個人覺得離勝利還遠得很，禮儀、文化、抑或更多。</p>
<h2 id="閱兵禮炮">閱兵禮炮</h2><p>還是講正事。<br>今朝我在投影儀前觀看了閱兵，70響禮炮轟鳴之時，主播解釋這是爲了紀念70週年，拉開大會的序幕。<br>70週年70響，80週年80響，我是多麼希望有成千上萬響的那一天，即便此身已化作一剖黃土。<br>弔古傷今，我不禁潸然淚下，默默趴在桌上抽噎。此刻憑誰都不曉得我心中的風起雲涌。</p>
<h2 id="木村成彥">木村成彥</h2><p>這幾日約莫是我的大姨父，特別容易受傷，軀體或者精神。下面又有一則撩撥我心絃的短文。</p>
<blockquote><p>（木村成彥）一說起養母，他想到了自己十幾歲時，養母在零下40攝氏度背他去醫院看病：<br>他想起了養母40歲就掉光了的牙齒，「我小時候身體弱，她沒有奶，聽說高粱汁可以養活，她用嘴嚼煮熟的高粱米，趁熱放到白布上擠出汁水，牙在那時被燙壞了。」<br>「她一直說：『小子，等你工作了就給我鑲牙。』可我工作就趕上了『文革』，一年的錢都不夠鑲牙，她終於沒等到我給她鑲牙的那一天……我對不起她。」木村成彥泣不成聲。</p>
</blockquote>
<p>這是段樸實無華的口語，卻勾起我潛藏深處的感動，眼眶險些綻出了淚。<br>子欲養而親不待，身爲子女的過失莫過於此。<br>一度試圖欺騙自己，科技發達、壽元綿長，盡孝之日尚多。<br>安知命運的擺佈，令愛你的與你愛的、宛如流沙，輕易從指縫溜走。</p>
<h2 id="讀書筆記">讀書筆記</h2><blockquote><p>三嬸是個好媽媽，我感慨地想。不知道鄭南音自己知道不知道，世界上有個人這麼在意她的想法和感覺——哪怕是不理解也要盡力維護，這是多大的福氣。</p>
<footer><strong>笛安</strong><cite>《西決》</cite></footer></blockquote>
<p>無論觜上是否承認，我深切的瞭解我娘對我的寬容。<br>不過我並不希望如此，甚至用粗暴的方式拒絕。<br>因爲這會讓我有種負罪感，而我選擇成爲懦弱的逃避者。</p>
]]></content>
    <summary type="html">
    <![CDATA[<div style="text-align:center;"><img class="class1" src="http://7xjw62.com5.z0.glb.clouddn.com/static/images/note-antifascism/sen-cin-paoq-tzeu.png"><br>無論毀譽參半<br>曾談笑風生的他 終究露出了疲態<br>那個詼諧搞怪的「蛤蛤」<br></div>

<p>警告：以上圖文與正文無關<br>]]>
    
    </summary>
    
      <category term="反法西斯" scheme="http://fateud.com/tags/%E5%8F%8D%E6%B3%95%E8%A5%BF%E6%96%AF/"/>
    
      <category term="木村成彥" scheme="http://fateud.com/tags/%E6%9C%A8%E6%9D%91%E6%88%90%E5%BD%A5/"/>
    
      <category term="西決" scheme="http://fateud.com/tags/%E8%A5%BF%E6%B1%BA/"/>
    
      <category term="閱兵" scheme="http://fateud.com/tags/%E9%96%B1%E5%85%B5/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[不存在上帝，因而人類沒有救贖]]></title>
    <link href="http://fateud.com/note-turtle/"/>
    <id>http://fateud.com/note-turtle/</id>
    <published>2015-08-23T05:44:14.000Z</published>
    <updated>2015-10-11T05:16:29.429Z</updated>
    <content type="html"><![CDATA[<h3 id="題記">題記</h3><blockquote><p>|8.23| 不存在上帝，因而人类没有救赎</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1" target="_blank" rel="external">user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1</a></cite></footer></blockquote>
<a id="more"></a>
<h3 id="引子">引子</h3><p>追了這禮拜的<a href="http://www.bilibili.com/video/av2773147/" target="_blank" rel="external">「暴走大事件」</a>，直至海龜八分鐘，險些潸然淚下。<br>無法想象它鼻中貫穿着人類的惡，竟能戰戰兢兢得捱過那麼多辰光。<br>當拍攝者們爲它施救之時，我如芒在背，卻強忍下滑動進度條的衝動。<br>這是人類賦予自己的罪，我沒有選擇的權力，只能將苦澀默默飲盡。</p>
<h3 id="彈幕">彈幕</h3><p>不過仔細看了彈幕的內容，感覺曾經充滿愛的B站，也漸漸踏上A站的老路。</p>
<p>彈幕中羣衆主要分成兩派：</p>
<ul>
<li>對人類的行爲進行懺悔，作出不亂扔垃圾的許諾</li>
<li>對上述人羣的諾言質疑，認爲一覺醒來便忘個一乾二淨</li>
</ul>
<p>在此我不武斷地評判他們的對錯，僅對海龜的遭遇報以深切的同情與深刻的懺悔；<br>因爲除卻以上兩者，還有一種利用彈幕互相撕逼的噴子，一般稱呼他們爲網絡暴民。<br>於此，我能真切得感受到，網絡上人與人之間正在發酵的、沒來由的仇視。<br>戈爾·維達在《熱愛飛翔》中所說：<em>我們已經失去了很多人性的因素。</em></p>
<h3 id="思索">思索</h3><p>網絡上的大衆會認爲他們站在一種天然的正義的地位，並以此試圖控制輿論——這在他們平時的生活中是無法想象的。<br>他們可以給素昧平生的人製作痛苦，卻不用承擔相應的後果，滿足了自己原始的作惡的本能。<br>他們並沒有被輕易地賦予了這項權利，卻因爲網絡缺乏有效的監管，達到了同樣的目的。<br>他們所過之處散播的，是狂歡與衝動，是暴力與毀滅，是對理性與尊嚴赤裸裸的踐踏。<br>他們自以爲擁有獨立判斷、並追求某種獨特的價值觀，但是往往成爲鬥爭的犧牲品。<br>他們往往相信自己是理性的，甚至催生出了相應的自信。<br>他們一如<a href="https://en.wikipedia.org/wiki/Gustave_Le_Bon" target="_blank" rel="external">勒龐</a><a href="https://en.wikipedia.org/wiki/The_Crowd:_A_Study_of_the_Popular_Mind" target="_blank" rel="external">《烏合之衆》</a>所說：<em>羣體行爲可能是突然的和極端的；智力過程可能是初步的和機械的。</em><br>他們的麇集日漸擴增，他們的思想如瘟疫一般蔓延，即便是理性的人也會像牲畜一般行動。<br>他們不需要「磚家」、「叫獸」，因爲無所不知的他們便是真理。<br>他們也不需要統計學知識，一鳞半爪足以幫助他們作出正確判斷。<br>他們在現實中過着最齷齪的生活；<br>他們在網絡中當着最促狹的觀衆。<br>他們沒有過去，更不需要未來。</p>
<h3 id="後記">後記</h3><p>一如李海鵬所說，我們在寒夜中彼此仇恨，問題的根源卻遠在天邊。<br>不想刻意去批判一些物事，因爲我素來不擅長講道理，只會用些許粗暴的方式表達。<br>故此，直至這種境地，只是想很悲哀的、卻理所當然的反問自己一句：</p>
<div style="text-align:center;font-style:italic">將爲這片土地作出的努力，難道就是爲了服務這樣的一羣人？</div>

<h3 id="無關">無關</h3><p>這幾天開始軍訓，只好抽出零碎的時間來完成，將斷裂的思路，一一接續在博文之中。<br>順帶一提，城院軍訓的本質是磨滅個性的瞎折騰，我從中收穫的是無聲的反抗、而非一味的服從。<br>在軍方和政策的雙重脅迫下，各種所謂的愚蠢的規定是無法改變的；我等「成功」成爲了當代的犬儒主義者。</p>
<div style="text-align:center;font-style:italic">我們正當人生中最美好的辰光，卻不能肆意地過最適合自己的生活。</div>


<p>順便附上徵文，命題莫名其妙，寫的自然也莫名其妙。</p>
<blockquote><p>我的軍訓、我的中國夢</p>
<p>第一次看到這個標題的時候，其實我是拒絕的，因爲總有些奇怪的命題讓我無從入手。我的軍訓，就是我的軍訓，至於爲什麼會跟中國夢扯上關係，我不甚明了，也漠不關心。當然這不妨礙我完成作文，因爲作文是種模式，就好似要撒一個官方的謊言，必須有時間人物地點，尤其關鍵的是必須有一個向上的主題。反正作爲中國式的文人，要求擁有無中生有的天賦；無論合理抑或不合理的要求，我已身經百戰了。</p>
<p>我先理性的認識了一下，我的軍訓，最主要是完成《兵役法》所規定的義務。這是最直接的來源，也是諸多大學生噩夢的開端。我不能說軍訓是不好的，軍訓好歹是有用的。你若強行要問軍訓好在哪裏，我不能武斷地回答你，因爲這樣容易對不起良心。</p>
<p>要說提高組織性紀律性吧，避不開暴曬、站軍姿、練步法之類的陳詞濫調。談及正步，個人經歷而言，學的正步不出一週便會忘光，以至於我初中高中大學學了三次，仍然沒有避免淪爲了回憶。正步自然不可能幫你找到女友，甚至不排除女友覺得你走路姿勢怪異決意分手的可能，更沒跟那些狗皮膏藥一樣，有包治百病的功效。所以事後我也沒覺得我將會多些服從上級的意識，甚至叛逆中二病會更加厲害。因爲你不能強迫我幹一些莫名其妙的事情，這會顯得我是個腦殘，必須聽別人的話才能達到某種目的。所以教官和學員之間，肯定有一個是傻子；而且作爲正常人，我不會去認爲自己是個傻子。這樣一圈兜下來，我也沒發現所謂的綜合素質有了長足的增長，僅有的變化就是更黑了點。</p>
<p>要說鍛鍊學生吃苦耐勞吧，更顯得蒼白無力，因爲強制性的吃苦未必能夠耐勞。哪怕軍訓了，平時上課該玩手機的繼續玩，該睡覺的也跟我一樣繼續睡，完全不受時空環境轉移，只要我高興就好。上課吹空調，下課打遊戲，平時不掛科，績點過的去，老師不必爲你操心笑還來不及，哪裏會跳出來讓你吃點苦頭。</p>
<p>至於我的中國夢，是無關乎黨啊、政府啊、軍隊啊之類的。因爲中國夢，理應是所有國人所共有的，不受搞七捻三的外界因素干擾。例如我想要華夏富強抵禦外虜，也不見得非得投筆從戎扛槍打靶；坐在電腦前，搞搞信息戰，豈不美哉？這樣看來，網絡恐怕也是一個沒有硝煙的戰場吧，淡化了軍訓的意義。</p>
<p>如Beyond所傾訴的：</p>
<div style="text-align:center;font-style:italic">無助與冰凍的眼睛/<br>流淚看天際帶悲憤/<br>是控訴戰爭到最後/<br>傷痛是兒童</div>

<p>所以我的中國夢，就是我能安安心心的睡在中國做夢。</p>
<div style="text-align:right">於乙未年甲申月丙子日</div><footer><strong>ChouUn</strong><cite>我的軍訓、我的中國夢</cite></footer></blockquote>
<p>UPD1：軍訓成績出來了，我值崗一次、看槍一次、通訊稿次次上交，竟然比基準分還要低。<br>我詢問徐曉波，給我的答覆竟然是通訊稿漏交，真是xnmbyy；後來馬晨斌查實，加分也沒給我加。<br>我對城院的軍訓，算是徹底的失望了，喜歡瞎折騰，你們開心就好。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="題記">題記</h3><blockquote><p>|8.23| 不存在上帝，因而人类没有救赎</p>
<footer><strong>ChouUn</strong><cite><a href="http://user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1">user.qzone.qq.com/327739187/mood/33e78813c349d9558cd00500.1</a></cite></footer></blockquote>]]>
    
    </summary>
    
      <category term="人性" scheme="http://fateud.com/tags/%E4%BA%BA%E6%80%A7/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[餘姚珠璣]]></title>
    <link href="http://fateud.com/note-pearl/"/>
    <id>http://fateud.com/note-pearl/</id>
    <published>2015-08-03T04:03:41.000Z</published>
    <updated>2015-09-08T23:43:27.899Z</updated>
    <content type="html"><![CDATA[<p>筆者母語是吳語太湖片臨紹小片餘姚話，包括餘姚（不含東部河姆渡等鎮）、慈溪（不含東部觀海衛等鎮）。<br>這個擬音採樣的對象是郊區音，相對城區而言有所損益，記錄的音值也偏中派點。<br>ps. 挖坑待填，有建議請回復</p>
<a id="more"></a>
<p>約定：<br><em>斜體字</em>：文讀音<br><strong>粗體字</strong>：白讀音<br>空缺：有音無字</p>
<h2 id="音系">音系</h2><h3 id="聲母">聲母</h3><table><tr><th>全清</th><th>次清</th><th>全濁</th><th>次濁</th></tr><tr><th>/p/ 幫</th><th>/pʰ/ 滂</th><th>/bʱ/ 並</th><th>/m//ʔm/ 明微</th></tr><tr><th>/ʔv/ 罕見</th><th>/f/ 非敷</th><th>/vʱ/ 奉</th><th>/ɱ/</th></tr><tr><th>/t/ 端</th><th>/tʰ/ 透</th><th>/dʱ/ 定</th><th>/n//ʔn/ (泥孃洪)</th></tr><tr><th>/ȶ/</th><th>/ȶʰ/</th><th>/ȡʱ/</th><th>/ȵ//ʔȵ/ (泥孃疑細)日</th></tr><tr><th>/k/ 見</th><th>/kʰ/ 溪</th><th>/gʱ/ (羣洪)</th><th>/ŋ//ʔŋ/ (疑洪)</th></tr><tr><th>/ʦ/ 照(精洪)知</th><th>/ʦʰ/ 穿(清洪)徹</th><th>/ʣʱ/ 牀(從洪)澄</th><th></th></tr><tr><th></th><th>/s/ 審(心洪)</th><th>/zʱ/ 禪(邪洪)<em>日</em></th><th></th></tr><tr><th>/ʨ/ (精細)</th><th>/ʨʰ/ (清細)</th><th>/ʥʱ/ (從羣細)</th><th></th></tr><tr><th></th><th>/ɕ/ (心細)</th><th>/ʑʱ/ (邪細)</th><th></th></tr><tr><th>/ʔ/ 影</th><th>/h//x/ 曉</th><th>/ɦ/ 匣</th><th>/j/</th></tr><tr><th></th><th></th><th></th><th>/l//ʔl/ 來</th></tr><tr><th></th><th></th><th></th><th>/ɲ/</th></tr></table>

<h3 id="韻母">韻母</h3><table><tr><th>開口呼</th><th>齊齒呼</th><th>合口呼</th><th>撮口呼</th></tr><tr><th>陰聲韻</th></tr><tr><th></th><th>/i/ 微廢齊</th><th>/ɯ/ 汝烏夫</th><th>/y/ 余虞雨</th></tr><tr><th></th><th>/ɿ/ 此水之</th><th>/ʮ/ 諸粗鬚</th><th></th></tr><tr><th>/a/ 泰鞋買</th><th>/ia/ 茄姐夜</th><th>/ua/ 壞乖快</th><th></th></tr><tr><th>/o/ 麻佳差</th><th>/io/ 亞<em>家雅</em></th><th>/uo/ 瓜話瓦</th><th></th></tr><tr><th>/e/ 岁灰愛</th><th>/ie/ 艾<em>也</em></th><th>/ue/ 危爲會</th><th></th></tr><tr><th>/ɔ/ 豪交兆</th><th>/iɔ/ 肴宵蕭</th><th></th><th></th></tr><tr><th>/ɤ/ 浮豆貿</th><th>/iɤ/ 尤幽流</th><th></th><th></th></tr><tr><th>/u//ou/ 歌果戈</th><th></th><th></th><th></th></tr><tr><th>陽聲韻</th></tr><tr><th>/ɛ̃/ 山刪咸</th><th>/iɛ̃/ <em>念</em>眼廿</th><th>/uɛ̃/ 桓彎關</th><th></th></tr><tr><th>/ẽ/ 寒南扇</th><th></th><th></th><th></th></tr><tr><th>/ɪ̃/ 仙先添</th><th></th><th></th><th></th></tr><tr><th>/ø̃/ 滿盤團</th><th></th><th>/uø̃/ 碗管寬</th><th>/yø̃/ 元卷涓</th></tr><tr><th>/əɲ/ 臻曾深</th><th>/ɪɲ/ 欣影靜</th><th>/uəɲ/ 倫魂文</th><th>/yɪɲ/ <em>君</em></th></tr><tr><th>/aŋ/ 庚耕生</th><th>/iaŋ/ 陽良牆</th><th>/uaŋ/ 橫梗晃</th><th></th></tr><tr><th>/ɔŋ/ 江巷唐</th><th>/iɔŋ/ <em>降</em></th><th>/uɔŋ/ 光王黃</th><th></th></tr><tr><th>/uŋ/ 東冬鐘</th><th></th><th></th><th>/yuŋ/ 君窮熊</th></tr><tr><th>入声韵</th></tr><tr><th>/ɐʔ/ 瞎麥陌</th><th>/iɐʔ/ 药若嚼</th><th>/uɐʔ/ 滑霍刮</th><th></th></tr><tr><th>/ɪʔ/ 一席雪</th><th></th><th></th><th></th></tr><tr><th>/eʔ/ 術末沒</th><th></th><th>/ueʔ/ 活括骨</th><th>/yeʔ/ <em>月</em></th></tr><tr><th>/ɔʔ/ 屋八各</th><th></th><th>/uɔʔ/ 郭擴沃</th><th>/yɔʔ/ 菊肉<strong>月</strong></th></tr><tr><th>單字韻</th></tr><tr><th>/əɻ/ <em>兒耳而</em></th><th>/n̙/ 嗯唔芋</th><th>/ŋ̍/ 五魚兒</th><th>/m̙/ 嘸毋姆</th></tr></table>

<ol>
<li>/eʔ/易與/ɪʔ/混淆</li>
<li>/ẽ/易與/ɪ̃/或/ɛ̃/混淆</li>
<li>尚未確認/əʔ//øʔ//ʉʔ/的形式</li>
<li>/ɯ/與/ʮ/互補，遇合三魚虞韻知莊章日組字讀後者</li>
<li>止攝合口三等字“吹嘴水”不讀/e//ʮ/讀/ɿ/</li>
<li>止合口見系部分字分文白讀，文讀作/y/，白讀作/ue/</li>
<li>宕攝開口三等字，知組與莊章組韻母主要元音有別/a//ɔ/，張≠裝樟</li>
<li>通合三与臻合三見系入聲字逢細音時合流，菊=橘、曲=屈、轴=掘</li>
</ol>
<h3 id="聲調">聲調</h3><table><tr><th></th><th>平</th><th>上</th><th>去</th><th>入</th></tr><tr><th>陰</th><th>324</th><th>435</th><th>52/44</th><th>5</th></tr><tr><th>陽</th><th>231</th><th>陽去</th><th>113</th><th>23/2</th></tr></table>

<h2 id="拼音">拼音</h2><h3 id="聲母-1">聲母</h3><h3 id="韻母-1">韻母</h3><h2 id="單字">單字</h2><ul>
<li>姊</li>
<li>尾</li>
<li>微</li>
</ul>
<h2 id="詞彙">詞彙</h2><h3 id="飲食">飲食</h3><ul>
<li>豆腐潤<br>豆腐潤 deu vu zeon /dɤ vɯ zən/</li>
<li>楊梅</li>
<li>翼梢</li>
<li>舌頭</li>
<li>帶魚</li>
<li>味道</li>
</ul>
<h3 id="文化">文化</h3><ul>
<li>灘簧</li>
<li>姚劇</li>
<li>搭天橋</li>
</ul>
<h3 id="稱謂">稱謂</h3><ul>
<li>我儂渠及複數</li>
<li>呣媽爸爸爹孃</li>
<li>老倌</li>
<li>先生</li>
<li>後生(家)</li>
</ul>
<h3 id="罹語">罹語</h3><ul>
<li>衆生</li>
<li>離爹乖孃</li>
<li>不出產</li>
<li>卵脬</li>
</ul>
<h3 id="其他">其他</h3><ul>
<li>按板</li>
<li>石骨鐵硬</li>
<li>一式一樣</li>
<li>花樣百出/奇出百樣</li>
<li>犯關</li>
<li>葉爿</li>
<li>天家</li>
</ul>
<h2 id="語法">語法</h2><ul>
<li>哉/了哉</li>
<li>未/了未</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>筆者母語是吳語太湖片臨紹小片餘姚話，包括餘姚（不含東部河姆渡等鎮）、慈溪（不含東部觀海衛等鎮）。<br>這個擬音採樣的對象是郊區音，相對城區而言有所損益，記錄的音值也偏中派點。<br>ps. 挖坑待填，有建議請回復</p>]]>
    
    </summary>
    
      <category term="方音" scheme="http://fateud.com/tags/%E6%96%B9%E9%9F%B3/"/>
    
      <category term="語言學" scheme="http://fateud.com/tags/%E8%AA%9E%E8%A8%80%E5%AD%B8/"/>
    
      <category term="音韻學" scheme="http://fateud.com/tags/%E9%9F%B3%E9%9F%BB%E5%AD%B8/"/>
    
      <category term="餘姚" scheme="http://fateud.com/tags/%E9%A4%98%E5%A7%9A/"/>
    
      <category term="筆記" scheme="http://fateud.com/categories/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[亡语]]></title>
    <link href="http://fateud.com/note-leave/"/>
    <id>http://fateud.com/note-leave/</id>
    <published>2015-04-13T07:36:26.000Z</published>
    <updated>2015-08-28T13:50:50.915Z</updated>
    <content type="html"><![CDATA[<p>就在此时，忽然收到我妈的消息，阿太也走了。</p>
<a id="more"></a>
<h3 id="2015-04-13">2015.04.13</h3><p>我回到寝室，很出乎自己意料，哭得比以往都要伤心。<br>毕竟我爹走的时候，我并没有流露出弱态。<br>终究还是太突然的缘故吧。<br>阿太以往身子骨健硕，使我没有过多的防备。<br>突如其来的噩耗，轻易的击穿了我的底线。<br>对阿太的关注，还是太少了。<br>逝者已矣。</p>
<h3 id="2015-07-08">2015.07.08</h3><p>今晨，半醒半睡中，梦到了我爹。<br>没有感到些许惊讶。<br>他的左眼眶是空的，似是被人刮去。<br>我问他我妈呢。<br>他只是流了几滴泪，说句，“她死了”。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>就在此时，忽然收到我妈的消息，阿太也走了。</p>]]>
    
    </summary>
    
      <category term="伤离别" scheme="http://fateud.com/tags/%E4%BC%A4%E7%A6%BB%E5%88%AB/"/>
    
      <category term="雜記" scheme="http://fateud.com/categories/%E9%9B%9C%E8%A8%98/"/>
    
  </entry>
  
</feed>